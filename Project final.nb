(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    380271,       7217]
NotebookOptionsPosition[    373716,       7102]
NotebookOutlinePosition[    374142,       7119]
CellTagsIndexPosition[    374099,       7116]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell["Multivariate interpolation", "Chapter",
 CellChangeTimes->{{3.8143876814531484`*^9, 3.8143877095135207`*^9}, {
   3.8143877485940633`*^9, 3.8143877770393453`*^9}, {3.8143881681951313`*^9, 
   3.814388170107815*^9}, {3.8143888128792887`*^9, 3.8143888181414156`*^9}, {
   3.814389213786014*^9, 3.8143892876429787`*^9}, {3.814389545565392*^9, 
   3.8143895756909637`*^9}, {3.8143897289205685`*^9, 
   3.8143898366105585`*^9}, {3.814389914199216*^9, 3.8143899668000436`*^9}, {
   3.814390312190752*^9, 3.8143903272953005`*^9}, {3.814390357983452*^9, 
   3.8143903603069296`*^9}, {3.814390976400036*^9, 3.8143909880070453`*^9}, {
   3.8143911036606493`*^9, 3.814391184772421*^9}, {3.81439123201234*^9, 
   3.8143912650252867`*^9}, {3.814391329833211*^9, 3.814391330976889*^9}, {
   3.8143917590756817`*^9, 3.8143917733640614`*^9}, {3.8150202647874575`*^9, 
   3.815020283426301*^9}, {3.8150203211683674`*^9, 3.815020369791629*^9}, {
   3.815020443425782*^9, 3.8150205638622217`*^9}, {3.81502067613048*^9, 
   3.8150207851728487`*^9}, {3.815020833902521*^9, 3.8150209284867764`*^9}, {
   3.8150210460404963`*^9, 3.8150210723866944`*^9}, {3.815021108769168*^9, 
   3.815021121345848*^9}, {3.815021225064395*^9, 3.815021226540863*^9}, {
   3.815021258077001*^9, 3.815021327728551*^9}, {3.815021357744835*^9, 
   3.8150213755891743`*^9}, {3.8150215501062746`*^9, 
   3.8150215540844793`*^9}, {3.8150229012382097`*^9, 3.815022931348933*^9}, {
   3.815023205922383*^9, 3.815023222463122*^9}, {3.81502326116686*^9, 
   3.8150232859708877`*^9}, {3.8150233309507246`*^9, 3.815023343399509*^9}, {
   3.8150233972308283`*^9, 3.8150234149347906`*^9}, {3.815023472680672*^9, 
   3.8150236174469604`*^9}, {3.815023655605551*^9, 3.815023782397756*^9}, {
   3.8150238682620463`*^9, 3.8150240968261833`*^9}, {3.8150241440123167`*^9, 
   3.815024186209594*^9}, {3.8150265689333906`*^9, 3.815026627581793*^9}, {
   3.8150266597596264`*^9, 3.8150267049681253`*^9}, {3.815026857120922*^9, 
   3.815026872374137*^9}, {3.8150269079871893`*^9, 3.815026929414056*^9}, {
   3.8150269655100775`*^9, 3.8150269684468374`*^9}, {3.815088627726986*^9, 
   3.81508867527603*^9}, {3.8156770865285506`*^9, 3.8156770883396444`*^9}, 
   3.816190083185969*^9, {3.816279964634199*^9, 3.8162800153939075`*^9}, {
   3.816280385143592*^9, 3.816280389265355*^9}},
 TextAlignment->Center,ExpressionUUID->"5f297e8b-a49f-4318-8d2c-63a253487d35"],

Cell[CellGroupData[{

Cell["\<\

Group:

Cameron Moats

\
\>", "Chapter",
 CellChangeTimes->{{3.8162897726717463`*^9, 3.816289789635409*^9}, {
  3.816303625764019*^9, 
  3.816303627606126*^9}},ExpressionUUID->"c3747d0f-6e8b-4b9a-a202-\
a155b224e3c2"],

Cell[TextData[{
 "The algorithm we will be looking at is multivariate interpolation and we\
\[CloseCurlyQuote]ll specifically look at examples in the 3d case as it\
\[CloseCurlyQuote]s easy to visualize. Multivariate interpolation doesn\
\[CloseCurlyQuote]t work the same as polynomial interpolation, we can\
\[CloseCurlyQuote]t just have some unknown points and get an equation, \
instead we must start with an equation with some unknown coefficients and \
some data points, then we can solve for the unknown coefficients  to get our \
multivariate interpolation. So we have to input an equation that we\
\[CloseCurlyQuote]re trying to solve for, one of the advantages of this is \
the equation can have combinations of things like Cos(x) and ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["e", "x"], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "b9d295ee-b73a-44f0-8220-77a20e0b79db"],
 " in it where we couldn\[CloseCurlyQuote]t get that with polynomial \
interpolation. However, there is a disadvantage of having to make an equation \
with these unknowns, and it\[CloseCurlyQuote]s an important one, the equation \
will not always be able to solve for the unknown coefficients (because of \
indeterminates), which means there is no way for the equation entered to work \
for the data points you entered. With these two things in mind, we can begin \
our discussion with how the algorithm works. First, the user must determine \
what data points they want to enter and what equation they want to fit it to. \
When coming up with an equation you must enter it as a list and each entry in \
the list must be unique( we can\[CloseCurlyQuote]t have {x,x}) and x, y, z, \
etc must be entered as ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"x", "=", 
     SubscriptBox["y", "1"]}], ",", 
    RowBox[{"y", "=", 
     SubscriptBox["y", "2"]}], ",", 
    RowBox[{"z", "=", 
     SubscriptBox["y", "3"]}], ",", "etc"}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "768c40cb-61ca-455e-a5b3-da46cd63290c"],
 ". So, For example, f(x)= ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Alpha]", "1"], 
     SubscriptBox["y", "1"]}], "+", 
    RowBox[{
     SubscriptBox["\[Alpha]", "2"], 
     SubscriptBox["y", "2"]}], "+", 
    RowBox[{
     SubscriptBox["\[Alpha]", "3"], 
     SuperscriptBox[
      SubscriptBox["y", "1"], "2"]}], "+", 
    RowBox[{
     SubscriptBox["\[Alpha]", "4"], 
     SuperscriptBox[
      SubscriptBox["y", "2"], "2"]}], "+", 
    RowBox[{
     SubscriptBox["\[Alpha]", "5"], "3"}]}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "c4c45c59-a690-4b96-b2a0-f9bd6d7df263"],
 " should be entered as ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["y", "1"], ",", 
     SubscriptBox["y", "2"], ",", 
     SuperscriptBox[
      SubscriptBox["y", "1"], "2"], ",", 
     SuperscriptBox[
      SubscriptBox["y", "2"], "2"], ",", "3"}], "}"}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "971a7062-f319-4dbc-851a-078835893eee"],
 ".  I wrote a function that generates an equation if the user does not want \
to do this themself, but this equations coefficients ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Alpha]", "i"], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "69870513-d0c0-4a94-852c-971b40b0f3af"],
 " will not always be solvable  for certain data points because of \
indeterminates, so it is not guaranteed to work . For this algorithm to work, \
the number of data points must equal the number of items in the list because \
we will create a matrix with dimensions that corresponds to the number of \
data points and the number of items and then take the determinant of this \
matrix, but for this determinate to exist we need an n x n matrix which is \
why these two lengths are equal to each other. Now that we have some of the \
more technical aspects of the algorithm explained, we\[CloseCurlyQuote]ll do \
the algorithm but we\[CloseCurlyQuote]ll look at it through an example since \
the symbolic form is pretty strange looking. \n\nWe want to interpolate the \
data points {(0,0,1),(0,1,2),(1,1,3)} on a function\n ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["z", "i"], "=", 
    RowBox[{
     RowBox[{
      SubscriptBox["\[Alpha]", "1"], 
      SubscriptBox["y", 
       SubscriptBox["1", "i"]]}], "+", 
     RowBox[{
      SubscriptBox["\[Alpha]", "2"], 
      SubscriptBox["y", 
       SubscriptBox["2", "i"]]}], "+", 
     SubscriptBox["\[Alpha]", "3"]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "9bfcf301-a9b6-45f0-ac10-bee73efd1753"],
 ". So as a list ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["z", "i"], "=", 
    RowBox[{"{", 
     RowBox[{
      SubscriptBox["y", 
       SubscriptBox["1", "i"]], ",", 
      SubscriptBox["y", 
       SubscriptBox["2", "i"]], ",", "1"}], "}"}]}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "d82c3b4c-8dd0-4a25-8a22-e054557f4054"],
 ". Here i just represents the ",
 StyleBox["ith",
  IgnoreSpellCheck->True],
 " data point. Now we\[CloseCurlyQuote]ll plug that values ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["y", "1"], " ", "and", " "}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "b6b33047-3c38-466f-aa73-616dfd19d952"],
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "2"], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "8151c516-4ef3-45b7-af66-cf5c723112fa"],
 " from the ith data points into z and keep it as a list. (Note: I did not \
include the i when talking about how to enter in the equation to the \
algorithm because the algorithm won\[CloseCurlyQuote]t work if you do this, \
but when you do this on paper you should have ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["y", 
      SubscriptBox["1", "i"]], ",", " ", 
     SubscriptBox["y", 
      SubscriptBox["2", "i"]], ",", 
     SubscriptBox["y", 
      SubscriptBox["3", "i"]], ",", "etc"}], "}"}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "6f05f95e-efbd-42ce-8eaa-cab37ce9bffe"],
 " instead of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      SubscriptBox["y", 
       RowBox[{"1", ","}]], 
      SubscriptBox["y", "2"]}], ",", 
     SubscriptBox["y", "3"], ",", "etc"}], "}"}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "95034e5a-91f1-4488-89d2-dd71feffdfb4"],
 "\n For (0,0,1): ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["y", 
     SubscriptBox["1", "1"]], "=", 
    RowBox[{
     RowBox[{"0", " ", "and", " ", 
      SubscriptBox["y", 
       SubscriptBox["2", "1"]]}], "=", 
     RowBox[{"0", "  ", "so", " ", 
      SubscriptBox["z", "1"]}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "f1f2993b-8081-4520-a3aa-ce9526950cb7"],
 "={0,0,1} \nFor (0,1,2): ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["y", 
     SubscriptBox["1", "2"]], "=", 
    RowBox[{
     RowBox[{"0", "  ", "and", " ", 
      SubscriptBox["y", 
       SubscriptBox["2", "2"]]}], "=", 
     RowBox[{
      RowBox[{"1", " ", "so", " ", 
       SubscriptBox["z", "2"]}], "="}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "f46c1b4b-b334-491a-9a3e-665160055208"],
 " {0,1,1}\nFor (1,1,3): ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["y", 
     SubscriptBox["1", "3"]], "=", 
    RowBox[{
     RowBox[{"1", " ", "and", " ", 
      SubscriptBox["y", 
       SubscriptBox["2", "3"]]}], "=", "3"}]}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "d9baf45a-17e0-446e-a20a-bea89bd1b687"],
 " so ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["z", "3"], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "12dae107-8783-4eea-8eb3-17c81fb32d19"],
 "={1,1,1}\n\nNow from these three we can create a matrix out of all the z \
lists, so our matrix M should be ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["z", "1"], ",", 
     SubscriptBox["z", "2"], ",", 
     SubscriptBox["z", "3"]}], "}"}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "324ccbda-fec3-4cdf-bda0-c13afae54b24"],
 "\nM=",
 Cell[BoxData[GridBox[{
    {"0", "0", "1"},
    {"0", "1", "1"},
    {"1", "1", "1"}
   },
   GridBoxDividers->{
    "Columns" -> {True, {False}, True}, "Rows" -> {True, {False}, True}}]],
  ExpressionUUID->"ebdfc197-56df-45ce-a013-558d93b23914"],
 " or M = {(0,0,1),(0,1,1),(1,1,1)}\nThis is what coeffmatrix does in our \
algorithm and we could do this for more data points as long as the number of \
data points equals the length of the list of our equation. If we did this for \
5 data points we would need to create a 5x5 matrix using the same steps as \
this case.\n\n\n\nNow we will replace each ith row with just z, without \
having values of the data points plugged into z. We will do this for how many \
i rows there are, in our case 3, and we will call each of these matrices ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[CapitalDelta]", "i"], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "f64a4ed1-f198-43da-98db-7254ab03565a"],
 "\n\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[CapitalDelta]", "1"], "=", GridBox[{
      {
       SubscriptBox["y", "1"], 
       SubscriptBox["y", "2"], "1"},
      {"0", "1", "1"},
      {"1", "1", "1"}
     },
     GridBoxDividers->{
      "Columns" -> {True, {False}, True}, "Rows" -> {True, {False}, True}}]}],
    TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "f1495ecb-d5c2-4613-9e35-7d4b74b67d89"],
 "\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[CapitalDelta]", "2"], "=", GridBox[{
      {"0", "0", "1"},
      {
       SubscriptBox["y", "1"], 
       SubscriptBox["y", "2"], "1"},
      {"1", "1", "1"}
     },
     GridBoxDividers->{
      "Columns" -> {True, {False}, True}, "Rows" -> {True, {False}, True}}]}],
    TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "cfa98b29-b755-46ba-824b-046f2387e01b"],
 "\n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[CapitalDelta]", "3"], "=", GridBox[{
      {"0", "0", "1"},
      {"0", "1", "1"},
      {
       SubscriptBox["y", "1"], 
       SubscriptBox["y", "2"], "1"}
     },
     GridBoxDividers->{
      "Columns" -> {True, {False}, True}, "Rows" -> {True, {False}, True}}]}],
    TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "0460c64d-4dc6-4f4e-96a4-b7172bbf8f5f"],
 "\n\nNow we need to calculate the determinant of all the matrices we have \
found and in this example we need to do this 4 times \n\nDet(M)= -1\
\[LineSeparator]Det(",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[CapitalDelta]", "1"], ")"}], "=", 
    RowBox[{
     SubscriptBox["y", "2"], "-", "1"}]}], TraditionalForm]],ExpressionUUID->
  "46616473-3c51-4849-831b-764be99d7b31"],
 "\nDet(",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[CapitalDelta]", "2"], ")"}], "=", 
    RowBox[{
     SubscriptBox["y", "1"], "-", 
     SubscriptBox["y", "2"]}]}], TraditionalForm]],ExpressionUUID->
  "c889d517-4bbd-477c-8aa3-9748134641f4"],
 "\nDet(",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[CapitalDelta]", "3"], ")"}], "=", 
    RowBox[{"-", 
     SubscriptBox["y", "1"]}]}], TraditionalForm]],ExpressionUUID->
  "92ea20e3-cd7a-4aa9-8ee3-82aaa49c876f"],
 "\n\nThe last thing we do is enter this into a magical equation which is ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "=", 
    RowBox[{
     UnderscriptBox[
      OverscriptBox["\[Sum]", "p"], 
      RowBox[{"i", "=", "1"}]], 
     RowBox[{
      SubscriptBox["f", "i"], 
      FractionBox[
       RowBox[{"Det", "(", 
        SubscriptBox["\[CapitalDelta]", "i"], ")"}], 
       RowBox[{"Det", "(", "M", ")"}]]}]}]}], TraditionalForm]], "Text",
  FormatType->"TraditionalForm",ExpressionUUID->
  "308f3324-8497-4c1e-b884-d033f96e5044"],
 " where ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["f", "i"], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "a14512ba-db69-4b81-a1c6-4779848e1ecf"],
 " should be our last value in our ith data point and p is our number of data \
points. so we get z= ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SubscriptBox["z", "1"], "(", 
      FractionBox[
       RowBox[{"Det", "(", 
        SubscriptBox["\[CapitalDelta]", "1"], ")"}], 
       RowBox[{"-", "1"}]], ")"}], "+", 
     RowBox[{
      SubscriptBox["z", "2"], "(", 
      FractionBox[
       RowBox[{"Det", "(", 
        SubscriptBox["\[CapitalDelta]", "2"], ")"}], 
       RowBox[{"-", "1"}]], ")"}], "+", 
     RowBox[{
      SubscriptBox["z", "3"], "(", 
      FractionBox[
       RowBox[{"Det", "(", 
        SubscriptBox["\[CapitalDelta]", "3"], ")"}], 
       RowBox[{"-", "1"}]], ")"}]}], "=", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SubscriptBox["y", "2"]}], ")"}], "+", 
      RowBox[{"2", 
       RowBox[{"(", 
        RowBox[{
         SubscriptBox["y", "2"], "-", 
         SubscriptBox["y", "1"]}], ")"}]}], "+", 
      RowBox[{"3", 
       SubscriptBox["y", "1"]}]}], "=", 
     RowBox[{
      SubscriptBox["y", "1"], "+", 
      SubscriptBox["y", "2"], "+", "1"}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "a01e4446-fb8d-4872-b08e-5f739d46597d"],
 "\n\nWe could go about doing the same steps for other equations and data \
points"
}], "Text",
 CellChangeTimes->CompressedData["
1:eJwdz11IUwEcBfDbqNnDIkNamD649TFrunKaaF94RxRC2WWmU5swL35OykpX
VCbMhiwVw3Kb3NYlNZgLdLCE2RziMvYQFTPBkmGoDxNrzFFa5HK0cx/+/Dhw
Hs5fRDcpa3gEQcjiB3+nWvZvXg+Rc7umsmDlk0A+5IkF5yGV13YR+qqnr8CO
/t5yWGDpVEPll93V0HxvqBbmzP1phO9upOhgYcW5Vnh6jbZC9q/TCT29pkXY
vnDsB/xE05xmqXuD26NZzYjGPSMIHofvi5Pk8NVLRy50VESuwqFDAxrOBut9
+F3y7SEcUei7YKfE+BGuP6CWYf1o+grs9/StQq0qYw3mS3pisJ2nS/qHP28m
psLMek06FIXII1DhpzKhWP61DVJ8hwEKy7ZMULskegazZlpZqM79NQjDacww
jBavj0AZw47ClmCdE9Ya58dhd8pzL/T7igIwYkgMwoP2tBVYKjaHIZHnT9iK
+1R/WABpftlJuFjFJ6GYl01B94VlNRSaixrhreSFZrjzp1APt+3TdEBZVXMP
7ErOMUFP4VEX1zvg9cBx7Z5J+ObSxluodM/6YIEx8gEarBPzcHbvZ3kMWZVw
Asbs2Soole6ohFPdj1vgWE1AB/UNrBG671hcsJQ4xWxvCpGTvDBn3Yu7A1DB
PBqEt0tsNjh8eckO+yZKXsNrpM0FWSbqhWc3p2fgfyGBmwU=
  "],ExpressionUUID->"abb8dbb8-f476-48e9-b0c6-51e4a8e87a19"],

Cell["", "Text",
 CellChangeTimes->{{3.81508872131194*^9, 3.8150887218199615`*^9}, {
   3.81508881456627*^9, 3.815088846111731*^9}, {3.8151750013936043`*^9, 
   3.8151750089266596`*^9}, {3.8151752918327703`*^9, 3.8151752938743267`*^9}, 
   3.815175418493291*^9, {3.815176892825536*^9, 3.8151768929811535`*^9}, {
   3.815664381516244*^9, 3.8156644480405455`*^9}, {3.8156655051469274`*^9, 
   3.8156656334581366`*^9}, {3.8156662801767483`*^9, 3.815666320241321*^9}, {
   3.815666521141074*^9, 3.815666543401295*^9}, {3.8156666125302715`*^9, 
   3.815666625072359*^9}, 3.815666836472963*^9, {3.8156668901597824`*^9, 
   3.8156668996768694`*^9}, {3.8156669727168293`*^9, 3.815667001403471*^9}, {
   3.815667146292409*^9, 3.815667184550991*^9}, {3.8156716338637533`*^9, 
   3.8156716353427963`*^9}, {3.8156878748798556`*^9, 3.815687875069889*^9}, {
   3.8156975698148456`*^9, 3.81569758201339*^9}, 3.816190086987836*^9, 
   3.8162800300824413`*^9},ExpressionUUID->"88ee86db-d7f6-428d-a11c-\
d37b6bec96f1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"coeffmatrix", "[", 
    RowBox[{"m_", ",", "z_"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "dimensions", ",", " ", "matrix", ",", "npoints", ",", 
       "ncoefficients"}], "}"}], ",", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
        RowBox[{
        "m", " ", "is", " ", "our", " ", "data", " ", "points", " ", "and", 
         " ", "z", " ", "is", " ", "a", " ", "list", " ", "of", " ", "a", " ",
          "function", " ", "where", " ", "each", " ", "object", " ", "in", 
         " ", "the", " ", "list", " ", "corresponds", " ", "to", " ", "a", 
         " ", "single", " ", "term", " ", "with", " ", "unknown", " ", 
         "coefficients", " ", "\[IndentingNewLine]", " ", "For", " ", 
         RowBox[{"exampe", ":", " ", "f"}]}], "=", 
        RowBox[{
         RowBox[{
          SubscriptBox["\[Alpha]", "1"], 
          SubscriptBox["y", "1"]}], "+", 
         RowBox[{
          SubscriptBox["\[Alpha]", "2"], 
          SubscriptBox["y", "2"], " ", "should", " ", "be", " ", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             SubscriptBox["y", "1"], ",", 
             SubscriptBox["y", "2"]}], "}"}], ".", "\[IndentingNewLine]", 
           RowBox[{"Note", ":", " ", 
            RowBox[{"please", " ", "enter", " ", "x"}]}]}]}]}]}], ",", "y", 
       ",", "z", ",", 
       RowBox[{"etc", " ", "in", " ", "z", " ", "as", " ", 
        SubscriptBox["y", "1"]}], ",", 
       SubscriptBox["y", "2"], ",", 
       SubscriptBox["y", "3"], ",", 
       RowBox[{
       "etc", " ", "or", " ", "this", " ", "will", " ", "not", " ", 
        "work"}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"dimensions", "=", " ", 
       RowBox[{"Length", "[", 
        RowBox[{"m", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "Number", " ", "of", " ", "dimenstions", " ", "the", " ", "points", 
         " ", 
         RowBox[{"have", ".", " ", 
          RowBox[{"(", 
           RowBox[{"x", ",", "y", ",", "z"}], ")"}]}], " ", "would"}], "=", 
        "3"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"npoints", "=", 
       RowBox[{"Length", "[", "m", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"ncoefficients", "=", 
       RowBox[{"Length", "[", "z", "]"}]}], ";", 
      RowBox[{"(*", 
       RowBox[{
       "This", " ", "is", " ", "just", " ", "the", " ", "number", " ", "of", 
        " ", "coeffecients", " ", 
        RowBox[{"we", "'"}], "re", " ", "solving", " ", "for", " ", "in", " ",
         "z"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"matrix", "=", 
       RowBox[{"{", "}"}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "We", " ", "want", " ", "to", " ", "create", " ", "a", " ", "matrix", 
        " ", "where", " ", "each", " ", "row", " ", "takes", " ", "the", " ", 
        "value", " ", "of", " ", "z", " ", "when", " ", 
        RowBox[{"m", "[", 
         RowBox[{"[", 
          RowBox[{"row", "#"}], "]"}], "]"}], " ", "values", " ", "are", " ", 
        "plugged", " ", "into", " ", "z"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"ncoefficients", "\[NotEqual]", "npoints"}], ",", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<Number of points must equal the number of coefficeints in your \
equation\>\"", "]"}], ";", 
         RowBox[{
         "Return", "[", 
          "\"\<Number of points must equal the number of coefficeints in your \
equation\>\"", "]"}]}], ",", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"Theorem", " ", "states", " ", "npoints"}], "=", 
          RowBox[{
          "ncoefficients", " ", "for", " ", "this", " ", "interpolation", " ",
            "to", " ", "work"}]}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"For", "[", " ", 
          RowBox[{
           RowBox[{"i", "=", "1"}], ",", 
           RowBox[{"i", "<", 
            RowBox[{"npoints", "+", "1"}]}], ",", 
           RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"For", "[", 
             RowBox[{
              RowBox[{"k", "=", "1"}], ",", 
              RowBox[{"k", "<", 
               RowBox[{"dimensions", "+", "1"}]}], ",", 
              RowBox[{"k", "++"}], ",", 
              RowBox[{
               SubscriptBox["y", "k"], "=", 
               RowBox[{
                RowBox[{"m", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "[", 
                RowBox[{"[", "k", "]"}], "]"}]}]}], "]"}], ";", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
              "This", " ", "could", " ", "calculate", " ", "one", " ", "too", 
               " ", "many", " ", 
               SubscriptBox["y", "k"], " ", "values", " ", "since", " ", 
               "there", " ", "could", " ", "be", " ", "a", " ", "constant", 
               " ", "term", " ", "in", " ", "z"}], ",", " ", 
              RowBox[{"but", " ", "only", " ", "one", " ", "so", " ", 
               RowBox[{"there", "'"}], "s", " ", "no", " ", "real", " ", 
               "reason", " ", "to", " ", "work", " ", "around", " ", "it"}]}],
              " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"AppendTo", "[", 
             RowBox[{"matrix", ",", "z"}], "]"}]}]}], "]"}], ";", 
         RowBox[{"(*", 
          RowBox[{
          "This", " ", "just", " ", "adds", " ", "a", " ", "row", " ", "in", 
           " ", "the", " ", "matrix", " ", "that", " ", "corresponds", " ", 
           "to", " ", "the", " ", "z", " ", "values", " ", "where", " ", 
           RowBox[{"m", "[", 
            RowBox[{"[", 
             RowBox[{"row", "#"}], "]"}], "]"}], " ", "are", " ", "the", " ", 
           "points", " ", "plugged", " ", "into", " ", "z"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"For", "[", 
          RowBox[{
           RowBox[{"k", "=", "1"}], ",", 
           RowBox[{"k", "<", 
            RowBox[{"dimensions", "+", "1"}]}], ",", 
           RowBox[{"k", "++"}], ",", 
           RowBox[{"Unset", "[", 
            SubscriptBox["y", "k"], "]"}]}], "]"}], ";", 
         RowBox[{"(*", " ", 
          RowBox[{
          "Unset", " ", "is", " ", "like", " ", "clear", " ", "but", " ", 
           "for", " ", "stuff", " ", "with", " ", "subscripts", 
           "\[IndentingNewLine]", " ", 
           RowBox[{"Note", ":", " ", 
            RowBox[{"I", " ", 
             RowBox[{"didn", "'"}], "t", " ", "have", " ", 
             SubscriptBox["y", "k"], " ", "in", " ", "the", " ", "module", 
             " ", "variables", " ", "because", " ", "in", " ", "mathematica", 
             "  ", "things", " ", "with", " ", "subscripts", " ", 
             RowBox[{"aren", "'"}], "t", " ", "variables"}]}]}], "  ", "*)"}],
          "\[IndentingNewLine]", 
         RowBox[{"Return", "[", "matrix", "]"}]}]}], "]"}]}]}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.815020933246456*^9, 3.8150210277132215`*^9}, {
   3.8150227204191628`*^9, 3.8150227214355464`*^9}, {3.8150228247283635`*^9, 
   3.8150228448596277`*^9}, 3.81502361253262*^9, {3.815088878732122*^9, 
   3.8150888824448805`*^9}, {3.81508907278067*^9, 3.815089141046956*^9}, {
   3.815089185618621*^9, 3.81508927557698*^9}, {3.815089463282243*^9, 
   3.815089471654084*^9}, {3.8150895145699043`*^9, 3.8150895411569443`*^9}, {
   3.815089625980875*^9, 3.815089664285901*^9}, {3.815089740206032*^9, 
   3.8150897923821807`*^9}, {3.8150899271170487`*^9, 
   3.8150900036923933`*^9}, {3.8150900696984854`*^9, 3.815090152396711*^9}, {
   3.8151725381320105`*^9, 3.8151725597497625`*^9}, 3.8151738159873257`*^9, {
   3.8151760335231996`*^9, 3.8151760788929605`*^9}, {3.815176256085683*^9, 
   3.815176278853115*^9}, {3.8151764495978794`*^9, 3.8151764788046627`*^9}, 
   3.8151765563431673`*^9, {3.8151766053982368`*^9, 3.8151766334901376`*^9}, {
   3.815176882606892*^9, 3.8151768885748987`*^9}, {3.8151769810041466`*^9, 
   3.8151769968966713`*^9}, {3.8151773777012925`*^9, 
   3.8151774796147566`*^9}, {3.815178442751358*^9, 3.8151785220006104`*^9}, {
   3.815178573627437*^9, 3.8151786492529187`*^9}, {3.8151787151773443`*^9, 
   3.8151787383382826`*^9}, {3.815179528116309*^9, 3.8151795933447104`*^9}, 
   3.815659854158204*^9, {3.8156620646266356`*^9, 3.815662098219054*^9}, {
   3.8156622593384542`*^9, 3.815662262197175*^9}, 3.8156623117627068`*^9, {
   3.815663060919053*^9, 3.815663069445905*^9}, {3.815663143781666*^9, 
   3.8156632742345853`*^9}, 3.8156646888641295`*^9, {3.8156647705244436`*^9, 
   3.8156647823390493`*^9}, {3.8156653078563523`*^9, 
   3.8156653625668826`*^9}, {3.8156663281808653`*^9, 3.815666329112629*^9}, {
   3.815666372210501*^9, 3.8156664988416443`*^9}, {3.8156666340233593`*^9, 
   3.8156666497711773`*^9}, {3.815666756787548*^9, 3.815666774470996*^9}, {
   3.8156668096547832`*^9, 3.8156668097671328`*^9}, {3.815666850047024*^9, 
   3.8156668706785784`*^9}, {3.8156669164640727`*^9, 
   3.8156669169092584`*^9}, {3.8156669656469927`*^9, 
   3.8156670300241003`*^9}, {3.815667068977719*^9, 3.8156670709816246`*^9}, {
   3.815667101627516*^9, 3.8156671411628323`*^9}, {3.815667192596089*^9, 
   3.8156672504781046`*^9}, {3.8156715305881786`*^9, 
   3.8156715328572493`*^9}, {3.815671664010825*^9, 3.815671664801675*^9}, {
   3.81567169783512*^9, 3.8156717060800657`*^9}, {3.8156718684186087`*^9, 
   3.815671868874464*^9}, {3.8156740516761513`*^9, 3.815674064242343*^9}, {
   3.8156741091296377`*^9, 3.8156741238318195`*^9}, {3.8156742031542916`*^9, 
   3.815674225637494*^9}, {3.8156754948221426`*^9, 3.8156755745536065`*^9}, 
   3.8156756439092183`*^9, {3.8156757118347387`*^9, 3.81567571230245*^9}, {
   3.815675788742484*^9, 3.8156757896386957`*^9}, {3.8156758389735518`*^9, 
   3.815675874616353*^9}, {3.8156785749345036`*^9, 3.815678576919387*^9}, {
   3.8156813303600445`*^9, 3.815681363583753*^9}, 3.8156978895368185`*^9, {
   3.8161924257268972`*^9, 3.816192518942959*^9}, {3.8161925671755695`*^9, 
   3.816192631235896*^9}, {3.8161927814292407`*^9, 3.8161927886011243`*^9}, 
   3.8161928282820034`*^9, {3.8161929246702766`*^9, 3.8161929687705*^9}, {
   3.8162201004116297`*^9, 3.8162201320570173`*^9}, {3.8162201744781165`*^9, 
   3.816220283372323*^9}, {3.8162203167301407`*^9, 3.8162207191995716`*^9}, {
   3.8162207586994753`*^9, 3.8162207670038595`*^9}, {3.816220811844944*^9, 
   3.8162209028503537`*^9}, {3.816220954406839*^9, 3.816220958905048*^9}, {
   3.816220992686821*^9, 3.81622107401109*^9}, {3.816221105318877*^9, 
   3.816221232760231*^9}, {3.8162212874039187`*^9, 3.816221461962064*^9}, {
   3.8162215575225153`*^9, 3.816221714044012*^9}, {3.8162217538980975`*^9, 
   3.8162217784589205`*^9}, {3.816221817992402*^9, 3.8162218225621085`*^9}, {
   3.8162231607549934`*^9, 3.816223161520931*^9}, {3.816223240788886*^9, 
   3.816223254897151*^9}, {3.8162232875299044`*^9, 3.8162233045813*^9}, {
   3.816224133571518*^9, 3.816224218182491*^9}, {3.8162338373942385`*^9, 
   3.8162338433857927`*^9}, {3.8162339477002897`*^9, 3.8162339804243116`*^9}, 
   3.816234035363926*^9, {3.8163032295145273`*^9, 3.816303238223233*^9}, {
   3.816303288717506*^9, 
   3.8163033443017693`*^9}},ExpressionUUID->"cd7ebf9e-09e1-441f-93b6-\
fa82c71c8653"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "3"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8163032389772177`*^9, 3.8163033346586285`*^9},
 CellLabel->
  "Out[825]=",ExpressionUUID->"1eb75b2c-a57b-43f1-943a-ed188ea2326b"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"interpolate3d", "[", 
     RowBox[{"m_", ",", "z_"}], "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "matrix", ",", "detMatrix", ",", "matrixdim", ",", "f", ",", "npoints",
         ",", "pointdim"}], "}"}], ",", " ", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"matrix", "=", 
        RowBox[{"coeffmatrix", "[", 
         RowBox[{"m", ",", "z"}], "]"}]}], ";", 
       RowBox[{"(*", " ", 
        RowBox[{
        "gets", " ", "the", " ", "generalized", " ", "matrix", " ", "used", 
         " ", "in", " ", "the", " ", "algorithm"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"matrixdim", "=", 
        RowBox[{"Length", "[", "matrix", "]"}]}], ";", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"Gets", " ", "m"}], "=", 
         RowBox[{"n", " ", "dim", " ", "of", " ", "the", " ", "matrix", " ", 
          RowBox[{"(", 
           RowBox[{"m", "=", "n"}], ")"}], " ", "because", " ", "that", " ", 
          "needs", " ", "to", " ", "be", " ", "true", " ", "for", " ", "the", 
          " ", "algorithm", " ", "to", " ", "work"}]}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"npoints", "=", " ", 
        RowBox[{"Length", "[", "m", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"pointdim", "=", 
        RowBox[{"Length", "[", 
         RowBox[{"m", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";", " ", 
       RowBox[{"(*", 
        RowBox[{
        "dimesnions", " ", "of", " ", "a", " ", "data", " ", "point"}], " ", 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"detMatrix", "=", 
        RowBox[{"Det", "[", "matrix", "]"}]}], ";", " ", 
       RowBox[{"(*", " ", 
        RowBox[{"Gets", " ", "determinant", " ", "of", " ", "coeffmatrix"}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"f", "=", "0"}], ";", " ", 
       RowBox[{"(*", 
        RowBox[{
        "this", " ", "variable", " ", "is", " ", "our", " ", "interpolating", 
         " ", "function"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"i", "=", "1"}], ",", 
         RowBox[{"i", "<", 
          RowBox[{"matrixdim", "+", "1"}]}], ",", 
         RowBox[{"i", "++"}], ",", 
         RowBox[{
          RowBox[{
           RowBox[{"deltamatrix", "[", "i", "]"}], "=", 
           RowBox[{"ReplacePart", "[", 
            RowBox[{"matrix", ",", 
             RowBox[{
              RowBox[{"{", "i", "}"}], "\[Rule]", "z"}]}], "]"}]}], ";", 
          RowBox[{
           RowBox[{"detDelta", "[", "i", "]"}], "=", 
           RowBox[{"Det", "[", 
            RowBox[{"deltamatrix", "[", "i", "]"}], "]"}]}]}]}], "]"}], ";", 
       " ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"deltamatrix", "[", "i", "]"}], " ", "replaces", " ", "one", 
         " ", "paticular", " ", "row", " ", "in", " ", "coeffmatrix", " ", 
         "and", " ", "makes", " ", "it", " ", "so", " ", "that", " ", "the", 
         " ", "new", " ", "row", " ", "is", " ", "the", " ", "list", " ", 
         "from", " ", "z", " ", "and", " ", "then", " ", "detDelta", " ", 
         "calculates", " ", "the", " ", "determinant", " ", "of", " ", "this",
          " ", "new", " ", 
         RowBox[{"matrix", ".", "\[IndentingNewLine]", "  ", "We"}], " ", 
         "need", " ", "to", " ", "do", " ", "this", " ", "for", " ", "each", 
         " ", "row", " ", "in", " ", "the", " ", "matrix", " ", "so", " ", 
         "we", " ", "loop", " ", "through", " ", "it", " ", "all"}], " ", 
        "*)"}], "\[IndentingNewLine]", " ", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"i", "=", "1"}], ",", 
         RowBox[{"i", "<", 
          RowBox[{"npoints", "+", "1"}]}], ",", 
         RowBox[{"i", "++"}], ",", 
         RowBox[{
          RowBox[{
           RowBox[{"lastval", "[", "i", "]"}], "=", 
           RowBox[{
            RowBox[{"m", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "[", 
            RowBox[{"[", "pointdim", "]"}], "]"}]}], ";", 
          RowBox[{"f", "+=", 
           RowBox[{"Expand", "[", 
            RowBox[{
             RowBox[{"lastval", "[", "i", "]"}], "*", 
             RowBox[{
              RowBox[{"detDelta", "[", "i", "]"}], "/", "detMatrix"}]}], 
            "]"}]}]}]}], "]"}], ";", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
         "lastval", " ", "is", " ", "just", " ", "the", " ", "last", " ", 
          "number", " ", "in", " ", "a", " ", "point", " ", "from", " ", 
          "m"}], ",", " ", 
         RowBox[{
          RowBox[{"so", " ", "for", 
           RowBox[{"(", 
            RowBox[{"1", ",", "2", ",", "3"}], ")"}], " ", "lastval"}], "=", 
          RowBox[{
          "3.", " ", "Then", " ", "the", " ", "interpolating", " ", "formula",
            " ", "is", " ", "used", " ", "for", " ", "each", " ", "replaced", 
           " ", "row", " ", "and", " ", 
           RowBox[{"that", "'"}], "s", " ", "why", " ", "we", " ", "have", 
           " ", "a", " ", "for", " ", 
           RowBox[{"loop", ".", "\[IndentingNewLine]", "The"}], " ", 
           "interpolation", " ", "formula", " ", "for", " ", "each", " ", 
           "loop", " ", "is", " ", 
           FractionBox[
            RowBox[{"lastvalue", "*", "Det", 
             RowBox[{"(", 
              SubscriptBox["\[CapitalDelta]", "i"], ")"}]}], 
            RowBox[{"Det", 
             RowBox[{"(", "coeffmatrix", ")"}]}]]}]}]}], "  ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "f", "]"}]}]}], "]"}]}], " ", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"randpoint", "[", "points_", "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "m", "}"}], ",", 
      RowBox[{
       RowBox[{"m", "=", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"i", "=", "0"}], ",", 
         RowBox[{"i", "<", "points"}], ",", 
         RowBox[{"i", "++"}], ",", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"m", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"RandomInteger", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"-", "10"}], ",", "10"}], "}"}], "]"}], ",", 
             RowBox[{"RandomInteger", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"-", "10"}], ",", "10"}], "}"}], "]"}], ",", 
             RowBox[{"RandomInteger", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"-", "10"}], ",", "10"}], "}"}], "]"}]}], "}"}]}], 
          "]"}]}], "]"}], ";", " ", 
       RowBox[{"(*", " ", 
        RowBox[{
        "generates", " ", "a", " ", "user", " ", "defined", " ", "number", 
         " ", "of", " ", "random", " ", "3", "d", " ", "point"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"Return", " ", "[", "m", "]"}]}]}], "]"}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"genfunclist", "[", "terms_", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "funcarray", "}"}], ",", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "terms", " ", "is", " ", "the", " ", "length", " ", "of", " ", "the", 
        " ", "function", " ", "list"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"funcarray", "=", 
        RowBox[{"{", "1", "}"}]}], ";", " ", 
       RowBox[{"(*", " ", 
        RowBox[{
        "the", " ", "one", " ", "is", " ", "just", " ", "a", " ", "constant", 
         " ", 
         RowBox[{"term", ".", " ", "You"}], " ", "could", " ", "view", " ", 
         "it", " ", "as", " ", 
         SubscriptBox["\[Alpha]", "1"]}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Mod", "[", 
           RowBox[{"terms", ",", "2"}], "]"}], "\[Equal]", "0"}], ",", " ", 
         RowBox[{"(*", " ", 
          RowBox[{
          "determines", " ", "whether", " ", "we", " ", "have", " ", "an", 
           " ", "even", " ", "or", " ", "odd", " ", "amount", " ", "of", " ", 
           "terms"}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"For", "[", 
           RowBox[{
            RowBox[{"i", "=", "1"}], ",", 
            RowBox[{"i", "<", "3"}], ",", 
            RowBox[{"i", "++"}], ",", 
            RowBox[{"For", "[", 
             RowBox[{
              RowBox[{"k", "=", "1"}], ",", 
              RowBox[{"k", "<", 
               RowBox[{
                RowBox[{"(", "terms", ")"}], "/", "2"}]}], ",", 
              RowBox[{"k", "++"}], ",", 
              RowBox[{"AppendTo", "[", 
               RowBox[{"funcarray", ",", 
                RowBox[{
                 SubscriptBox["y", "i"], "^", "k"}]}], "]"}]}], "]"}]}], 
           "]"}], ";", " ", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{
            "first", " ", "for", " ", "loop", " ", "gets", " ", "if", " ", 
             RowBox[{"it", "'"}], "s", " ", 
             SubscriptBox["y", "1"], " ", "or", " ", 
             SubscriptBox["y", "2"], " ", "and", " ", "second", " ", "gets", 
             " ", "the", " ", "power", " ", "of", " ", 
             RowBox[{"it", ".", " ", "\[IndentingNewLine]", "For"}], " ", 
             "an", " ", "even", " ", "number", " ", "of", " ", "terms"}], ",",
             " ", 
            RowBox[{
             RowBox[{"we", "'"}], "ll", " ", "have", " ", "an", " ", "even", 
             " ", "amount", " ", "of", " ", 
             SubscriptBox["y", "1"], " ", "and", " ", 
             SubscriptBox["y", "2"], " ", "from", " ", "this", " ", "loop", 
             " ", "which", " ", "means", "  ", 
             RowBox[{"we", "'"}], "ll", " ", "have", " ", "an", " ", "odd", 
             " ", "number", " ", "of", " ", "terms", " ", "when", " ", 
             "adding", " ", "constant", " ", "term"}]}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"funcarray", ",", 
            RowBox[{
             SubscriptBox["y", "1"], "^", 
             RowBox[{"(", 
              RowBox[{"terms", "/", "2"}], ")"}]}]}], "]"}], ";", 
          RowBox[{"(*", " ", 
           RowBox[{
           "fixes", " ", "problem", " ", "from", " ", "the", " ", "above", 
            " ", "comment", " ", "by", " ", "adding", " ", "a", " ", "unique",
             " ", 
            SubscriptBox["y", "1"], " ", "to", " ", "this", " ", 
            RowBox[{"list", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "funcarray", "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"For", "[", 
           RowBox[{
            RowBox[{"i", "=", "1"}], ",", 
            RowBox[{"i", "<", "3"}], ",", 
            RowBox[{"i", "++"}], ",", 
            RowBox[{"For", "[", 
             RowBox[{
              RowBox[{"k", "=", "1"}], ",", 
              RowBox[{"k", "<", 
               RowBox[{"1", "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"terms", "-", "1"}], ")"}], "/", "2"}]}]}], ",", 
              RowBox[{"k", "++"}], ",", 
              RowBox[{"AppendTo", "[", 
               RowBox[{"funcarray", ",", 
                RowBox[{
                 SubscriptBox["y", "i"], "^", "k"}]}], "]"}]}], "]"}]}], 
           "]"}], ";", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Does", " ", "same", " ", "thing", " ", "as", " ", "previous", " ",
             "for", " ", "loop", " ", "just", " ", "makes", " ", "it", " ", 
            "work", " ", "with", " ", "an", " ", "odd", " ", "number", " ", 
            "of", " ", "terms"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "funcarray", "]"}]}]}], "]"}]}]}], "]"}]}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.815680935749714*^9, 3.815680936053482*^9}, {
   3.815681056445535*^9, 3.8156811019617696`*^9}, {3.815681310375373*^9, 
   3.815681313828727*^9}, {3.81568646449214*^9, 3.815686468790983*^9}, 
   3.8156867771429057`*^9, {3.8156868919373884`*^9, 3.815686902004468*^9}, {
   3.8156869323111415`*^9, 3.815686945370363*^9}, {3.815687244080974*^9, 
   3.815687295603174*^9}, {3.8156873912375584`*^9, 3.815687393412078*^9}, 
   3.815687444241192*^9, {3.81568766452754*^9, 3.8156876896866684`*^9}, {
   3.8156877444011474`*^9, 3.8156877562171793`*^9}, {3.815688256087633*^9, 
   3.8156882756944156`*^9}, {3.8156885094457903`*^9, 3.815688592349992*^9}, {
   3.8156887870574846`*^9, 3.8156887953884788`*^9}, {3.815688873917062*^9, 
   3.8156889961848235`*^9}, {3.815689675390391*^9, 3.8156896815400763`*^9}, {
   3.8156897997900143`*^9, 3.8156898227695837`*^9}, {3.81568994041948*^9, 
   3.8156900504703875`*^9}, {3.815690223191378*^9, 3.815690339686817*^9}, {
   3.8156903772484694`*^9, 3.8156903822117624`*^9}, {3.8156905448340516`*^9, 
   3.815690556827581*^9}, {3.815690590877825*^9, 3.8156906387907877`*^9}, {
   3.8156908019000983`*^9, 3.8156908394905605`*^9}, {3.8156909117600107`*^9, 
   3.815690929689593*^9}, {3.8156910624589424`*^9, 3.815691123587347*^9}, {
   3.815691411332198*^9, 3.815691423289218*^9}, {3.815691575078273*^9, 
   3.815691581336426*^9}, {3.8156939352219744`*^9, 3.8156940090746193`*^9}, {
   3.8156940415281916`*^9, 3.81569407258664*^9}, {3.815694319356262*^9, 
   3.8156943292656336`*^9}, {3.8156945739041553`*^9, 3.815694676641687*^9}, {
   3.8156947432326207`*^9, 3.8156947639239955`*^9}, {3.815695277715988*^9, 
   3.8156952913725643`*^9}, {3.8156960935832477`*^9, 
   3.8156961200339947`*^9}, {3.8156962568043404`*^9, 
   3.8156962770428753`*^9}, {3.8156963080445013`*^9, 3.8156963400755816`*^9}, 
   3.8156963768531303`*^9, {3.8156964069683633`*^9, 3.81569641952287*^9}, {
   3.8156969362936597`*^9, 3.8156969423044395`*^9}, {3.8156969784650345`*^9, 
   3.815697004513881*^9}, {3.8156973837645226`*^9, 3.815697389113402*^9}, {
   3.8156976529880967`*^9, 3.8156976563424616`*^9}, {3.8156979546829634`*^9, 
   3.815697969664707*^9}, {3.815700185430967*^9, 3.8157002032204227`*^9}, {
   3.815700266054491*^9, 3.8157002679324665`*^9}, {3.8157003003250694`*^9, 
   3.8157003155025167`*^9}, {3.8157003536883397`*^9, 3.815700482712968*^9}, {
   3.815700536521214*^9, 3.81570053956047*^9}, {3.8157005844722266`*^9, 
   3.8157006869655404`*^9}, {3.815700729049987*^9, 3.8157007615098553`*^9}, {
   3.8157008420999365`*^9, 3.815700842842906*^9}, {3.8157009155534368`*^9, 
   3.8157010184278326`*^9}, {3.81570119596912*^9, 3.815701209109909*^9}, {
   3.8157012489926353`*^9, 3.8157012736000996`*^9}, {3.8157013131402864`*^9, 
   3.8157013905219393`*^9}, {3.815701452771888*^9, 3.8157014541571417`*^9}, {
   3.8157015341468725`*^9, 3.81570156038441*^9}, {3.815701602298629*^9, 
   3.8157016375143814`*^9}, {3.8157016717970524`*^9, 
   3.8157017178987217`*^9}, {3.815701756712283*^9, 3.815701770295938*^9}, {
   3.815701831547452*^9, 3.815701898407293*^9}, {3.815701947829564*^9, 
   3.8157020037866693`*^9}, {3.8157020344654903`*^9, 3.815702143166172*^9}, {
   3.8157021848648868`*^9, 3.8157022666344337`*^9}, {3.8157023058877892`*^9, 
   3.8157024050456457`*^9}, {3.815761298028909*^9, 3.815761313904411*^9}, 
   3.8161901801874533`*^9, 3.8161907830827513`*^9, {3.816221845139879*^9, 
   3.8162220764744463`*^9}, {3.8162232177485027`*^9, 3.816223228107847*^9}, {
   3.816230816722625*^9, 3.8162308190831923`*^9}, {3.81623103732195*^9, 
   3.8162310405908413`*^9}, {3.81623125544835*^9, 3.816231410713468*^9}, {
   3.8162314571827707`*^9, 3.8162314902460585`*^9}, {3.81623152800966*^9, 
   3.8162316475897493`*^9}, {3.816231693891917*^9, 3.816232023276046*^9}, {
   3.816232117763565*^9, 3.816232383006708*^9}, {3.8162324596624613`*^9, 
   3.816232509937537*^9}, {3.816232540406785*^9, 3.816232700353773*^9}, {
   3.8162328320133147`*^9, 3.81623291839045*^9}, {3.816232958505414*^9, 
   3.8162330848203497`*^9}, {3.8162331256707387`*^9, 
   3.8162333138043213`*^9}, {3.816233346625307*^9, 3.8162333995082984`*^9}, {
   3.8162334513079453`*^9, 3.8162337716506147`*^9}, {3.816288282054392*^9, 
   3.816288326917658*^9}, {3.816292116442561*^9, 3.816292168253627*^9}, {
   3.8162922779059076`*^9, 3.8162923555872297`*^9}},
 CellLabel->
  "In[724]:=",ExpressionUUID->"a1950135-6d50-492e-92a2-7e0fb6bccb48"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"tests", "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"VerificationTest", "[", 
       RowBox[{
        RowBox[{"coeffmatrix", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"0", ",", "1", ",", "2"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"3", ",", "4", ",", "2"}], "}"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            SubscriptBox["y", "1"], ",", 
            SubscriptBox["y", "2"], ",", "1"}], "}"}]}], "]"}], ",", 
        "\"\<Number of points must equal the number of coefficeints in your \
equation\>\""}], "]"}], ",", 
      RowBox[{"VerificationTest", "[", 
       RowBox[{
        RowBox[{"coeffmatrix", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"2", ",", 
              RowBox[{"-", "3"}], ",", 
              RowBox[{"-", "6"}]}], "}"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            SubscriptBox["y", "1"], ",", 
            SubscriptBox["y", "2"]}], "}"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"2", ",", 
            RowBox[{"-", "3"}]}], "}"}]}], "}"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"VerificationTest", "[", 
        RowBox[{
         RowBox[{"coeffmatrix", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"0", ",", "1", ",", "2"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "1", ",", "3"}], "}"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             SubscriptBox["y", "1"], ",", 
             SubscriptBox["y", "2"], ",", "1"}], "}"}]}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "1", ",", "1"}], "}"}]}], "}"}]}], "]"}], 
       "\[IndentingNewLine]", 
       RowBox[{"VerificationTest", "[", 
        RowBox[{
         RowBox[{"interpolate3d", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"2", ",", 
               RowBox[{"-", "3"}], ",", 
               RowBox[{"-", "6"}]}], "}"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             SubscriptBox["y", "1"], ",", 
             SubscriptBox["y", "2"]}], "}"}]}], "]"}], ",", 
         RowBox[{
          RowBox[{"-", 
           FractionBox[
            RowBox[{"3", " ", 
             SubscriptBox["y", "1"]}], "7"]}], "+", 
          FractionBox[
           RowBox[{"12", " ", 
            SubscriptBox["y", "2"]}], "7"]}]}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"VerificationTest", "[", 
       RowBox[{
        RowBox[{"interpolate3d", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"0", ",", "1", ",", "2"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "1", ",", "3"}], "}"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            SubscriptBox["y", "1"], ",", 
            SubscriptBox["y", "2"], ",", "1"}], "}"}]}], "]"}], ",", 
        RowBox[{"1", "+", 
         SubscriptBox["y", "1"], "+", 
         SubscriptBox["y", "2"]}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"VerificationTest", "[", 
       RowBox[{
        RowBox[{"genfunclist", "[", "5", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", 
          SubscriptBox["y", "1"], ",", 
          SubsuperscriptBox["y", "1", "2"], ",", 
          SubscriptBox["y", "2"], ",", 
          SubsuperscriptBox["y", "2", "2"]}], "}"}]}], "]"}]}], "}"}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.816288369181319*^9, 3.816288390839678*^9}, {
   3.81628855287008*^9, 3.816288613298918*^9}, {3.8162923435777817`*^9, 
   3.816292373159446*^9}, {3.8162924832953353`*^9, 3.8162925045221615`*^9}, {
   3.8162927231688795`*^9, 3.816292766369747*^9}, {3.8162928129470606`*^9, 
   3.8162928267505627`*^9}, {3.8162929062979784`*^9, 3.8162929748203*^9}, {
   3.8162931161481905`*^9, 3.81629316717309*^9}, {3.816293225367961*^9, 
   3.8162932413009033`*^9}, {3.816293342028219*^9, 3.8162934004359846`*^9}, {
   3.8162934622968025`*^9, 3.816293496161259*^9}, {3.8162972980181117`*^9, 
   3.81629730009352*^9}, {3.816297365030734*^9, 3.8162974195595655`*^9}, 
   3.8162974595415916`*^9, {3.816297716101037*^9, 3.816297785148464*^9}, {
   3.8162978183531685`*^9, 3.8162978198351955`*^9}, {3.816297962403145*^9, 
   3.8162979669639463`*^9}, 3.8163033615845423`*^9},
 CellLabel->
  "In[830]:=",ExpressionUUID->"173123d9-2f98-416a-b930-453c8fcdac50"],

Cell[BoxData["\<\"Number of points must equal the number of coefficeints in \
your equation\"\>"], "Print",
 CellChangeTimes->{3.8163033951547527`*^9},
 CellLabel->
  "During evaluation of \
In[830]:=",ExpressionUUID->"b27ff624-b434-4ee6-bfa7-7b9c5194cb3d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    RowBox[{
     TagBox["TestResultObject",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{
                InsetBox[
                 BoxData[
                  FormBox[
                   PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                   TraditionalForm]]]}, PlotRange -> {{0, 1}, {0, 1}}, 
               Background -> GrayLevel[0.93], Axes -> False, AspectRatio -> 1,
                ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}], Frame -> True, 
               FrameTicks -> None, FrameStyle -> Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.55]]], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"Success\"", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["None", "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{
                InsetBox[
                 BoxData[
                  FormBox[
                   PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                   TraditionalForm]]]}, PlotRange -> {{0, 1}, {0, 1}}, 
               Background -> GrayLevel[0.93], Axes -> False, AspectRatio -> 1,
                ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}], Frame -> True, 
               FrameTicks -> None, FrameStyle -> Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.55]]], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"Success\"", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["None", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Input: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    PaneBox[
                    TagBox[
                    RowBox[{"coeffmatrix", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1", ",", "2"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "4", ",", "2"}], "}"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    SubscriptBox["y", "1"], ",", 
                    SubscriptBox["y", "2"], ",", "1"}], "}"}]}], "]"}], 
                    Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Expected output: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    PaneBox[
                    TagBox[
                    
                    RowBox[{
                    "\"Number of points must equal \"", "\[Ellipsis]", 
                    "\"oefficeints in your equation\""}], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Actual output: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    PaneBox[
                    TagBox[
                    RowBox[{
                    "\"Number of points must equal \"", "\[Ellipsis]", 
                    "\"oefficeints in your equation\""}], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Time taken: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    PaneBox[
                    TagBox[
                    RowBox[{"QuantityUnits`Private`ToQuantity", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "37", "\[RightSkeleton]"}], 
                    "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "21", "\[RightSkeleton]"}], 
                    ",", "\"Seconds\""}], "]"}], "]"}], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    TestResultObject[
     Association[
     "TestClass" -> None, "TestIndex" -> 92, "TestID" -> None, "Outcome" -> 
      "Success", "Input" -> HoldForm[
        $CellContext`coeffmatrix[{{0, 1, 2}, {3, 4, 2}}, {
          Subscript[$CellContext`y, 1], 
          Subscript[$CellContext`y, 2], 1}]], "ExpectedOutput" -> 
      HoldForm["Number of points must equal the number of coefficeints in \
your equation"], "ActualOutput" -> 
      HoldForm["Number of points must equal the number of coefficeints in \
your equation"], "ExpectedMessages" -> {}, "ActualMessages" -> {}, 
      "AbsoluteTimeUsed" -> Quantity[0``7.1505149978319915, "Seconds"], 
      "CPUTimeUsed" -> Quantity[0., "Seconds"], "MemoryUsed" -> 
      Quantity[144, "Bytes"]]],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["TestResultObject",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{
                InsetBox[
                 BoxData[
                  FormBox[
                   PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                   TraditionalForm]]]}, PlotRange -> {{0, 1}, {0, 1}}, 
               Background -> GrayLevel[0.93], Axes -> False, AspectRatio -> 1,
                ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}], Frame -> True, 
               FrameTicks -> None, FrameStyle -> Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.55]]], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"Success\"", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["None", "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{
                InsetBox[
                 BoxData[
                  FormBox[
                   PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                   TraditionalForm]]]}, PlotRange -> {{0, 1}, {0, 1}}, 
               Background -> GrayLevel[0.93], Axes -> False, AspectRatio -> 1,
                ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}], Frame -> True, 
               FrameTicks -> None, FrameStyle -> Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.55]]], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"Success\"", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["None", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Input: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    PaneBox[
                    TagBox[
                    RowBox[{"coeffmatrix", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", 
                    RowBox[{"-", "3"}], ",", 
                    RowBox[{"-", "6"}]}], "}"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    SubscriptBox["y", "1"], ",", 
                    SubscriptBox["y", "2"]}], "}"}]}], "]"}], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Expected output: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    PaneBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", 
                    RowBox[{"-", "3"}]}], "}"}]}], "}"}], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Actual output: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    PaneBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", 
                    RowBox[{"-", "3"}]}], "}"}]}], "}"}], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Time taken: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    PaneBox[
                    TagBox[
                    RowBox[{"QuantityUnits`Private`ToQuantity", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "37", "\[RightSkeleton]"}], 
                    "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "21", "\[RightSkeleton]"}], 
                    ",", "\"Seconds\""}], "]"}], "]"}], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    TestResultObject[
     Association[
     "TestClass" -> None, "TestIndex" -> 93, "TestID" -> None, "Outcome" -> 
      "Success", "Input" -> HoldForm[
        $CellContext`coeffmatrix[{{1, 2, 3}, {2, -3, -6}}, {
          Subscript[$CellContext`y, 1], 
          Subscript[$CellContext`y, 2]}]], "ExpectedOutput" -> 
      HoldForm[{{1, 2}, {2, -3}}], "ActualOutput" -> 
      HoldForm[{{1, 2}, {2, -3}}], "ExpectedMessages" -> {}, 
      "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
      Quantity[0``7.1505149978319915, "Seconds"], "CPUTimeUsed" -> 
      Quantity[0., "Seconds"], "MemoryUsed" -> Quantity[312, "Bytes"]]],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   RowBox[{
    InterpretationBox[
     RowBox[{
      TagBox["TestResultObject",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquarePlusIconMedium"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 3.5 CurrentValue["FontCapHeight"]/
                   AbsoluteCurrentValue[Magnification]}]], 
               GraphicsBox[{
                 InsetBox[
                  BoxData[
                   FormBox[
                    PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    TraditionalForm]]]}, PlotRange -> {{0, 1}, {0, 1}}, 
                Background -> GrayLevel[0.93], Axes -> False, AspectRatio -> 
                1, ImageSize -> 
                Dynamic[{
                  Automatic, 3.5 CurrentValue["FontCapHeight"]/
                   AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                FrameTicks -> None, FrameStyle -> Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Success\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["None", "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquareMinusIconMedium"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 3.5 CurrentValue["FontCapHeight"]/
                   AbsoluteCurrentValue[Magnification]}]], 
               GraphicsBox[{
                 InsetBox[
                  BoxData[
                   FormBox[
                    PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    TraditionalForm]]]}, PlotRange -> {{0, 1}, {0, 1}}, 
                Background -> GrayLevel[0.93], Axes -> False, AspectRatio -> 
                1, ImageSize -> 
                Dynamic[{
                  Automatic, 3.5 CurrentValue["FontCapHeight"]/
                   AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                FrameTicks -> None, FrameStyle -> Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Success\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["None", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Input: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    RowBox[{"coeffmatrix", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1", ",", "2"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1", ",", "3"}], "}"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    SubscriptBox["y", "1"], ",", 
                    SubscriptBox["y", "2"], ",", "1"}], "}"}]}], "]"}], 
                    Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Expected output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1", ",", "1"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1", ",", "1"}], "}"}]}], "}"}], 
                    Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Actual output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1", ",", "1"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1", ",", "1"}], "}"}]}], "}"}], 
                    Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Time taken: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    RowBox[{"QuantityUnits`Private`ToQuantity", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "37", "\[RightSkeleton]"}], 
                    "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}], 
                    ",", "\"Seconds\""}], "]"}], "]"}], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     TestResultObject[
      Association[
      "TestClass" -> None, "TestIndex" -> 94, "TestID" -> None, "Outcome" -> 
       "Success", "Input" -> HoldForm[
         $CellContext`coeffmatrix[{{0, 0, 1}, {0, 1, 2}, {1, 1, 3}}, {
           Subscript[$CellContext`y, 1], 
           Subscript[$CellContext`y, 2], 1}]], "ExpectedOutput" -> 
       HoldForm[{{0, 0, 1}, {0, 1, 1}, {1, 1, 1}}], "ActualOutput" -> 
       HoldForm[{{0, 0, 1}, {0, 1, 1}, {1, 1, 1}}], "ExpectedMessages" -> {}, 
       "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
       Quantity[0``7.150514997831988, "Seconds"], "CPUTimeUsed" -> 
       Quantity[0., "Seconds"], "MemoryUsed" -> Quantity[400, "Bytes"]]],
     Editable->False,
     SelectWithContents->True,
     Selectable->False], " ", 
    InterpretationBox[
     RowBox[{
      TagBox["TestResultObject",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquarePlusIconMedium"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 3.5 CurrentValue["FontCapHeight"]/
                   AbsoluteCurrentValue[Magnification]}]], 
               GraphicsBox[{
                 InsetBox[
                  BoxData[
                   FormBox[
                    PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    TraditionalForm]]]}, PlotRange -> {{0, 1}, {0, 1}}, 
                Background -> GrayLevel[0.93], Axes -> False, AspectRatio -> 
                1, ImageSize -> 
                Dynamic[{
                  Automatic, 3.5 CurrentValue["FontCapHeight"]/
                   AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                FrameTicks -> None, FrameStyle -> Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Success\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["None", "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquareMinusIconMedium"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 3.5 CurrentValue["FontCapHeight"]/
                   AbsoluteCurrentValue[Magnification]}]], 
               GraphicsBox[{
                 InsetBox[
                  BoxData[
                   FormBox[
                    PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    TraditionalForm]]]}, PlotRange -> {{0, 1}, {0, 1}}, 
                Background -> GrayLevel[0.93], Axes -> False, AspectRatio -> 
                1, ImageSize -> 
                Dynamic[{
                  Automatic, 3.5 CurrentValue["FontCapHeight"]/
                   AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                FrameTicks -> None, FrameStyle -> Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Success\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["None", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Input: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    RowBox[{"interpolate3d", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", 
                    RowBox[{"-", "3"}], ",", 
                    RowBox[{"-", "6"}]}], "}"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    SubscriptBox["y", "1"], ",", 
                    SubscriptBox["y", "2"]}], "}"}]}], "]"}], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Expected output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"3", " ", 
                    SubscriptBox["y", "1"]}], "7"]}], "+", 
                    FractionBox[
                    RowBox[{"12", " ", 
                    SubscriptBox["y", "2"]}], "7"]}], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Actual output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"3", " ", 
                    SubscriptBox["y", "1"]}], "7"]}], "+", 
                    FractionBox[
                    RowBox[{"12", " ", 
                    SubscriptBox["y", "2"]}], "7"]}], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Time taken: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    RowBox[{"QuantityUnits`Private`ToQuantity", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "37", "\[RightSkeleton]"}], 
                    "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}], 
                    ",", "\"Seconds\""}], "]"}], "]"}], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     TestResultObject[
      Association[
      "TestClass" -> None, "TestIndex" -> 95, "TestID" -> None, "Outcome" -> 
       "Success", "Input" -> HoldForm[
         $CellContext`interpolate3d[{{1, 2, 3}, {2, -3, -6}}, {
           Subscript[$CellContext`y, 1], 
           Subscript[$CellContext`y, 2]}]], "ExpectedOutput" -> 
       HoldForm[
        Rational[-3, 7] Subscript[$CellContext`y, 1] + 
         Rational[12, 7] Subscript[$CellContext`y, 2]], "ActualOutput" -> 
       HoldForm[
        Rational[-3, 7] Subscript[$CellContext`y, 1] + 
         Rational[12, 7] Subscript[$CellContext`y, 2]], 
       "ExpectedMessages" -> {}, "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
       Quantity[0``7.150514997831988, "Seconds"], "CPUTimeUsed" -> 
       Quantity[0., "Seconds"], "MemoryUsed" -> Quantity[792, "Bytes"]]],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["TestResultObject",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{
                InsetBox[
                 BoxData[
                  FormBox[
                   PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                   TraditionalForm]]]}, PlotRange -> {{0, 1}, {0, 1}}, 
               Background -> GrayLevel[0.93], Axes -> False, AspectRatio -> 1,
                ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}], Frame -> True, 
               FrameTicks -> None, FrameStyle -> Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.55]]], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"Success\"", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["None", "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{
                InsetBox[
                 BoxData[
                  FormBox[
                   PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                   TraditionalForm]]]}, PlotRange -> {{0, 1}, {0, 1}}, 
               Background -> GrayLevel[0.93], Axes -> False, AspectRatio -> 1,
                ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}], Frame -> True, 
               FrameTicks -> None, FrameStyle -> Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.55]]], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"Success\"", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["None", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Input: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    PaneBox[
                    TagBox[
                    RowBox[{"interpolate3d", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1", ",", "2"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1", ",", "3"}], "}"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    SubscriptBox["y", "1"], ",", 
                    SubscriptBox["y", "2"], ",", "1"}], "}"}]}], "]"}], 
                    Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Expected output: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    PaneBox[
                    TagBox[
                    RowBox[{"1", "+", 
                    SubscriptBox["y", "1"], "+", 
                    SubscriptBox["y", "2"]}], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Actual output: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    PaneBox[
                    TagBox[
                    RowBox[{"1", "+", 
                    SubscriptBox["y", "1"], "+", 
                    SubscriptBox["y", "2"]}], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Time taken: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    PaneBox[
                    TagBox[
                    RowBox[{"QuantityUnits`Private`ToQuantity", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "37", "\[RightSkeleton]"}], 
                    "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}], 
                    ",", "\"Seconds\""}], "]"}], "]"}], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    TestResultObject[
     Association[
     "TestClass" -> None, "TestIndex" -> 96, "TestID" -> None, "Outcome" -> 
      "Success", "Input" -> HoldForm[
        $CellContext`interpolate3d[{{0, 0, 1}, {0, 1, 2}, {1, 1, 3}}, {
          Subscript[$CellContext`y, 1], 
          Subscript[$CellContext`y, 2], 1}]], "ExpectedOutput" -> 
      HoldForm[1 + Subscript[$CellContext`y, 1] + 
        Subscript[$CellContext`y, 2]], "ActualOutput" -> 
      HoldForm[1 + Subscript[$CellContext`y, 1] + 
        Subscript[$CellContext`y, 2]], "ExpectedMessages" -> {}, 
      "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
      Quantity[0``7.150514997831988, "Seconds"], "CPUTimeUsed" -> 
      Quantity[0., "Seconds"], "MemoryUsed" -> Quantity[328, "Bytes"]]],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["TestResultObject",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{
                InsetBox[
                 BoxData[
                  FormBox[
                   PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                   TraditionalForm]]]}, PlotRange -> {{0, 1}, {0, 1}}, 
               Background -> GrayLevel[0.93], Axes -> False, AspectRatio -> 1,
                ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}], Frame -> True, 
               FrameTicks -> None, FrameStyle -> Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.55]]], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"Success\"", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["None", "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{
                InsetBox[
                 BoxData[
                  FormBox[
                   PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                   TraditionalForm]]]}, PlotRange -> {{0, 1}, {0, 1}}, 
               Background -> GrayLevel[0.93], Axes -> False, AspectRatio -> 1,
                ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}], Frame -> True, 
               FrameTicks -> None, FrameStyle -> Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.55]]], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"Success\"", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["None", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Input: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    PaneBox[
                    TagBox[
                    RowBox[{"genfunclist", "[", "5", "]"}], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Expected output: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    PaneBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    SubscriptBox["y", "1"], ",", 
                    SubsuperscriptBox["y", "1", "2"], ",", 
                    SubscriptBox["y", "2"], ",", 
                    SubsuperscriptBox["y", "2", "2"]}], "}"}], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Actual output: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    PaneBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    SubscriptBox["y", "1"], ",", 
                    SubsuperscriptBox["y", "1", "2"], ",", 
                    SubscriptBox["y", "2"], ",", 
                    SubsuperscriptBox["y", "2", "2"]}], "}"}], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Time taken: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    PaneBox[
                    TagBox[
                    RowBox[{"QuantityUnits`Private`ToQuantity", "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "37", "\[RightSkeleton]"}], 
                    "[", 
                    RowBox[{
                    RowBox[{"\[LeftSkeleton]", "21", "\[RightSkeleton]"}], 
                    ",", "\"Seconds\""}], "]"}], "]"}], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    TestResultObject[
     Association[
     "TestClass" -> None, "TestIndex" -> 97, "TestID" -> None, "Outcome" -> 
      "Success", "Input" -> HoldForm[
        $CellContext`genfunclist[5]], "ExpectedOutput" -> HoldForm[{1, 
         Subscript[$CellContext`y, 1], Subscript[$CellContext`y, 1]^2, 
         Subscript[$CellContext`y, 2], Subscript[$CellContext`y, 2]^2}], 
      "ActualOutput" -> HoldForm[{1, 
         Subscript[$CellContext`y, 1], Subscript[$CellContext`y, 1]^2, 
         Subscript[$CellContext`y, 2], Subscript[$CellContext`y, 2]^2}], 
      "ExpectedMessages" -> {}, "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
      Quantity[0``7.1505149978319915, "Seconds"], "CPUTimeUsed" -> 
      Quantity[0., "Seconds"], "MemoryUsed" -> Quantity[872, "Bytes"]]],
    Editable->False,
    SelectWithContents->True,
    Selectable->False]}], "}"}]], "Output",
 CellChangeTimes->{3.816303395299413*^9},
 CellLabel->
  "Out[830]=",ExpressionUUID->"09d5d4b4-b4f7-45dc-9fea-d8a8bc563e6e"]
}, Open  ]],

Cell["\<\
We can now show how the algorithm gets the same result as our example and \
then graph it (I included it in the test cases)\
\>", "Text",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.816297775073412*^9, 3.816297820680935*^9, {3.8163009448053937`*^9, 
   3.8163009956663227`*^9}, {3.816301105562394*^9, 3.81630110776849*^9}, {
   3.8163012055625305`*^9, 3.8163012559866643`*^9}, {3.816301286534957*^9, 
   3.816301286983757*^9}},ExpressionUUID->"ecd2cd06-2c14-457a-b01c-\
aed52e30732a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"z", "=", 
   RowBox[{"interpolate3d", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1", ",", "3"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       SubscriptBox["y", "1"], ",", 
       SubscriptBox["y", "2"], ",", "1"}], "}"}]}], "]"}]}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.816301135433507*^9, 3.8163011714488077`*^9}},
 CellLabel->
  "In[831]:=",ExpressionUUID->"07b9380f-6e9f-4b47-ab89-da194da51e08"],

Cell[BoxData[
 RowBox[{"1", "+", 
  SubscriptBox["y", "1"], "+", 
  SubscriptBox["y", "2"]}]], "Output",
 CellChangeTimes->{3.8163011736289406`*^9, 3.816303403779728*^9},
 CellLabel->
  "Out[831]=",ExpressionUUID->"bd2c747b-ffeb-4307-ad39-22e6c05ffc72"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{"z", ",", 
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["y", "1"], ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["y", "2"], ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[772]:=",ExpressionUUID->"206f88f8-d31e-4f04-88fe-b6f552545283"],

Cell[BoxData[
 Graphics3DBox[{GraphicsComplex3DBox[CompressedData["
1:eJx1nXm8U9W1x3MHUMDWeQCtIkZ9WkQQtOpTdxwKBMGpz1mEIs4EEFEBqdr6
VFRkCKjxWScmQdRnHeJA9GBArA9BCOMlSPEyw1WZRJAhLzdnfVfc63PrP/eT
Xw8n63yz9tprr7326fG9+l11a2UkEjmmUSRSVfx7/Lfd3isUfgz4e9EnL95W
//e2ge+8kE5sUv2JK/d1rf/8RrNDH0nk16o+e33P9vWffxh3323ReK3qBz4y
o3n951tL98mrPqlN10j95/D6nOptux8854Ti51DPqj7wyLfan1D8HJH/0COR
6R8Oa/3oBXK9Q+/T5oIXTix+lvur/vb6mkL9Z7FH9VafHNb+w+JnsV/1OV+c
/F79Z3le1Z9s88XX9Z+Fj+p/fL7X2l99Vr1Q+q/8Ga7w5DN/vxaecEY/SHjC
GX2y8IQzus8zpzo84YweiTxS4gln9Ds8nlmeO3hTeMIZPSo84azPJTzhjD5M
eMIZ/RLhCeeynfX/bVbO6N3fnzs8Gt+qnOGHf3IdOjz5zN/Jnn+W/3d4whm9
v8czp7rxT9XhCWd0n2cWHsoTzuhzhSec0eEJZ3R4wrlsZ8gTzug3+zxVn3bH
S83jye3KGU6Mdzijw5N/j+77Z9mv4Qln9KKRH5V5lv+dP96zqsMTzug+T/5d
rfKEM/pTwhPO6PCE86/sLPGEMzo84Yye8Xmq3vx3fSYl8juUMzxeF55wRm8n
POGMPsDzz3I8jkRWlvyTz/zt68dP1d/y/VP1E4QnnNF9nln4KU84o3cUnnAu
2xnyhDM6POGMDk84o7fwear+wPxz2yeju4w/59Q/fX/Oafz0/Tlnxnut6vin
7885nY98f85Z/1Sd+cj355zOR74/53Q+8v05pzx9f84pT9+fc8rT9+ec8vT9
ORcM8nmqvvCxJtPTid2Gc1b90+dcP9+/WuLpc84Gd3n+Wav6W/78rvqJfvxU
3fin6sRPn3PWjPdyvPH9szw+4Olzzmr89Dlndbz7nLPqnz7nbLDI56n6Gecu
7ZpP73XlPIn/Qv/059FIhPnInw8iEX8+qlXdzO+qm/ipuvFP1eEZafC/zcoZ
xffPclzHP+GMDk84o8MTzujwhDN6e5+n6qN+mFRTTOysPzv80/izmyo8jT+7
E/z8U3Uzv6tu4qfqxj8Dn99m68/O51nO7zKef5bzEca78WcHT+PPDp7Gnx08
jT+70T5Pc/+KmInPDv808dmRz5v47Ob4+afqT/rzu+omfga+3202nHPK0+ec
MzzL65IWnn+W82jip4nPjvhp4rNjvJv47PBPE58tT9Un/X7c4Gi8MmbyDfVP
k2+4r/31keom/1T9En9+D/zxqvFTdeOfqhM/4Yzuj3edb41/ltd/+KfJN5Sn
yTeUp8k3lKfJNyxP871Vxp9r1T9N/uzM+kh1k3+qDk+TPxuemj9b/1Qdnr4/
1xqeOg8rT5M/63g3+bPyNPmz8jT5s/I0+bPlqXr1yv6N48nqmFkPOrN+V92s
jwJ/ftD8U3Uzv6tu4qfq/njX/FF5whnd56nzs/KEMzrx06wHlSdc0OFp1oPK
06wHLU/Vw/HSKGbqGxo/TX1DeZr6hvFPXUc6M7+rbuKn6oN8/1QdnnBG93nq
vK084ezfvyJm6hvKE87+91YpZ3R4mvqG2KM8Ve811o1J5BsrZz8f0fW76mZ9
pLrvn1qvs/O76j5PrddZ/1Sd+AlndH+8a73O+KfW65SnqdcpTzijw9PU65Sn
qddZns63c7/YzP94+KR8+vuAv8OkXgd/9DWN5tQsK1/n0PlduC96mxtu75iM
bnHm/s5cr/r4S9vd+6v76l/s5zPfM/jCe9PpRNl+7mftRDf3198RO439ev+t
f1vbJ5H/IeDvarm/fHboPJe53hld/3J/7OPfHdqzQ8tf/3v+9/kTUx//+vuw
96j6ZWWyzJ9/V33Ubzrn02X7uQ/3N9cHR/r30e8336vf00ju/5fjV2cKhXJd
d9WzY69JJ9YFNbcOmVUorNPv/eWifw6u/4zO9W7ZqT3TiVXBmW8cNK9QWKXX
X/PEzY/Wf0bn+rPO/9uCPvkVQavSdf/S63s/v6F5/Wd0zS++eHttn/ziYFnp
e5fo9Ue3POK0+s/oXH/pS+ltNek5QbR03Td6/eQrH3tkX/EzOtcP7n5ch/cT
04KTS3qg158xK9Ntb/Fz+PunMuV16qjS+pTruc9z+z7ec1o86bhe81BZZx0d
Xq+/T7Mh/Q6oiExXneuHjhjwcTI63x0b2qnXX96h2b2RyDzVuf6LRh0nJaM1
bknIQa9/duqKHpHIUtW5/vHPhsfjyZXuuJCzXt/34OtPikTKOtefMmSHiydX
uw7h76jXHzone0wkUta5fu6ZPc+KJ9e7paGf6PVFaIdGImWd6wds+ap1PFnn
hoZ+qNffeMlzTSKRss71Ty9+YXQ0vtnht8wbJ5/283mJfK36J3rjVS2eWZb+
Vv0Q/bO7O726LL1I/Q190/p1t32QmK1+hZ7e/tcWd+fT6j9a3573fLtT4uMc
/oA+o/aAk7okZ6o/aL4m60F+d/TtPd6qi8aX6e+L/vLd0/sko9/p74h+0cmn
3pKMrtHfC31N7Zjrk9EN+rugP/Xy3suT0e+VPzpxA87oG56649h4cqtyZh5e
POy9jp2Ty5Uz+oiDV17fOblQOaMP79B82ajoV8oZfcfTqyOt4u8qZ/Srx+V6
T0tMdXBGjz6ff7dvfpZyRq+56MKOHyYWKGd01tdwRk8ftX1kPv2dcka/YWH3
x/PpNcoZfd/IL4fm0xuUM/prMh/BGX38o3PeT+Q3K2f0+/5c+U4iv1U5o3dy
f5iayG9XzuQ1PT4cdGg6sUA5o7d5pEu3PvlZyhl9SMcRc/+RmKqc0dd+3Pjr
k+LvOjijP3rpG25M9CvljN7kpcnD48mFyhn9isOGDo4nlytndNaDcNZ6/l9H
T4nG1ypn9CPO3/1KNL5ROaN/srP3c9H4D8oZ/XSZ3+GMXnH23y9MRrcpZ/QF
h88/Lxn9STmjT9zW6Oxk9Gfjz7lg3uwHp3dKzjT+nAsi9/3pxePi44w/54JX
Wk1Y0y+fdr4/54LvCoO+/jAx2/n+nAvO+fnABfn0IuPPueCRvquCfPpb48+5
YPWAGxcX45jx55zWe31/zgWnbWwzI5HfaPw5p/mG78+54JO2FUvTiS3Gn3PB
M789a0E6sc34cy7oUXfX3HTiJ+PPuaDd/73yVTrxs/HnXFA1eeHMdGKX4ZwN
DurUbl6LeNJwzgY3PX1h4aPENOdzzgYXvN/p+uXpOYZzNrjjygea980vNpyz
wTv/7NK4b36F4ZwN9hw3clcxPzGcs8Er+Z0/FvMcwzkbXCzrQZ9zNlh/1dfL
04kfDeds0HG/F+/Mp7cYztngqDXf9M6ntxnO2WBjtrpnPv2T4ZwNMq+ec2M+
/bPhnA1GPNT3mnx6l+GcDXreNP7KfHq3cmYdc4DkFXBGv0zyBzijPyd5ApzR
+0k+AGd05n04ozO/wxmdeRzO6PQbwBk9922H3YXCFuWMPmHanTsKhW3KGf3+
F17eUij8pJzROz+woK5Q+Fk5o7e4ev/1hcIu5Yxed8b5qwqF3coZ/bODBqwo
FPZaf3Z/kTzN+LMjHzP+7J6QvMv4s/u95FfGn903kkcZf3bkS8afHXmR8Wdd
Xxt/dm2TVcOi8e3Wn11l/7MfjcZ3WH92C7slHorGd1p/lvXvL9af3aAmSwZG
43usP7su65r1j8b3WX92I3q9emYyGomZ+OzIi0x8duRFJj478iITn91ayYtM
fHbkRSY+O/IiE58deZGJz1qvMPHZjeiYOyye3GHjs+sZ3e+geHKnjc+uXeV5
zeLJX2x8dlWlusEeG5/dok8nVsST+2x8lt8rEjPx2X2a2W9oNF4RM/mG+0Dy
IpNvuOslLzL5htsreZHJNxx5kck3HHmRyTcceZHJN1xHyYtMvqH1XpNvuE2/
vPpaIr/T5hvu06WL/p7I/2LzDTcy3TSVyO+x+Yb7c6lesc/mG67FOed+mU5E
YibfcJWl+a4iZvINV3dEv2w6UWn8udbdI3mRyZ/d4ZIXmfzZfSx5kcmfHXmR
yZ8deZHJnx15kcmf3QTJi0z+rPVekz+7+P/2a5OM7rb5szv6mQmnJKN7bf7s
vr+rJpqMFmz+7HqU/D8SM/mz6zzmtd/EkxUxkz+7M0rjotL4c/F771m8fzxZ
FTPrQUdeZNaDWg8x60FHXmTWg468yKwHHXmRWQ868iKzHhQ/2WXXg1qfNOtB
9/otF0xLJ/ba9aDUnQp2PegmHrjwunw6EjPrQRfmDxUxsx50g77f/7/y6cqY
WQ+6MK+oipn1oIvPPv/yfLra1ovcBsmLTF3IkReZ+o8jLzJ1HrdJ8iJTz3Gf
Sl5k6jZupORFpg7jyIvgbOvnpt4idbCCrau4ulI8icRM/cQtuvM/X0nkK2Km
TiJxpjJm6iFuUqf+/5PIV8VM3cONKsWf6pipb7jBJ058NpFvpJyp15EXmbqc
Iy8y9TdHXmTqbC4ueZGppznyIlM3c+RFpj7mPpW8CM62fm7qXa7d2sTGQiES
M3Ut+d6KmKlfuaqZ49YUCpUxU6cSe6piph7lFr+2ZGWhUB0zdScX5m9lnvy1
9cxn5x65snOyLujbITmpc3K1rvveevDSqmJ+ENSeeNOC0dHvdH1NHfoN6XOD
5/JF78aL8ToYLfUQeG6TOu0WqS/Bs2nbFqOK4yd4SOqQ8Lxd6l29TP3wIbG/
q6kHYv9tsj6CJ/Y/JOtNeGL/bFm/wzMv9jPvwxP7qS/B8fOPOo6vrxdfIHVg
ePKXui48txzy9obOyfVB1yF/uXd0tEZ5Npn+3QHF+wbtpZ8Nni0Th7ct5hlB
B6l7wPPsFvE/FefLYP/hYR0Jnpd/OfT+YtwP0lKXg+dUqWtNMfW3rNg/Q/J2
eC4T+1kHwRP7f5F1JTyx/3FZp8MT+w+T+R2e2P+q5EvEgSvE/iMk/4Rzoyum
PFlf36yWeiZ8f7d3+Zv13OukTg5n/k6Rujecu117ybZ6/75f+tng3Lt60BHF
vDk4SOoecB76j6nnFP0gWCp1JDiPuflfNxXzmOBYqcvB+Uf260z9rbHYT94O
52PFftZBcMb+tKwr4Yz9F8k6Hc7YP0/mdzhjP/tEcB4r9g+U/BPOY0rjaHnw
jIxfOM8ojZdvg40yfrEvHBcrgoEyfuFcXk+H+wVwnvzisj2dkyuDa6XuAefp
nX/bssglWC51JDgv+enCi4t5ebCf1OX8eS2v/epwflbsp54J55li/zoZv3DG
ftaVcMb+fbJOhzP2M7/DGfuHS74E56Vif07yTzgfU/rdFwStZVzDuWvp910Y
7JT6MJzD33FRME/GNfaF43pxcLvESTjzt5vESTiH47QmuFXiJJzD8bhM4ySc
N/+b+tuxYj95O5y7if2sg+CM/awr4Yz9nAuAc43Yz/wOZ+ynjgTnc8T+tpJ/
wrlLyZ6Zwc6B4bj28+FZwWoZ13BuWrr/V0ErGddwvqPkb7N1/wK+s0p+NSeY
KfETzvxlXwnOn5f8ZL7GTzhvkbrWRab+dpnYz7iG85tiP+MaztjPuIYz9tOX
BecvxH7qHnDGfupIcM6K/dTl4LyyZH8y6Cnj2l/fjQtWyriGc9+SPVOD/WVc
w3l76fp3df8Czu+UnjcdvCTxE/v6lO4zLThV4iec+fuBxE+//pbK7DP1t+rx
of2MazjvFPsZ13DuL/YzruGM/UfJOh3Ob4v9PaTuAeeE2D9R6khwbi32b5L8
E85RsZf9UL9eMc3dLuMazhPD73XU2+G8PrRT+wPhfF34XFr3gHP4+45z5D/w
XRj+7u4eiZ/w3SR1re6m/sZfxjWce4r9jGs4TxD7Gddwxv77ZZ0O5+5iP3UP
OK8Q+6kjqT+L/XGpy8E5jOfz3SwZ13BuKfaSF8F5ejiO3G4Z13DuFY477Q+E
c3U4TrXuAedJ4bh25EVw7hzGAa3LwblO6lrTTP3tM7Gfca35hvxlXMMZ+xnX
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
veXzwlofEz5w8+0pnxdGJx/jM1zh+f/DWOFX
    "], {{
      {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
        GrayLevel[1], 3], 
       StyleBox[GraphicsGroup3DBox[
         TagBox[{Polygon3DBox[CompressedData["
1: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
c91fNaLvUutG5TgLUutG6aVLonNV7SU1i86zVmIvpT2ReA9lT+o6iWrXqsNs
yddau+gcWXXLKZlzNum99vlzKk5dF52T1svX7Pp8vXSNzmEb5jpxqsaE/8/I
nONJJ3ePzklVz+wGj0tcP7wpOj9VzbNHdExUvOgYPQ6qkV4fnVcqHrWJrgmo
pvp5as0pTXtQcTRx7f2y6LxYY7s7tS+SPwz5nJRf+jt1nUp1+HmpdZq09NzU
elUaW+OyJV/v8jPSKZrf8kXSdJWY552i6wmqu/aMzt9VP6yQxw6tp6ui6yfK
45U3aO/jHcbn5Og9KdWQp2bObxVnX8m8d/U9/G3qfEG5be3ovSTVQutE722p
znlr9JirDtwwej9LOvmU6D0m1UuXpq6taa9kUuY8XHqjUfSel+qoV0T7c+2B
jsy8r6b5/H0eZ6VXP02tXaVvx2ber1qtNR1db1G9dHTmPS3NvbrRe2SqjU/O
XBeQtvksdX6hHKRB9P6d6revZt6rWwqfl4+bNMk3qfM45fv1o7WK4vLXeaxX
Xj8xcx1BfmZM5n24VXCT6D01jee4zLnrGrhldO7/E7Z5dL1C518eXa/Qe51G
G5R4T+Ss6H067df8kLrmqf2sCZnz55+1PjLvI2rtt4quJ6i/cfSeoPLis6P3
7/SOV0bX3LTX2SK6vqFnuzqf85ozp0bvaWr/aHzm/FzP/D+cl+Wm
            "]], Polygon3DBox[CompressedData["
1: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
Q//OlSMf/5Tjes/J8WnnX4l4M29d37/BS7teUqznr3Pk19ly6KHM+F7w4vBr
cIH7w0vkuH9ztIJ34/0f0+/RivN3hT+i/yPnz+v6qPnkpxLxr3uN36vwOTub
G2kf+l7Gr2H8GF6/BV6f9hB8L+Mztwl9YXxZJ0c8eqDquUGMn9SKHLhQCk1v
buxqHKI/nTbRawJ/7fygXey9yjGXndOuZWuCTeBtmqgVOuXQZuYYc42atk+K
mlKtqwZeL4XmVRurEddNobHVjmqEv+h3bkI7vJVibbnGPldr0qbRH2+e5f87
C/4Avt44B58Jvw9f57yD7696aiCfM7IVmqNJsQbUIqcx/g79q+nP3iY0/jYp
NJRa6nTG36V/jXGtTWiQf5qY42qTUxl/uwlt1pXxU+C3nL+uM/hk+E3nq+sC
no32iFo3xfnmrJxiTZnLrCmsla2ZrTUUT9ZS5lhz7RYl9MIA+t9z7tol8ttO
OfL1hiX0Sd8c+W+rEvlhvxz5b8sSemHfHPll+xLrSRNAvWO9eTq8TY58tFaJ
fLQj/DXcq4Q+2Bj+At64hD7qlyMfnQi/Bl+So54YCb8OX5qj3jgJfsP1DHdu
E2t28RQ1h2vZmLAYvGwTscKaZVl4lSZqGWPmEik0tbH09xS5wJyg1rEGWy5F
jWZtZo26QooazNq1fQ6t3rsJLWONsyq8ThO1jxp9tRQ1r9rdGmz5FDWNtdnK
JfLv1jn0gxqrlSJmqr2MiXOmiEnGyn/ga1No7kG891f4ghT3cDe4PdfgjhSa
bpi1OuNLwivAr/L+R3ltCP2Dee0MxrrBs5eIAye2ou2XogZ3zBr8qBQ1i7W5
79FneaTEZ83F992QQwNPqevLnJbrenNOOjefaWJum0NvzLH+za2b5FhLrilr
FWOKudMcaqxRI6mVzBnzw6vmiFPd6fcw9tBfnfH1GP+4jhnLjIGe45zaHz6k
ibnmHD8lxRx07htTN0sRo421xug1UmjIn+ocHZJijjp3zWFzpci55rYh8KZw
H/jHHBqlbYoaQu3yeYpYa8xVe1pjzJQiR1l7WGOoTbrV882hc6TIaeZWNf8C
KTwBawFrigVT1PTWGuY4tYqaxdynJps/RY2uVjNH9nRON5E7zaE94J5N5FZr
oo4pcqq1kjVFlxQ1h7WGNVqnFJrP2k2N3L7+XrXzJPj2FDlwYIkcaDx6uonc
qAZfKoVGVZsf3Yp8s6dhs4RmnSdFTlTL3ghfA99oDiuhIWZLUVM9UHOiXoEa
2Fx5LXw+fCm8eYma+uQUHoK1tppabW3Ong/esYQeGJyj3joKfgo+J0e9qUen
V6eH17WEx9W/zscZ6/xzPrlGXCt6dnp3emKzlPD89P705GYt4cnpzenxdS6h
EW9IUbOoHfWY9Jqs8fUmrdH1ro6v62GZHLWE81/tNLyuD2uCmUt4qHqpeqB6
rXoqelsnNOG1uL6G1vnr/F+ohGfqGj6jNmOBnp9jemh6aXoqeqd6Ypem0AR6
ZXosei16gnq3epSHpfAU9S7NiQPrenN9qgkG1fU9ZwlPwtpkWF3feop6i3qI
eqMnwwek0BRzl/DsLk6hgfXy9PzGwVc24QXunKMWM2eZu/TY9Nr0NPQy9eT0
5vQ09Hb1pa29zTHmGmsMvbXRTdQeeiB6P3qCeiN6LnpfenB6MXo0emd6Yno3
ejxnpfDU9H70mMbA45rwnvTQ9NL0oPRK9dj02syJ5kY9Lr0uPTy970Ny1FrW
XDvB++eoxcy55l49yPNSaHy9yaE5vBM9lL4lPMdLUtQkepHWDBPhSU3UEtYE
V6fwvK0V9Az1DvWo9Lb1fPR+RjbhvetZnZuiRtDLska4Cp7YRO1wJO1J+mfn
8GdOYfzAFB77vOY2eHAKT30B13MJ/+HIHP6Ev9nfPiRHvblHCb/oqBz+gznN
XHdEjlxnzjO3jay5cL8S/sxxOerTvUv4P8Nz6PsBJfyjY3Po+31L+EsjctQD
XmOv9cE5/JgDSvglJ+Xwsw4q4fecksO/Ohp+Fj4vh19yYAn/5WQTHnxECT/0
rBz+02El/NAzc/hhg0vo6VNz+F2L5qjN+vGatfQQ2lS6o3L4TSPgF+GxOfT3
MfBz8Pk5/Jzh8PPwBTn8n2PhF+ALc/hTagBz77k5tMGp/k8p9lR6Oj95fWqK
7/C73AO5DZ7cxN6I+Uv93KXmCz0YvVU9Cr0ZPZ5eVU/q/Vizqq8713ynnupR
85n6696a77rXfGWNcWMKj8baw5qke81P6i9rlm41fz5f9ZZ6Tn2nvrI+UM+p
z9S3elDqW/Wd9YI1vXpO/ac+0yOaDD/chHd0Wo7axnvivTk+h9fnnHJujfYz
UtwT7401r7XvS014UXpK96XwpPSa/vNsaj7Wy9Ej0CtQT+p9WeNZ6+kh6OVM
qfnb/PxG1ec9a/5Wn+oh9avx3bh9Bu09+tcy1r1NzCm9Vue8c+3mElpIzan2
vLVEbWRNZG10S4nayJrA2kDNpDacMYeWuqmEVlXDqmW9PhNrvvJ6OWcn1Hji
9XKN6P26pg+omlBtuDBtkRJrQq/RNe1acQ2Nr/HKtTWhxL3zHqrNJ8GbNVHT
WdtNLKGV1eBq8etLaHU1vlp/dInayxrKWmpMidrHmszaTM27EPhXCi2sRvP6
zFG1220ltJs1p7Xn7SVqS2s2a7cb4TWa0Pxqf9e03rIxxbV+Q4laQE2vtr8D
3qWJGtVaNdXPX6xqH9eoXq0xxbXrGr2nzj/XrjFFL9YYZKwxBo6t8d/YaIy8
qOa/vjX+j6v50fhujLi3zu8RdX1PrvPT+boj728Hzw7fzdhe8NwprtHjOWpM
57v6zdrTGK2XbI1n7LZmfTxFDLKWVc/rjRnjtmlFzftYihhpLXxuiVrGmtTa
1Jis92KNaKxWg42q+Vhtpga7ta4/tZk5Re/fmG2uMebpZRtzjYXGyEk1Xg2p
69X4pR4dWtfzVTXfGc/MEVfW/OX6tkbVm7fGtXY1R+gFqREH1Hw8puY/8505
44qan80l5ozRNd+bS6x3rN3dX7E2P6/Etbams7YbVSKWGlP1Jt4qkcvNseba
N0t8l9+plni7hLY155v73ylxr73naiE1r1p3n6qF3y2R+9VMaqdpJbT0fzkf
/qDEtfgvh8Pvw9c2ofHUervW7zu8avH3Smg/NYXa4pMSc8k5ZSz91DXfRAw0
Fg6s33dirQ2mlNACajq13eMltJ6aUe34WAntqCZUGz5cQouqGdQOD5XQDuYs
c9eDJXKXGkOt8XoJraYGU4tNL3HvnQPmso1aoU8eTOEPfMz4HU3kHHPPhyVi
mzFOrfRRiVykRlerX15ibVjzWfu5Rryf36RYO5eWqM2t2azdtmjF2ngiRXze
vBVrwTXj2tmqFfn5qRT+0matyM+uGdfOhSVqLWsya7ONW1GfPJTC79mkFbnI
NepavaBE7WZNaW25ZSv0wJMp/KrzS+Rac6615qatWNvWaM7PrVuR+9UA+l/G
hHbmqhSxYnyJ/KBHolcyrkStb01mbXZRidrMmtHa8ZISud6cb615WYlaWQ9D
L0OPoGMTXqDewRUlcp850Fr2yhK5zxxo7XpdiVxvztfLubpE7WtNbG08tkSt
ao1qrXpNCe/RGtla+aoStbM1sbXxtfBSTXiUepVe04dqftdbuynHHv+0JrxB
PVS91P7e4xK/2d8+Hf6ixJ6D/s86TfiXF5cY+4T2Zf089YKe+TfONfjjJjx/
/Uc9EL2Qz2hfl/CUfbbDPQy9Zu/J1Ko3/D3Wg+Ymc5T1nh65z1q4p6F3rmfv
XnTvJrz8c3jtmyaeWfD79dx9VkU/0nrS+sL6x/rGekpPz3rKesh6Q8/Oteka
tV7R43MvyXpL70+P0Pry+CbqL/d4fNbDPQT3ftzTca/YPQT3etzzcO9Dj9u9
IPfE3BvTY5+nxB6JeyX6we4lOYedy64ZvVjrPetj61vrNfdA9I/1i9XP7gm5
N69f7F6Rz+z47I57TB1L7AnpJ+uHulfknrZaSE2kP+szQz475B5VhxL6XG1g
DjeX+0yNz9a4p9WpxBp2LbuG9I7dU/JZAfdAf6kazVjgmlS7uQej3t+zCd9N
T9NnJawZ9DqNUcYq17zeps/k+GxOP9dciT0F9/rdE3WvQQ/UZy+Mcf95o63Y
23EPwr0C9yx8dsg9M/cyfAbIZ4Hco+tSwnN079J6XC/SPQT3EvY25pXwYN0b
tF61XtYDdi9Uz1Jv2Hraetb61nrXPSKfzXCP170j/X21pJpSP///uqK9fg==

            "]], Polygon3DBox[CompressedData["
1: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
A3eyV9kudpBNYf/NJP9DHo/1yLiM+A0hPNI8
            "]]},
          Annotation[#, "Charting`Private`Tag$323384#1"]& ]],
        Lighting->{{"Ambient", 
           RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
          "Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{0, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
      {GrayLevel[0], Line3DBox[CompressedData["
1:eJwt0jkvBVEYgOGxr9cS0RINUVCKglIUVCIKOqKgIBEFpULodPwCWiL0Ejr7
cu1rRMTW2NfwnETxznMy92TmO5lb0t7b1JMQRdGwXhXWj7rUbGIU5XGBxVxn
JU9Zywc28pttzE6Kopi6rcs5yGqOsp4TbOEUOznPfi7xntd817aewz0tG2iH
K4xzlbtc416Yifvc4AE3uaXD8BwecYfHjPOEuzzlHs+4z3NOO8cNP3Shl3BG
jZlti0NcZB/n2MFJNnOcdRxhFQdYxlJ1WWewlZ/e0cA71vCYFeFcLOKtfVd8
U66ewl4VmjGHBYwxn9lhD7MYYyazmBHex3SmMkVp1klMDd843OOvkvUTftOX
jBHNuNz+/x/+AMQfSu8=
        "]]}, 
      {GrayLevel[0.2], 
       Line3DBox[{690, 1000, 473, 689, 1106, 912, 691, 1107, 913, 692, 1108, 
        914, 693, 1109, 915, 694, 1110, 916, 695, 1111, 1006, 1206, 696, 1112,
         917, 697, 1113, 918, 698, 1114, 919, 699, 1115, 920, 700, 1116, 921, 
        701, 1117, 922, 702, 1308, 1001, 923, 1002}], 
       Line3DBox[{704, 1007, 1207, 703, 488, 705, 1118, 924, 706, 1119, 925, 
        707, 1120, 926, 708, 1121, 927, 709, 1122, 1008, 1208, 710, 1009, 
        1209, 711, 1123, 928, 712, 1124, 929, 713, 1125, 930, 714, 1126, 931, 
        715, 1127, 932, 716, 1128, 933, 717}], 
       Line3DBox[{719, 1010, 1210, 718, 1011, 1211, 720, 504, 721, 1129, 934, 
        722, 1130, 935, 723, 1131, 936, 724, 1132, 1012, 1212, 725, 1013, 
        1213, 726, 1014, 1214, 727, 512, 728, 1133, 937, 729, 1134, 938, 730, 
        1135, 939, 731, 1136, 940, 732}], 
       Line3DBox[{734, 1015, 1215, 733, 1016, 1216, 735, 1017, 1217, 736, 520,
         737, 1137, 941, 738, 1138, 942, 739, 1139, 1018, 1218, 740, 1019, 
        1219, 741, 1020, 1220, 742, 1021, 1221, 743, 528, 744, 1140, 943, 745,
         1141, 944, 746, 1142, 945, 747}], 
       Line3DBox[{749, 1022, 1222, 748, 1023, 1223, 750, 1024, 1224, 751, 
        1025, 1225, 752, 536, 753, 1143, 946, 754, 1144, 1026, 1226, 755, 
        1027, 1227, 756, 1028, 1228, 757, 1029, 1229, 758, 1030, 1230, 759, 
        1031, 1231, 760, 1145, 947, 761, 1146, 948, 762}], 
       Line3DBox[{764, 1032, 1232, 763, 1033, 1233, 765, 1034, 1234, 766, 
        1035, 1235, 767, 1036, 1236, 768, 552, 769, 1147, 1037, 1237, 770, 
        1038, 1238, 771, 1039, 1239, 772, 1040, 1240, 773, 1041, 1241, 774, 
        1042, 1242, 775, 560, 776, 1148, 949, 777}], 
       Line3DBox[{781, 1149, 950, 779, 1150, 951, 783, 1151, 952, 785, 1152, 
        953, 787, 1153, 954, 789, 1154, 955, 791, 1155, 569, 793, 1156, 956, 
        795, 1157, 957, 797, 1158, 958, 799, 1159, 959, 801, 1160, 960, 803, 
        1161, 961, 805, 1163, 963, 807}], 
       Line3DBox[{806, 962, 1162, 804, 1255, 1054, 802, 1254, 1053, 800, 1253,
         1052, 798, 1252, 1051, 796, 1251, 1050, 794, 1250, 1049, 792, 1249, 
        568, 790, 1248, 1048, 788, 1247, 1047, 786, 1246, 1046, 784, 1245, 
        1045, 782, 1244, 1044, 778, 1243, 1043, 780}], 
       Line3DBox[{809, 1055, 1256, 808, 1164, 964, 810, 1165, 965, 811, 1166, 
        966, 812, 1167, 967, 813, 1168, 968, 814, 1169, 1056, 1257, 815, 585, 
        816, 1170, 969, 817, 1171, 970, 818, 1172, 971, 819, 1173, 972, 820, 
        1174, 973, 821, 1175, 974, 822}], 
       Line3DBox[{824, 1057, 1258, 823, 1058, 1259, 825, 1176, 975, 826, 1177,
         976, 827, 1178, 977, 828, 1179, 978, 829, 1180, 1059, 1260, 830, 
        1060, 1261, 831, 601, 832, 1181, 979, 833, 1182, 980, 834, 1183, 981, 
        835, 1184, 982, 836, 1185, 983, 837}], 
       Line3DBox[{839, 1061, 1262, 838, 1062, 1263, 840, 609, 841, 1186, 984, 
        842, 1187, 985, 843, 1188, 986, 844, 1189, 1063, 1264, 845, 1064, 
        1265, 846, 1065, 1266, 847, 617, 848, 1190, 987, 849, 1191, 988, 850, 
        1192, 989, 851, 1193, 990, 852}], 
       Line3DBox[{854, 1066, 1267, 853, 1067, 1268, 855, 1068, 1269, 856, 625,
         857, 1194, 991, 858, 1195, 992, 859, 1196, 1069, 1270, 860, 1070, 
        1271, 861, 1071, 1272, 862, 1072, 1273, 863, 633, 864, 1197, 993, 865,
         1198, 994, 866, 1199, 995, 867}], 
       Line3DBox[{869, 1073, 1274, 868, 1074, 1275, 870, 1075, 1276, 871, 
        1076, 1277, 872, 641, 873, 1200, 996, 874, 1201, 1077, 1278, 875, 
        1078, 1279, 876, 1079, 1280, 877, 1080, 1281, 878, 1081, 1282, 879, 
        649, 880, 1202, 997, 881, 1203, 998, 882}], 
       Line3DBox[{884, 1082, 1283, 883, 1083, 1284, 885, 1084, 1285, 886, 
        1085, 1286, 887, 1086, 1287, 888, 657, 889, 1204, 1087, 1288, 890, 
        1088, 1289, 891, 1089, 1290, 892, 1090, 1291, 893, 1091, 1292, 894, 
        1092, 1293, 895, 665, 896, 1205, 999, 897}], 
       Line3DBox[{911, 1005, 685, 910, 1307, 1104, 909, 1306, 1103, 908, 1305,
         1102, 907, 1304, 1101, 906, 1303, 1100, 905, 1302, 1099, 904, 1301, 
        1300, 1098, 903, 1299, 1097, 902, 1298, 1096, 901, 1297, 1095, 900, 
        1296, 1094, 899, 1295, 1093, 898, 1105, 1294, 1003, 1004}]}, 
      {GrayLevel[0.2], 
       Line3DBox[{251, 474, 1106, 252, 488, 280, 1211, 503, 295, 1216, 518, 
        310, 1223, 533, 325, 1233, 548, 340, 1244, 563, 1150, 355, 578, 1164, 
        370, 1259, 593, 385, 1263, 608, 400, 1268, 623, 415, 1275, 638, 430, 
        1284, 653, 445, 1295, 668, 460}], 
       Line3DBox[{253, 475, 1107, 254, 489, 1118, 281, 504, 296, 1217, 519, 
        311, 1224, 534, 326, 1234, 549, 341, 1245, 564, 1151, 356, 579, 1165, 
        371, 594, 1176, 386, 609, 401, 1269, 624, 416, 1276, 639, 431, 1285, 
        654, 446, 1296, 669, 461}], 
       Line3DBox[{255, 476, 1108, 256, 490, 1119, 282, 505, 1129, 297, 520, 
        312, 1225, 535, 327, 1235, 550, 342, 1246, 565, 1152, 357, 580, 1166, 
        372, 595, 1177, 387, 610, 1186, 402, 625, 417, 1277, 640, 432, 1286, 
        655, 447, 1297, 670, 462}], 
       Line3DBox[{257, 477, 1109, 258, 491, 1120, 283, 506, 1130, 298, 521, 
        1137, 313, 536, 328, 1236, 551, 343, 1247, 566, 1153, 358, 581, 1167, 
        373, 596, 1178, 388, 611, 1187, 403, 626, 1194, 418, 641, 433, 1287, 
        656, 448, 1298, 671, 463}], 
       Line3DBox[{259, 478, 1110, 260, 492, 1121, 284, 507, 1131, 299, 522, 
        1138, 314, 537, 1143, 329, 552, 344, 1248, 567, 1154, 359, 582, 1168, 
        374, 597, 1179, 389, 612, 1188, 404, 627, 1195, 419, 642, 1200, 434, 
        657, 449, 1299, 672, 464}], 
       Line3DBox[{261, 479, 1111, 263, 493, 1122, 285, 508, 1132, 300, 523, 
        1139, 315, 538, 1144, 330, 553, 1147, 345, 568, 1155, 360, 583, 1169, 
        375, 598, 1180, 390, 613, 1189, 405, 628, 1196, 420, 643, 1201, 435, 
        658, 1204, 450, 1300, 673, 465}], 
       Line3DBox[{265, 481, 1112, 266, 1209, 495, 287, 1213, 510, 302, 1219, 
        525, 317, 1227, 540, 332, 1238, 555, 347, 1250, 570, 1156, 362, 585, 
        377, 1261, 600, 392, 1265, 615, 407, 1271, 630, 422, 1279, 645, 437, 
        1289, 660, 452, 1302, 675, 467}], 
       Line3DBox[{267, 482, 1113, 268, 496, 1123, 288, 1214, 511, 303, 1220, 
        526, 318, 1228, 541, 333, 1239, 556, 348, 1251, 571, 1157, 363, 586, 
        1170, 378, 601, 393, 1266, 616, 408, 1272, 631, 423, 1280, 646, 438, 
        1290, 661, 453, 1303, 676, 468}], 
       Line3DBox[{269, 483, 1114, 270, 497, 1124, 289, 512, 304, 1221, 527, 
        319, 1229, 542, 334, 1240, 557, 349, 1252, 572, 1158, 364, 587, 1171, 
        379, 602, 1181, 394, 617, 409, 1273, 632, 424, 1281, 647, 439, 1291, 
        662, 454, 1304, 677, 469}], 
       Line3DBox[{271, 484, 1115, 272, 498, 1125, 290, 513, 1133, 305, 528, 
        320, 1230, 543, 335, 1241, 558, 350, 1253, 573, 1159, 365, 588, 1172, 
        380, 603, 1182, 395, 618, 1190, 410, 633, 425, 1282, 648, 440, 1292, 
        663, 455, 1305, 678, 470}], 
       Line3DBox[{273, 485, 1116, 274, 499, 1126, 291, 514, 1134, 306, 529, 
        1140, 321, 1231, 544, 336, 1242, 559, 351, 1254, 574, 1160, 366, 589, 
        1173, 381, 604, 1183, 396, 619, 1191, 411, 634, 1197, 426, 649, 441, 
        1293, 664, 456, 1306, 679, 471}], 
       Line3DBox[{275, 486, 1117, 276, 500, 1127, 292, 515, 1135, 307, 530, 
        1141, 322, 545, 1145, 337, 560, 352, 1255, 575, 1161, 367, 590, 1174, 
        382, 605, 1184, 397, 620, 1192, 412, 635, 1198, 427, 650, 1202, 442, 
        665, 457, 1307, 680, 472}], 
       Line3DBox[{277, 682, 1308, 683, 278, 501, 1128, 293, 516, 1136, 308, 
        531, 1142, 323, 546, 1146, 338, 561, 1148, 353, 576, 1162, 1163, 368, 
        591, 1175, 383, 606, 1185, 398, 621, 1193, 413, 636, 1199, 428, 651, 
        1203, 443, 666, 1205, 458, 685, 686, 687}], 
       Line3DBox[{459, 667, 684, 1294, 444, 652, 1283, 429, 637, 1274, 414, 
        622, 1267, 399, 607, 1262, 384, 592, 1258, 369, 577, 1256, 354, 1149, 
        562, 1243, 339, 547, 1232, 324, 532, 1222, 309, 517, 1215, 294, 502, 
        1210, 279, 487, 1207, 250, 473, 681, 688}], 
       Line3DBox[{466, 674, 1301, 451, 659, 1288, 436, 644, 1278, 421, 629, 
        1270, 406, 614, 1264, 391, 599, 1260, 376, 584, 1257, 361, 569, 1249, 
        346, 554, 1237, 331, 539, 1226, 316, 524, 1218, 301, 509, 1212, 286, 
        494, 1208, 264, 480, 1206, 262}]}, {}, {}}},
    VertexNormals->CompressedData["
1:eJztzqENgwAURdEfCFgWAMEMDICBDkDSBZqg0WzBFozBGHgmaStqKlGQHHXz
jnr1axrGJCLKLCL9tGqWfp2P7a8tP+db93x89697kXdX/Mk555xzzjnnnHPO
Oeecc84555xzzjnnnHPOOeecc84555xzzjnnnHPOOeecc84555xzzjnnnHPO
Oeecc84555xzzjnnnHPOOeec8/v6G4EaOZw=
     "]], {}},
  Axes->True,
  AxesLabel->{None, None, None},
  AxesOrigin->{Automatic, Automatic, Automatic},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGrids->None,
  FaceGridsStyle->Automatic,
  ImageSize->{365.68451522717373`, 140.33511786518335`},
  ImageSizeRaw->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "RotationControl" -> 
    "Globe"},
  PlotRange->{Full, Full, All},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{0.9535799055761804, -3.237884663834878, -0.23830289000391308`},
  ViewVertical->{0.019895761787718368`, -0.06755614457798473, 
   0.9975170805518294}]], "Output",
 CellChangeTimes->{3.8163011760574446`*^9},
 CellLabel->
  "Out[772]=",ExpressionUUID->"5bfdac37-288d-4132-a62c-9e222ce234ed"]
}, Open  ]],

Cell["\<\



We\[CloseCurlyQuote]ll now show when this cannot determine the coefficients \
of the equation



\
\>", "Text",
 CellChangeTimes->{{3.816301389637665*^9, 3.8163014276719704`*^9}, {
  3.8163017040462155`*^9, 
  3.816301704579749*^9}},ExpressionUUID->"dd170192-1a7d-4e26-a151-\
4cffc3bc38d1"],

Cell[BoxData[
 RowBox[{"m", "=", 
  RowBox[{"randpoint", "[", "8", "]"}]}]], "Input",
 CellChangeTimes->{{3.816301434289236*^9, 3.8163014625548916`*^9}},
 CellLabel->
  "In[795]:=",ExpressionUUID->"de123dc1-efc5-48ab-9cb2-0c92e635166f"],

Cell[BoxData[{
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"8", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", 
     RowBox[{"-", "9"}], ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "4"}], ",", 
     RowBox[{"-", "1"}], ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", 
     RowBox[{"-", "3"}], ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "10"}], ",", 
     RowBox[{"-", "5"}], ",", 
     RowBox[{"-", "7"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "10"}], ",", 
     RowBox[{"-", "3"}], ",", 
     RowBox[{"-", "1"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "10"}], ",", 
     RowBox[{"-", "8"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "4"}], ",", "3", ",", 
     RowBox[{"-", "5"}]}], "}"}]}], "}"}], "\[IndentingNewLine]", 
 RowBox[{"m", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"8", ",", "0", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"8", ",", 
      RowBox[{"-", "9"}], ",", "7"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "4"}], ",", 
      RowBox[{"-", "1"}], ",", "10"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6", ",", 
      RowBox[{"-", "3"}], ",", "4"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "10"}], ",", 
      RowBox[{"-", "5"}], ",", 
      RowBox[{"-", "7"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "10"}], ",", 
      RowBox[{"-", "3"}], ",", 
      RowBox[{"-", "1"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "10"}], ",", 
      RowBox[{"-", "8"}], ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "4"}], ",", "3", ",", 
      RowBox[{"-", "5"}]}], "}"}]}], "}"}]}]}], "Input",
 CellChangeTimes->{{3.8163016195241117`*^9, 
  3.8163016318651032`*^9}},ExpressionUUID->"7468fefd-2458-4310-a896-\
f07db7b0e822"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "=", 
  RowBox[{"genfunclist", "[", "8", "]"}]}]], "Input",
 CellChangeTimes->{{3.8163014414443903`*^9, 3.8163014681080413`*^9}},
 CellLabel->
  "In[817]:=",ExpressionUUID->"5dc19150-6a13-4f21-b97b-01b7ae5d37ce"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", 
   SubscriptBox["y", "1"], ",", 
   SubsuperscriptBox["y", "1", "2"], ",", 
   SubsuperscriptBox["y", "1", "3"], ",", 
   SubscriptBox["y", "2"], ",", 
   SubsuperscriptBox["y", "2", "2"], ",", 
   SubsuperscriptBox["y", "2", "3"], ",", 
   SubsuperscriptBox["y", "1", "4"]}], "}"}]], "Output",
 CellChangeTimes->{{3.8163014474772205`*^9, 3.816301468849058*^9}, 
   3.816303047408819*^9},
 CellLabel->
  "Out[817]=",ExpressionUUID->"a423aff5-5e15-44a1-8552-116cce006b92"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"interpolate3d", "[", 
  RowBox[{"m", ",", "f"}], "]"}]], "Input",
 CellChangeTimes->{{3.8163014545204225`*^9, 3.816301476231214*^9}},
 CellLabel->
  "In[818]:=",ExpressionUUID->"c173a99d-f43b-490b-b729-b922d5665638"],

Cell[BoxData["Indeterminate"], "Output",
 CellChangeTimes->{{3.816301477697253*^9, 3.8163015545315247`*^9}, 
   3.816303053814638*^9},
 CellLabel->
  "Out[818]=",ExpressionUUID->"ce419746-c13d-4f05-ba70-ce25d004080b"]
}, Open  ]],

Cell["\<\
It took me about 15 times of rerunning randpoint for this to get an actual \
indeterminate, which shows that this function works pretty well and rarely \
does not work. We can also see that the equation cannot be determined when \
there\[CloseCurlyQuote]s an indeterminate. \
\>", "Text",
 CellChangeTimes->{{3.8163015225712643`*^9, 3.8163015255612307`*^9}, {
  3.816301558425104*^9, 3.8163016079825573`*^9}, {3.81630167303018*^9, 
  3.8163016801092086`*^9}, {3.8163017110973206`*^9, 3.8163017218416214`*^9}, {
  3.816302314412261*^9, 
  3.8163023447012506`*^9}},ExpressionUUID->"00d95b4a-a391-4418-828c-\
57c2f6723250"],

Cell["\<\
We can make some really cool looking surfaces when we do this and we\
\[CloseCurlyQuote]ll show one here. We\[CloseCurlyQuote]ll use genfunclist to \
create the function that we\[CloseCurlyQuote]re trying to find the unknown \
coefficients for and we\[CloseCurlyQuote]ll use some interestingly picked out \
data points. \
\>", "Text",
 CellChangeTimes->{{3.8162979029641237`*^9, 3.816297904578839*^9}, {
  3.8162982260884314`*^9, 3.8162982978474865`*^9}, {3.8162983360737514`*^9, 
  3.8162983496602488`*^9}, {3.8162983985036464`*^9, 3.816298400346673*^9}, {
  3.8162985026751304`*^9, 3.8162985265901966`*^9}, {3.8162986249725094`*^9, 
  3.8162986292749944`*^9}, {3.8162987902260785`*^9, 3.8162988023297005`*^9}, {
  3.8163013240964937`*^9, 3.8163013248086*^9}, {3.8163013568601513`*^9, 
  3.816301385330186*^9}},ExpressionUUID->"950e6d6b-4e9a-49ea-98b8-\
d7712274f42d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data1", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", 
      RowBox[{"-", "1"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1"}], ",", "0", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", 
      RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "0", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "2"}], ",", "0", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "2", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", 
      RowBox[{"-", "2"}], ",", "0"}], "}"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.8157037542012806`*^9, 3.8157038465410185`*^9}, {
   3.815704288541255*^9, 3.815704290204839*^9}, {3.8157049742803407`*^9, 
   3.815704974900633*^9}, 3.815705242507386*^9, {3.8157053556127825`*^9, 
   3.8157053951638374`*^9}, {3.815705806733879*^9, 3.8157058247287493`*^9}, {
   3.815761431593631*^9, 3.815761502194846*^9}, {3.8157621092565274`*^9, 
   3.815762109357253*^9}, {3.815762730357407*^9, 3.815762730892264*^9}, 
   3.8157628874775167`*^9, {3.8157630735753546`*^9, 3.815763075242149*^9}},
 CellLabel->
  "In[833]:=",ExpressionUUID->"87708c92-73bc-4305-9030-e7870d081955"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", 
     RowBox[{"-", "1"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "2"}], ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "2", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     RowBox[{"-", "2"}], ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.815763076340579*^9, 3.8163016486073236`*^9, 
  3.81630342279287*^9},
 CellLabel->
  "Out[833]=",ExpressionUUID->"e003b6d2-4793-4d9c-a14b-67a91b4eb61f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", 
     RowBox[{"-", "1"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "2"}], ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "2", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     RowBox[{"-", "2"}], ",", "0"}], "}"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.8157630586328077`*^9, 3.815763062191925*^9}},
 CellLabel->
  "In[344]:=",ExpressionUUID->"a4bd55b7-28ce-4bd4-8540-69e5695bb510"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", 
     RowBox[{"-", "1"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "2"}], ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "2", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     RowBox[{"-", "2"}], ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8157630638694005`*^9},
 CellLabel->
  "Out[344]=",ExpressionUUID->"2ef573f5-b9a8-4ccb-bade-85fe963716bc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"b", "=", 
  RowBox[{"genfunclist", "[", "9", "]"}]}]], "Input",
 CellChangeTimes->{{3.815703853503132*^9, 3.815703901822954*^9}, {
  3.8157039650667357`*^9, 3.8157040013334465`*^9}, {3.8157041108777065`*^9, 
  3.8157041593557854`*^9}, {3.815704192602846*^9, 3.815704248219284*^9}, {
  3.815704446131631*^9, 3.815704449163478*^9}, {3.8157044859825397`*^9, 
  3.8157045557246*^9}, {3.815704815423768*^9, 3.815704817165086*^9}, {
  3.8157049809455132`*^9, 3.8157049911731052`*^9}, {3.815705443979912*^9, 
  3.8157054450788946`*^9}, {3.8157054783908296`*^9, 3.8157055742358427`*^9}, {
  3.815705874202463*^9, 3.815705880140545*^9}, {3.815761514616621*^9, 
  3.815761576264682*^9}, {3.815761764978998*^9, 3.815761768303109*^9}, {
  3.8157617986662903`*^9, 3.8157618388058996`*^9}, {3.8157618758318653`*^9, 
  3.815761927273307*^9}, {3.8162983100548406`*^9, 3.8162983254248323`*^9}},
 CellLabel->
  "In[798]:=",ExpressionUUID->"e5a59d2e-8ac0-4c45-be68-a70139b64869"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", 
   SubscriptBox["y", "1"], ",", 
   SubsuperscriptBox["y", "1", "2"], ",", 
   SubsuperscriptBox["y", "1", "3"], ",", 
   SubsuperscriptBox["y", "1", "4"], ",", 
   SubscriptBox["y", "2"], ",", 
   SubsuperscriptBox["y", "2", "2"], ",", 
   SubsuperscriptBox["y", "2", "3"], ",", 
   SubsuperscriptBox["y", "2", "4"]}], "}"}]], "Output",
 CellChangeTimes->{3.816298325787858*^9, 3.81630165159048*^9},
 CellLabel->
  "Out[798]=",ExpressionUUID->"fa7cbbaf-0deb-4eb1-979b-7683f44262fe"]
}, Open  ]],

Cell["Now we can find the multivariate interpolation of this", "Text",
 CellChangeTimes->{{3.816298269679837*^9, 3.8162982857099543`*^9}, 
   3.8162992788896523`*^9},ExpressionUUID->"bacdb59b-b8a5-426c-bf99-\
382a13713e20"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"k", "=", 
  RowBox[{"interpolate3d", "[", 
   RowBox[{"data1", ",", "b"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.815761599577306*^9, 3.8157616050346756`*^9}, {
  3.8157627483913155`*^9, 3.8157628222702675`*^9}, {3.815762899135598*^9, 
  3.815763011912424*^9}, {3.8163011519788513`*^9, 3.816301152408701*^9}, {
  3.816303039954378*^9, 3.816303040488983*^9}},
 CellLabel->
  "In[834]:=",ExpressionUUID->"0115d577-766e-4846-8127-cafa7a611dee"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "1"}], "+", 
  FractionBox[
   RowBox[{"31", " ", 
    SubsuperscriptBox["y", "1", "2"]}], "12"], "-", 
  FractionBox[
   RowBox[{"7", " ", 
    SubsuperscriptBox["y", "1", "4"]}], "12"], "+", 
  FractionBox[
   RowBox[{"31", " ", 
    SubsuperscriptBox["y", "2", "2"]}], "12"], "-", 
  FractionBox[
   RowBox[{"7", " ", 
    SubsuperscriptBox["y", "2", "4"]}], "12"]}]], "Output",
 CellChangeTimes->{{3.8157627731246033`*^9, 3.8157627957943697`*^9}, {
   3.8157628925026426`*^9, 3.8157629084601574`*^9}, {3.8157629593612347`*^9, 
   3.8157630128010283`*^9}, {3.8157630672371387`*^9, 3.815763079462925*^9}, 
   3.8157754866857224`*^9, 3.81629832873697*^9, 3.8163016539092765`*^9, 
   3.8163030426561923`*^9, {3.8163034186559405`*^9, 3.8163034271113243`*^9}},
 CellLabel->
  "Out[834]=",ExpressionUUID->"39251e61-16b6-4bf6-ac48-883b4414284c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{"f", ",", 
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["y", "1"], ",", 
     RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["y", "2"], ",", 
     RowBox[{"-", "2"}], ",", "2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8157619754474635`*^9, 3.815762027716666*^9}, {
  3.815762280616127*^9, 3.8157622889134555`*^9}, {3.815762331535483*^9, 
  3.8157623550934467`*^9}, {3.81576304009182*^9, 3.8157630477919674`*^9}, {
  3.8157680367676725`*^9, 3.815768106798252*^9}, {3.816301154442301*^9, 
  3.8163011545709143`*^9}},
 CellLabel->
  "In[800]:=",ExpressionUUID->"0cb4d3bf-cb0f-4c8b-940f-9a2415af23f7"],

Cell[BoxData[
 Graphics3DBox[{GraphicsComplex3DBox[CompressedData["
1:eJyFvXec0MXx/3/0LkWs2LHFXhC7c5ZYsWHvoCgWMIoliiUWjMaKYO/YAEWN
qESNsnKAGgviqUhT5EQEAcUTUfovkXnO+/t+cfv78M897sXevmdnZ2dnZmdn
Nz7zL13Prl9RUbG0dUVFg//+3Pirw19ZsWJF4uc7V+6/vGHFfDvn0n8+OKL3
ksArTjv/tr9e2LDyuRarX9d7ysLAL/3xp13vebtx5Y9PXnbOpofUBj7siGPe
69y0QeXZf/QzJ/Bu9zz98onHLrKV7WuK/vtsMGh0xWzHqwOvrPdSzYJrP7AK
/xftKyq+b7Vo9D7e3rS992/av9NjddNTa0q/j9d0vM4fU/7476b85Hf4Wt/b
8zs/B1476bDLL2wTfAY/7KD1nmx4X9vgM/i4Hx/+7PnLWwefwbv+sO7Zg9Zu
VgmfwZ/Yq/+CZ16sXwmfwXtt9P2r72+zNPgMvumy4ffPnfo782LaHj5r//C5
bnpqTemHzzpe+Kz8gc/KT/gM/y4pz1fgh3r//M7P+m3O+H3A2+2Cz+AbvdOm
ckZNm+Az+Nirnmg7smeL4DN423FrDKpa1jD4DD5440WNrz+7ohI+gzfeaOT8
za5aFnzW9vBZ+4fPddNTa0o/fNbxwmflD3xWfsJn+PSCrxf4DC7zGzj08Ds/
+37Tr/UFbVYLPoMvn9JgULfhTYLP4F22u3KHsw+uF3wGr2rwxjYHdVsU8lzu
f2HwWdvDZ+0fPtdNT60p/fBZxwuflT/wWfkJn+HHWa6v4DP4Mb6+4DO4yEPg
K5x+fufnjV/esNPxx9YLPoM/ccz8G1/7/NfQz+D3/Nr78R4Hzw4+gzd+qdHZ
w4bUBJ+1PXzW/uFz3fTUmtIPn3W88Fn5A5+Vn2V5rkmLL165X5TluSYNcv1W
luea1K603msDF/kJvMzPmsAvn//an6+pF3wr2h++w0sH19ycyvJck9bc8J5L
Gy37MJXluWhfluei/7I8Kz21pvSX5bkYb1meC/6U5bngZ5nP1WkP36/LfK5O
F/j+UuZztejD2sBH+fot87k63VuWt8CrSvypjp81fba/7a53aoTP1eniN+4f
e1C32cLnon2Zz0X/ZT4rPbWm9Jf5XIy3zOeCP2U+F/z8f+wk/v1hL8FnQPZ3
+Axe3o9qA0d/wudoX1rvBf9EPgOHnxV1/psffNb28Fn7h89101MbOPTDZx0v
fFb+wGflp8izZeTZMvJsGXm2jDxbRp4tI8+WkWfLyLNl5Nky8mwZebaMPFtG
ni0jz6byDF0Z/WwZ/WwZ/WwZ/WwZ/WwZ/WwZ/WwZ/WwZ/WwZ/WwZ/WwZ/WwZ
/WwZ/Wyqn/l+xt6wjL1hGXvDMvaGZewNy9gblrE3LGNvWMbesIy9YRl7wzL2
hmXsDcvYG1a3vVFrGfvZMvazZexny9jPlrGfLWM/W8Z+toz9bBn7WdeX1U1P
2M+WsZ8tYz9bxn42tZ/pL+MPWsYftIw/aBl/0DL+oGX8Qcv4g5bxBy3jD1rG
H9T1aEq/+IOW8Qct4w+a+oP8XSa+YZn4hmXiG5aJb1gmvmGZ+IZl4huWiW9Y
Jr5hmfiGZeIbun5NxyvxDcvEN0zjG/x/Jl5nmXidZeJ1lonXWSZeZ5l4nWXi
dVZRd7zOMvE6y8TrLBOvs0y8zjLxOsvE64KfY7b82+ZTRixL/Pznoj5V993S
pLLpO9NbDth0UeBvjT1yTLsTV6vkd/7/TceZL/6//4h79n3wlhVGO/7/qC0G
P/n+wMaVXU444JeDByyI9vOP2XzYzdu2iu/y89uD1zzrvYHtoj393PLaNbfu
fV6jwGm/7K56X16/vG3lRn+0+yn6P2rRd1sdNqZJ4LQ/eWzVNu8NRA/PjPYT
F607btDa9QKn/Yyxv32y/iz29ynRfu22X6245hP2yynR/p5jP6y3566s06po
//6dh6926xnzDZz2Uzdv0u6G5ejDKsu0N23v37UMPab0+LgsM17T8TrfLMNP
U376vFhmfk3livY6j7RX+fG/t4zcmsoP7ekH+WQ9qNzSXuUc/RP4t3/9coPr
28a6QB5/9vHyPdp3dfrRV+CXDHtz2xeGtAv5p5/lzgd+5+e6X849dK/zCjkH
v+uYB9vvdV6rkFvwDseO+9eA0IfV8d2/n/zPi1/bsyLkmfYf1gya/VLLerFf
hz64e5t379wi5DPaH7z/q9MvGFr4Odo/cqvtkU/9LnKo9CNvdY93oSk/kSvl
G3pS5xH5Uf4jJzqPyInOO3ICPmGrsw6bNCf2u8D/4XoMeQC/85dnBvVcvbDH
wIc9dcLs13drE/LA/MMH5pf/7/tpq1eO3WR56CXad20zevzMA3+L/Yv2O704
6d4rqhfHPGb6Me0n7GChk3nRcTEvSj/zkuGbKd9Yd/RzpOsl5gn8pJKeXxj4
Vbe3qBrw9mqhn8Eb3rnztNoJhb6tG68OvPN6d/xzypG/IB+m30VOlE7oZ71O
cj0M/eDfuh5m/OCsC+YXfNwmJ2+35bRvY52C/+eKudvUW/ZhjEtx5lf7Yb70
u4xX6WS8Oi7GC73tfZ9ivODsU2U/fUpqd/T2tc92+CrkABy9QT+Me5Lvj/Cd
9sgt/dD+INdLtAdv4PPOeOjnE+cPOO3fL/Mz2vdd/e2ua3f8V7QDX/OIeZPv
vWVa/M7/r+M486XtacfPIc/fO36np+fSj2W+a7n2+l30cGa8puNFP2f4bDpf
tFc+I1cqD/Sj84W8ZeTKVB7K8YpCrpBP2o91u6scr6hKuw+449tpr2h8oyq9
uc+tZ7zx9XMS/6xKHV57YK91ui43kU+DHpFDy8ihqRyCv19a19Xx3T/fVbNt
9+Hfq1wZ81uOe1Slz7849Nx1uv6ocmXISTkeUvQvcmUZuTKVK6Vf5EHGu9CU
nyIPpvKg8yjyYCoPOo8iD5aRB8vIg2XkwVQe4JPIeeCyXgJnfYlesk9K+j/k
wVQeaI9+EHkwlQfal/VPyIOpPGh70UvxXdEzQb/oExlvyIOpPCjfRB5M5UH5
L/JgKg+0R8+U48ZT7IBb7/xhdtsK3b8MPVOOJ0+x1zq0v79x9/oST55iX//2
Y5euJ0R8LPCj1rj53tqnv4j5At/t061v2rHP9JgXbV+O9xb9l+O9BT2iV2O8
oj9N9SfzmbFnLGPPWMaesYw9Yxl7xjL2jGXsGcvYM5axZ0ztGeQ0Y3/aSWW/
OHDsXvHvDD9F7HYr29thrxp2qfhxIf9ix2p70/7FL4t+xG4P+sXu1fGajkvs
YVN7mPY/S1wIHL9M4lGm8SjaZ/wswx+RuJMRNxD/epX5or3GncA1vkQ/yJvE
l4x4i/jXJv5ytJf4kml7iS9ZOb4U/p3h30l8yTS+pN8VP13HZTou8d+t7LeG
/2j4jxJfCn6Kn24SJzGdF/HTVa5M5138TRN/01TeJC5kGhfi74hTSVzIMnEh
07gQ/UjcLHDibBL/NOJ1Euc04n4SFzKNC9GeuKLEhUzjQrQvxy0jLmQaF9L2
Es+M70rcMuiX+KSMt/ADNC6kfJO4kGlcSPkvcSHTuJDOO3IC3mtJuxdG7dQy
5IT+JD4Z7cGRE/Cptz9w0tfXx7qIfjTeDk78nPmN8wLfx5nHwG2l/cN8Kc58
aT/wX+mE/0oP/Ff+SBw4xiXxW9P4rfJT+BzxXpmXpPPC/5/vuPA/Kf9p/2+X
H/gP/oXHtVin4M2X3LTG5Re2jHUKfs+SN1//qGqV+UrwGZz22J8yj0nmMdrv
5f6LzK+2N20v8670mNLD+tVxsX6VDyInce4jcpVUrpTPIldJ5UrnC/nReS/b
twvTFJl38D5lPRM49gbzDn6lxyGZd/BGd1SePbttU7GHF6ayv1AV+LruB5Xt
4QIv28NFP8yLfpd5UTrL9nMxrrL9XPChbD8XfCvHPWrT877vl+MVtQk/pRxP
KPByHKDoh/mD381crtjvNH7LvgY+9eeXN/9/xh/xGOLGyJX2X867mJkGupyX
8y5mBp/L+RIz01aXTZ3SsebLoAd8nfFrjTvnz2MlX6JoX85zKPov5zkU9Ijf
Kus0/NOQk3L8qlrOd8Jv1XmJ9le6nVmOa1WnXZz/5bhWdfqTj0v834Q/W5aT
6nRM3X5xKvvFVdG+HK8IfzmV/eUq0/ZlOSy+W45rKf3hdwd/yvEu5UNxngz/
y3Je8LOcl1XMYzneVcwX8wifsN+YL3DOg5gv8PK6mBk48gkd4Mp/cIkvmeLw
WfuBz/pd+Kl0wjcdVznPqojrwjflj8h/2LEi55aRc8vIuSEnIs92TFkOA687
7lqt8T3TfkQ+47sih0GnyJupvGn8U+Qt+CPyGfEx0ZOW0ZOW0ZOW0ZOW0ZOW
0ZOW0ZOmehI+NSvZaXGeaFeV98eIt7Efyb5j7Duy30VcTvYjQ54ZV6Yf035k
/1I6TemUfc10X+PvOJ8Vu8gydpFhD7BfqL8v9pJl7CXL2EuryInGN8SOijgn
fKZ9+Rw87CvL2FeWsa8sY19Zxr6SccW5uem5ufJHzs1jXsQes4w9FvMl/o6d
X7aTA8/4NZbxayzj15j6NeDqv4Crn6K4+B2W8Tss43eY+h06LvEXLOMvBN+Q
c/jaft6SWdd91DzyD8EfmNW37+UXNow8T/Dxl32z+sKmS2P/Bv99vcHT+kws
7nuAd/vlu37bti30g7b3/k37J/+wbnpqTemHTuRifuOPW/z2WdBvipfP0WrT
mtIPcrTFvU/9csHQBtGP4uVznKKf8rnMnPSg018+v1gFT3x/nPOhvL/XpJ+d
/rI+r0lbOj1l/Vng5X2w6KdMf/HdMj3V6Tefr3L7VfCwo5h32mfwsB8y/SvO
eC3DH8vwxzL8sQx/LMMfU/4gp5n5VTz2U5ETU1zk0DJyqHjESzPyL3joAcvo
AcvoAcvoAcvoAcvoAcvoAcvoAcvoAaH/Q7t33FrfHDxgaerfZN4Fs97FzpgW
+BU73Xtc22c5754d+PwNn1o+s3ejynTwahsN2PTnwJ/YcfqgLRu3rKSfSWf3
fXfFit/SD4sfn7ciNaisvWFmr95Tltv6y6YOG9H7lzTsyK23+e7JppW7rnvI
MZsestjna0b6svGDFQfd3Cjar9wHJqSNR134xvl958T3GMfdTj843/+r0w8d
4LOdHtozvp98XOCM70kfF/RB70Snk/FAL+OCbvCNnH5pH3zw7yXlp9OXlP9C
T4Ie+W7iuz7+pPMLrvPl/E0qJ96/af9Ojyk9Pl7T8fK7yoPwP8F/xy2DM4+J
eYQOlSv60fYiPwn5gU6VQ5GrhFw5borzXe1f5DmJPNv/gYf8y3dDzoV+g35Z
Xybry3QdCT8Nfsr6tQyfdX2Zri+Rh1hHIp+GfIqeCVzkMNap6B/LrDvLrDtj
3ck6MtaRrBdjvYi+tYy+jX5kfYXeED1sGT0c9Mu6M113/Jx/fu/5FzxWEfIP
fvDzi17fp6pxrCPwV9+7b4PV124e7UNfzbnp+rYzi/XI3zXpd/cvteu3iX6i
js38+Wd//X6jyqtefn73KSN+jf7fuW/h2g1uax56lf4a9v/Xgn+9u1pl1R/7
2bzALz3g5b7//Khp6EPwXj8seajPjvUDxw/e7pJ2m3+zTcPQk7SvnP7JvMkN
F8d+A70tW900dd8TK0IfBp2thr520/IZvi8PDz0x/9OTWr88ZHrMO/2cW7nF
rnf3WRbzDj7ktZ5tvhpSHz6EPrj9glHzzz+hTeC0H7Xoro7H1W8XeobvLmj5
yZJdtm8R6zEzX5aZ3/hu4/J8xXf3bNdt86/ebxvrSOUHnH7oH5x+oIfftX/+
Hv06+Nltz+w3tE3gyAv8gQ7aL3Q+8Dv9f9Vp6T0XHtsu5C3Dz+jn2hMeaFDx
TYHzd2eut82AmXe0C/kEf2vvk7caeVDbkDf+bt0un3513mONA6f9t1/8vrjz
4mK/pv0RXd9+o8df6gVO+7Wmzpiw44f418OD/uueXPHts+8tCTnM4NF/w20v
emzur8sCp/8HKtPEv79Q7Cu0n/vB/T9PeGJF4LS/7uuZW198YtgPgb/S773m
H3doEHoJfJ31v643b1zrkNvMvMR3z3I+g9PPwdPTRh/v2S7kOaNnoh/6B6ef
Kp93zpvpB73E79qe35Ue+K/8ZLwqP9CfkefAk+vD+N33q7Wdn/BHcehnvxpc
1jOBD/f5oh/Fy3HIaenCV86pGfBog+Cn9l+OQ05LyzaevsvlR9QLetCj57k+
ZP0ij7+4/mT+aD/P5RD6wf/mckh7+mnsci64gbO+aD9s7Xm/Dzz+uyS4gdOO
7zb/aPjSK6rnRLsMHj8nN6n/1OFb/qS4gbO++H/6EdzAma8MHyzDt+gf+RTc
wJlfna/yucCHaY111r1h9NuxT0T/N7j+EdzAkXP6Ge37KfLAuMGZd6WT35Wf
8EHnne+CI2/sL9hf+7o9gNyCYw8gV+DobegEV70N/nxZrkxx5kX7YVz6Xfis
dKJndFyMF3v5AreXyucFM2xbt5cYL/g6vq8xXnD2NehXHPq1H+hUeqDT7T67
zO092mfw8COwG8V+MPSt2BuGvYEchn4VPUz/b/u+L3aCoefFrjDsCrEfTO0H
cPgmdoVhV4idEHIidkXIiez7uo6iPXaC7PvGvi92gmEniD1g2APg7Cd/8X1E
7ARbR/Y15bPYA8b+K/aDnSX7rMqD2APG/i72g2E/iF9j2BviBxl+EPJDe+xe
5EfpFH/HMv6OZfwdw98R/yX0gPg7hr+D/snNO/3gv4CzD7R3/S9+jeHXgNN+
udsDfE/Xhfg7Nqpsd4Wfy/oVP8XwI8SvMfwa9D/fxV8QPyXmS/waU78403/E
/fCP0AO0f9b1DPKg46I9/eDfsU6jf/E3wfFPGWfmu0V712+0U3kWv3IV/uh4
iZ9z/nDXqb0uW/5xm5Bzxjfxincf/vLBtlG3hPZPv3rC1bV7tyAOE3bcI9df
se/Xk4t6Jto/+oT2Qw45pfau3dtIHlRttC+fa6yKE+9/yunBX+C89PuT925W
r6Lwf1mv6zfcbPj/5L98X2yOPVUaV9BjfFf4Zsq3kPfjt9r2wNWCb9EevkEH
7Wu6HfFNv01axjkv45jl9BOXQX7Hb3HXXy587HcTOYw4g9CToEf6T/QvdKYM
nQk68WfqnsfZSeWBc2H9LvYB9K/n8wKu32Wf0HGBq9zCX41rIQ/g8LMcr16U
Tnp8bttzbyziYxm/tVhH2/77gK7btdP9JWX2l/Cj+Z1+tj/qhFe+faPwZ8HX
WGPOvh/0LL7LPO/mfGAfof3w/fdcZ5uO9SI+lokbBJ3sI7LvrBKXoP+PWvc6
7arTivaKo/fAX31h4D/Pbroi7N1MXCXmV+z5aK/7kfKH9spP5EHnC32aiWuZ
ygP9w3/kTfaviHeJ3RvxUux58DNbfp/adW8j5yML0nOXPvt6y6L/iG9g9/I9
pUfs4aT2cNyTu3+/LR7btJ34CwvSDqdOeK1fdayv6Gfnhxbs/NIxbULewBtt
tfPnW7wb8x50Ypcyv9oeXONprGv9LrjG98QujfFi14J3+OJPaw66pa34QcV4
y35QwR/kR9ed2LFJ7VidR/ROZp9Kuk8xX+hd3Td1H6Q9/XR89u9vD969VYxL
+ynrn9npUdfb5XVU4MhnJp4Q+ZV3vPHQAy+cu1TjBikTN9C4XPTT9oAWx/xy
33JpX5WeOuHkO+44oogX0f/UqY92TRU1Ei+qSgN/GHHX39vPiHaZeE783KP/
Wcc/ffWsJHGMTLyoKo2a9OHulTPnSfsCRx9q/+U4UlX6+dGrB17Q/4eIR2Ti
YKbjlbhKxNnKcaSCb+X2BZ8lDhNxP4kTGnEnkQeNIwWeiR9aJn5odccPqywj
D5aRB4M/Mr8m/A86NU5I+0xccZX20JORB8vIQ9Aj82siz7HfDpN4VIZvluGz
Kd9EHkzlQeN+Ese2TBzbMnFsy8SxjTi22Pkmdn7k/aI/oQf7cbrbjehhxcW/
CHte/AjL+BGGfhZ7zNgXZF823Zc1TiL7smX2ZdN9mXmjf7HPLWOfG/a57L8a
p4r4THl/D3/QMv5g9C/7dcTTZH839nfxHy3jP8a4xF8If0rsNFO/QOdL/Iho
L35H+HdyHhRxSDk/NT0/ZVwZ/yLiWnJ+apnzU8ucn5qen/LdjH9h2M/iR5j6
EZm4U9CJfyHnoZY5D1U8vpvxLyzjX5j6F5k4W8wvfof4p+F3y3mo8tmUb+J3
BJ/lPNT0PDTkvG5/JOLech5q+LOSH7JKHCwTF4o4A/6v5IFYJg8k4lGSd2GZ
vIuIg0meQ9Ap+RIRT4MOcKVT8yIYVybPobgX3KnNAcPebqpxv5SJ+yWJZ0Y/
Pd9f742hHeI+e7Q/2dc1OH/H/NI//cx7qcuIjY8r8v9p/7z7C+hz8NWOuLbJ
slNahz4HP3mvyh7/Hl3kZWkei8QnNR8m6CFujF1IP7e7PS/xTMm3qTJtz7rL
5PMU98VrlzYYsWRZnDNl8oVM84XQ/5p3BE77zh+/12iD95trfDXymiQeG/KA
/td8J3D6P8v9d/ZpnUeJ30ZeFus/Iz+m8kM/fPfMSx9p+bfp4W/G/eWN7j6j
9W77F/UukPcdXC+BI4/tXY+Vz0kXpqevuKvlP68u7l/Tz2Fun4Dzd9gnyK3m
mSCfmpeCHPLdhXtuNmXpKUUdMb7b3u1ScPp52u3Y8rntwrTaY8tubvdyUa8q
049pP8gn/XzWvN+Lv3WpF3KYySOKfjgfRA5pv6n748hP3Cv3uATyk+GzKZ/L
584L0zuvLLnmP+OK++OZeTed9/J59ML0Q/27px7+QHGPDHvz2dcvSpd9Xci5
4nIunDj/Ffs8TRc7TeMVYrdHezlfTnq+zPlb5tw8Zc7NU+bcPGXOzVPm3Dxl
zs2TnptjZ2XyGTT+GXgmnyHiZuV7ghMiDlyOF32YXnN7ifmjfWO388v3Byek
z57qWH+/nwu7DjyTLxF4eV1PSFPcn2X98v/EPdhfMu0DJ54Drv1InkbK5GkE
P8vrseCD5G+kTP5GzGP5nuAq/DflP/POvZMrNn2ny5t3F/WU4fc4t3sFN3Dk
gX7urPrbvg/9tchTB1///R237rrP3OA//ZfjFYGvEsegn3kNrv9083uKepqZ
fkz7Qa/ST2rfa4veVd+Fn6DxQ+aL9ktf3KFJxTtF3agMf0z5I/Jv8F/WS/g7
si4MeRC5NZHbaK9yDp6RW+3HtB+RT5N1GjjrVPLELJMnZnXniVUZ/Be5Vb6Z
8k3yDy2Tf2iaf0j84BS3YyUubZm4tElc2rSfch2q2fbykDf+cex5TeK7xBWw
qyXeHnEGyfM08jnlfCTiGJL/Ge0lDh/9y35q7KeMS+lkXOA93vxtm/vqFXZg
Jn8m4kicR4jdaGo30g92gtiThl0BH+gf+sWeNLUn6R97RuxMw/4RezLykcDp
/4dnRvY6actVzqdMzpuCzmpfL3JuZZJHHbjkTcV3yZuSfGOT/O1or/Yt7ct2
bNi9VrZXw741tW8z/Zj2I/atqX2byXOLfrB7xb61TeW8SfPu5NzNMuduEf8U
O9nUTs7Ij6n8SF73KnlKui7Erja1qzPrwnRdiF1t2NUSr1glbsP61jgD9OIP
SvzB8B8lzmCZOINl4gyhZ8Dp50zXMxJ/MOIP4LT/p+tbiUtoHlrSPDSJS1gm
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
T4l4BfKkcRu5B2F6D0LjQnJPIeJI5XjXzHTI6YPu6Ni/Sex3K/k9JW36xbDj
T2w8PeYPuy6d1uuHj/ZcLezSuOf3n9GvHH1t8U581NMq46Z4OV96QZr90Ust
/jy1deW1G894a8WKJeFP7fvaMR0rOreJeDt2LOcRzK/Tb9Bfzkss/K9yXeWf
0kF9/nLr/+ISfPfnP+bnxzT4yx373ftqwU/G19fph198fzP/rrQ32uPPq51c
vj9b8Bn/fcjDk5cePGC+zeh55lGHH9s61gv69etLN2/8zNWfhr4G79L/xOt2
jvePWBczbNb2z64+78iBoe/gp/QTOP3g58KfF/a678b9Tos689HfNO+nrP+r
7HDvh3gF4xq27uBeBwxpHXKIX/PBdg+8+cThHwRfkNsrF93R+fhj68W9UXCb
99SC205tGPOFvuk65vOL7ziieD833mv6/cSBK1Y0iX7AX5174dG7NI26OnHu
8OWsmnnHv9C88pqVchJ249jXt6jeZVqRRwp+4xofvHX3bW0rN5E6PLP9vuHk
P9p/H/gGA/Zaf2q//+o55xv4Aa063HHYe9/aFn/8/klRz+fbvmt9UzXG9eGQ
t/jupsuG3z936u/WYWX72GfSI9d1OPCyJfblyu+Gvbquf3dDqdvDPWhfh0X9
nA6vTFoyvmHlxEyezNW+jsDvPbVq/Nz9GwTfIs/kmePtT2u1rYR+8MYbjZy/
2VXLgn7wT6f9+c3UrCL6IV7U/cdf1t64y2qVu7i+AH/ihRkb7zCpdfA/4pan
HzDx7OnNg//gUyd/cvyThzYKesD7ftOv9QVtFgY94Ls8cebvLat+tw1K56e1
aY/n5h+/2oIVwWfwyd4/fAbf0+lhXMRLZ87u89yaPzbReGnqtPbSAyd2bRHj
Bd9s6FmvbHZVsxgveNVJo8875caGMd7Ahz06fvtJy0LewHstmz7inlt+CXkD
Hz13owd6Xzor5A28yUuNzh42pCb4Az7K28Mf8PO8f/gDPtLpgT/g7zj95Xmv
SZ32mrV7h371JD5ck244/+IJU2c1FHmoSX2WTNxvq7YNRB5q0gYnXlybdlpq
ZXmoSacefctPuzX6OfgDvv4tO53w1+rJVpaTmtR+w3subbTsw1SWk5rU8qYH
RkxMQ1NZTmpSG++nLCc16UT/bllOatK6TmeZD9Wp/4b32ytfFvsL+Jojj93r
4aMqhA/VqeVjVxz96c9Lhf7qdNEb9489qNtsob86Ld196i8Nln0r9Fenj++v
mNKwx7upTH91erzrI50+vuProJN9+5ClZ27y5c0L47sVpX/z47sg/3mnx+9d
Pvkh+ge/YeyH6dQjPlU+WIYPluGDZfhgGT5Yhg+W4YMpH9jXMnJrGbm1jNxa
Rm4tI7eWkVtbo265tYzcWkZuLSO3pnLLuQ/6TfSYZfSYZfSYZfSYZfSYZfSY
ZfSYZfSYZfSYZfSY1a3Hai2zf1lm/7LM/mWZ/csy+5dl9i/L7F+W2b9M96/I
i6h7f7fM/m66v+O/ZOwrw74S+8cy9o9h/9A/8caBbp/Af/Bqt3PETjPsNL4b
cc6N6n3fatHoffhunOO5nQafwfd2u07sMcMeg85i3ayME/Ldnm7XbSzjdT8m
LVn9/P4Tr1wU/Yxyu3vRwk1vGLNhwbfnM3YXdvqdN9bYwnWLeWl01NB/9J5S
m85Lf5rx8gato5+f3J65WuStsbdv9Vw/22fBouDDBu4P3nZLqztu3apeJXxg
HlYf0WGndxc3ju8O+MNvm5t6rDXzpyG1TWO+at0fGfbrK7vetKRFrBd+1pva
YFC34U1iHt3vSNtfeUbv07+vL/IzJ7UQPXCvf7eTbfP9mO5zgv4xHs9c9PJJ
W427Y2HM4y9Oz2q7pU+nHFkv1gv0LJ+ykh7Gtd4ffPg2/X31dw9qeVH9GNfV
f/iF36UhzRcdd1C3RjGu593f+aH+tS+fdkS9GBc/r31ul71eabYo5HO+2w8N
RM9v4N/tdv7qtw+8YXCM63CPrz7VrOmbXefXxLig54lj5t/42ue/hlwd+kf7
z9OX153y6adrL4nv/uz2wIWynx7p7b8ePPPCwd1qYn8Z5nHLvdd/6tzuGz4X
+2mLP/y4SenatR4/9K+7fxff/fqP/p9Mdw466deBb6tdMeS/bf7376f4bsOn
VrZP+23WvduDhV1xyR/z/u80tt8pT3X+7LPof1PskfYr1xH9zvH9/RIZFz8H
XP+f+Q8+9l2MqxvnV+fu3ObzjuPju0/+Md53remQu95p1/HL+O47f8TZptv8
81848suKeiEPo/6Qt6/s+ddO2PPRDvVCbuf6PttR5nek93PGb48f9q89q4Ie
fv768FuXd9pjXMxv8v5rRv97xuufzg56dvsjjvKDdWw0bccD9i/264n+d+19
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
RN6R8DPBT9b1RG+/l7cHf1baS75WIl9L5jExj/Szh7ff3NuDT5D2kp+WyE8T
+UnID/oNvv7g/ARfz/FZjvPdKu//F+8f/C3v/3qRT8/TS+TpiZwn5Jx+tvH2
jbw9+GPefnbd7S3T3mgv47XMeC0zXsuM1xivzJdl5st0fl1+LCM/sX5lXVhm
XQQueibimbJ+LbN+LbN+LbN+jfUr69Ey69FYj5IXbeRFi9421dvQo/r5aqFf
1rvpeke/kRcHTp7Vqcc03vm6vs0CR5/8/ZIu9593e7GuPU8vkacHTj7b9Ff6
fXfLJ2007pqIu4Lzd72unPbkQ1u0Cf0GnUs/XpmPBw6dM5666s3XTpineYCJ
PMDwa5ye1xfv32r5gmK/283zzXgfBLkhb22+vwMI/rPjvzkO31s4nRs7P8Gh
s7vw088L0o5jqx85eo22mj+ZyJ8EJ+9rx8PabfDkoIKftH9m7YqZA14o8uc9
TzKRJwlOfuBoiSeTHzhWcM/bTORtgpNvtrPkF5HPtnzDfS5r07iiUvI8E3me
4ORfLTuh709n7l3My9XyLhv8Z76m+juY4OQN8j4m/D9K5BOcvMEal0/64bu8
EwHeV3D6ucfH1dvnC5y8tZ18vsp+9LSwf8r+8rT0+FfHXZSOqoh59LzuRF43
+AKPz1T7+TX4LMe/ENx/7kX+ubS3LyTP4WTP33juhUPX6F01W/PVjXx1aW+0
Z7y9Pe/lR3+PFfw0x3mntexHfJhO7N/gt+Oqiv3ra8+v4D1x8OWCS/6/kf8f
es/Pzb/ve3n3E9oX8uz3AuxC4fOZHi/aw+OKfJd8g8P93S7wFx0/0nHGdaDT
M8npAV/N6Znr9Mj9C+P+BTjn2vUumTJ0w8UNJK4ywz7e7uZuf9q+WC+cd6/t
76SAH+E476dAz7r+3Zv9u+DX+ncbync5L+b+Czjn1KMe73DwwEeL853+0h58
gbcf4+3lXo9xrwecc8nevl+InjT0pNwzMu4ZiR429LDk2ca5sOhbU33LuTD6
EPx5uV8m+tbGSn4s57zoQ7n3ZNx7En1r6FvJp433zUWvxvtB4MS1qPPGvDR0
/p/v/Afv7Py/UPjv+76x78t9MeO+mNgVhl0h9oBhD8g+brqPd5b3XGR/j/e/
wImbUe+OdcHPa094oEHFN4X+nyw488i58Ani73O+Oc7tE/rBfuM9ZXDsyWcc
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
KOig/SeO047/H+H4/wcyrMym
    "], {{
      {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
        GrayLevel[1], 3], 
       StyleBox[GraphicsGroup3DBox[
         TagBox[{Polygon3DBox[CompressedData["
1:eJxFnXn8FdP/x+/n3jszd+beuVN2CiXZ1+x7RJYoshWyJPuSfV8ie5ZQdiIi
+75vlVBZQ8gekSRRSCK/1/PzOt/H7495nHPPPefMmTNnznkvr/f73bH/wN7H
l0ul0u95qVRRWqSl0uyWUmmnWqn0Zr1U2lBlqdJPdD2YlEo3F6XSVOUfVv4M
5ac1S6WTolJpO6WbqWxT1X8vVjvluyg/SfkvVX9L+lb6g64n9d+tavuj8k8r
f5vyY3W/53XflZUeojFMVn4T5TfQ/+ur7UT186/u0VX5tmo3XVc35ZdQOlP1
2ukh+indSvW3VflHqv+p6p+lse2itKZ77KPylVX/H137Kt9Z6Wy1WUltByj9
UmknXYcpP0f/9VCd5ZQert/baDzPq+/f9XsPla+odK6u3ZVfQWn/rFRaU22P
Vd1XNP4XVX8V5f/Uf71Vp4PSWRrHTsovq/wWmuwNVH8P1dtK+Y2U31P5+frv
Dd3nTo13kfL7qf5qSqOqnkv19ledeeq3r9IPVS9Wvb1Vp5PqLKdnXkr1Buq/
9kqX03Wi8mep/jFKv1P9I5TfVvkXE4+b8ZfVx0tVPzvPuWJ4xtdUZ1zVz7Wz
yut6xtWVP7rm+3HfBUrv1/MerP+nqv4LVc/nVi2ea+Y8U/9llbdUPe5YabXq
Z1lbdXsoPVT1BtY8H++qn8N1r27Kv6L8h8ofo2ebrHRt9XmQ6lbUZ1Pz0aL2
/+h3rv7quvqrTSelHXWdofxdajdQ12GsSbU9THUbanu0+jpQ/3+s/heq/GSV
76/386ie5SiVf6PyfdT/Ccofr6u7+ttB1yvKL6W+2ig/QPlCfZ2rtluoj2fV
9nyV/aG2HVWns+qcpd/lRql0oeocoP4X6r7H6b+PlLZR28Eq31JtH1fb01R3
ltrO1zz00nNdoPRu1T1D1wm6umo8+6lOH12LKV9W+h/fm/LL6kr0+0e166Pr
JuV3Vr+j9P9DSg9Rv7coHyv9TuO4X9/FIUr30X0HqP71utdR6mNf5W9U2wNV
7zrmWWk/XdeyTpT259tVPlFa0/MlVb/7tfSMbdTHw7wX9Ttf5ZnS9VS+uMof
Ufkayt+utrtpPFOZa43hSKWzdY1UeW+V99V4XmddqM2e6uMUjWmCfl+o8kdZ
1yq/jDnkGelX+Wd558ovxneuPtsqbafrArXtqX1tQ913SfYXjeEypcNVP1F6
hdq+oHxn5eeFdcX62k71H1R+H+V3Uv5x1obyL6jv59TnY2pzutJHNYYnlN9W
dR5Qnb1V50CN8z2VbaQ+x+vem+oZXlO6gsazs/IfKL+30jPV/h3V20L5zXQ9
pPxMlbXXtTzvVfdaXvkVlL9M95nNu9P1rvKX65rDnq06lyo/S/kHdL/5Sgfp
vXyrMVyh8vv4TpVvqo/rVP698kNUPlrlyyjfRuXXq3ykfs9Q25OUv1/5P5Q/
T/nTVecn5U9R/nKN8T/VX6jfL2lcc1hfqvuO+rtG1y8q/0Dlsa6G/rtaZQv4
1nSNUdmrun5WfjH1WdX/V6jPR9gfVXa+8o/x/lQ+TPmd9FwPq/7f+u9s1f9L
6QUq/4K+dS2peofp3W2n9CWVd1CddsrfpvwSfAvKV3R9pXxbXUsrv7rqdFJ6
t+r0Uf/76spaPKkdVaeD8j3V5+JKh6vO6irrrPwS7IfKX6fnqSv/u/Jr6VpF
+Y2Vrq50OV1/Kb+urtXY93WvlZSOVD9tM+/tJ+v5mpn3/BOVzzUxl+n2W9V9
xnFmfaix3Kp18ov6uUzr5K7M4xqh/29M/Ry3Kn+B/pusOucrbarNI3o3S6nf
NsqvxXjZ39XvJurzdd3nb9VdoGsNlV+q/v9S3bZqO159Xqj8CI3napX/pDoX
qbyh8vkq30zlt6n8V5VfrvKvlb+F81xpr8xzc6PGc3viubxK6U36L1adG5Q+
ozFcq7Kn9d09rTG2V58bql4blW+lsX2ldNvEZ8T3arOM/l9H/2+v35uqfEel
n8WmKzg3P1d+Xc4VXTvo97X6/Qv7pK5l6q6/re61on5vqjp76fdTKr9G7aer
fHjqtXOTfm+Z+Oz7Wn301XOurfKHVHaQ8hsr/xTno/rZRPk9S6YrOBO/iT0/
3HO45uAq/b5Q83OyfvfVM56v9C3Vu0jPfxXnteZtc9U7R+V3qO/OWne78f3r
97rKr6PrXOXHqs9TlN6qOuep7WC13V1tL1D+MuX3Uv5q3eti5U9VvcEqv1L5
vipfTX305qxhP1L7XXT/ReqvC+9HZbvq92Yaw9nK367/v1A/u6nsZ+Wnso+W
/fsFrZWllJ6rOVvUNL1zcOE60FcbqL89dL/D2RdUfo36uVxjOEP/Pc8eq7bn
qO1d6vd9ziXVu1z93Kw6h6vdZcrfqPwA5YeqbT+NeZDaHqzfvyvNlU5Qm8HK
36k+Oui5ltF1mn4/p/6XYD9Q/1eon9vUz9Gq30n/r6DrdNUZpPJLVL6nyp/l
3FH9s1T/YpVfo/J+Kl8+8fvZWP1vrnaHagwXq+16yu+j/HncW2Mboetx/f5X
41lWZfur/iLN4Waag+egGaBVeA9KS7oGQbuxZnTfESq6gftrjq5UfmuN4RuN
YXX1+bDSTP8NVfniShNdc9TuQtVdoH6uUj8tSturPFb6oMqXUf5G1d9O/fyc
mubZXf89VPN+fKnaL686dyg/nLOr5r13sMqrGnNH1T+U9650a/W/JTQJe4t+
91f5xXrOK8s+P5YofO5vC52s9qdAUyj9t2a64gql66v+LSq/V/UOVNldyj/M
eQR9xxrW7ytVb4TStjXTHpyPbZXeqzkYpetP6LWG6YquuteJej8Pqv5oXQep
j5FKHymZ9rgL+g6akHNC+aWULuLdVE277FF3nZLSlfRch6hsqO77n65Dlb9O
aVn/3aM+l1b+L9XZW+WXKj+46jORM+/bms/We5WeWDUf9B30SsPr5YXC6+4n
lX/e4u/7SdV/W/kBVa+9T5W/RelnSsfrOqTqb/lj5Y/Su/tCaVf1dZLKv+ee
JX8fP0I/6zpfdf5V2eU8t+oMLfv8y1T+jPIT1Hairg9Vd9Oa9/LndU1p8bf1
g9JPdE3Sfx+1eA9/RM++tPp4kbWpOl9Ds9S8fzzBfqXfC7T+p1ZME3yidErF
dMPbSt+q+My+u2Za4zSN7cfU9EBPlX1VM40yCroCGkDl00v+5p5S+bv6fW1q
umAotERqeuEc+Au1maTydZSek/rMv1jl39RMVzys9NSq6Q1olPfV57uB1j0j
NU1xhurfUzONdJbye0HPQoMEuhz6/Ka66e6DVD6QNupzSfXzKzSQ8u2Uj9Tu
M/UzU/+frH7OgodS+W+qcyrfksqfVx9LpC7rzTeuPWUuZ4Ty+2gOE/VxEN+1
2v2p8t/gD5Wvsc+p/NzEdNyLnF3q5wH9d5bSpdTPH6q/t+p0UFmq+odQv+ry
X9XmTLWN2KfpoOJxMierJn6/L0M/qP7K+i/jWZQubDGNtVzhfB/1+YH++7vF
a35eZHruB74r3rP+O1B1Bqemc1fQfLwILVb2el1C45zH2cp+o3utov/q+u9b
/V6g8n2VTtf1r/L7KX2EdQR/DQ8Ej1lxvQ/h21q8tgep/COVz9fvmtK/lM5T
+dI5TIf2XrVtC/9fMX3zQGK5xAh9x20bfs/36P2+rr31C5X9oWedojrHqfxU
jf9otd1XbTctmyA9QcnVqn9pwzwga+MJ3WsX/T9EZZ+o7fGsc7VdRWPbWuWH
q979qrO98hdDuzW8lm5W20dVvjN7o8pG6l7H69pCvyer7dK6NlG+S9087t2q
+6nK+mg8W3HuwJtBv7Ovq/1JfDcquyQ1b7ES35T6W1JtjuMbUJ271O4j1p7K
uwWZwNX6faTS29V2G/1/RIt52lM0Hz1VZ2v197Tu3RN6XXU/U/mJyEiULq20
V8V87zK6z4iyed6v2P/5VjSGe9X2TpV/qLb3qc04xlDz8yFvOAaagzXBcytt
0bvYnX1Y+Xax+4WX/pIzQvfqpv/aq3zZIKPYMjM/NYb9IDVvtIHy+1dNV8FT
PaR0LvQ/dGKg619GXtIwDf690j2REei/ddTHGRrzMsyN0lv1+zuV36L0fvWz
IXud+tkIHqHs9kfqW1i/Yl7i0ty09+vq/1+Vz9Q1gzlS2iXwaF0Sy6M+gC7L
zauNQ17UMA3+Gmeo6v8AX8c6q7rOSmozCrmKygvde6HqfBv4ljvV5wbwnqxb
lW9QMS+xRWH+ZaL6HJKb/3hH+TkVl6+qNpuobXelUzWefTI/43p63qMbppkn
qf6f7F0qv0vpvaq/mervq3sV4fv6R1eu/Czd+0/kAZnnqIvqn677rql+PkKO
1zDvMxlZoJ5leNn8RR+1PVNtV+X5Gy77QHWmqM6KuraEVlc/ZaUH8K2lPiPe
0BiG6F4vqf5qNdOVb/Kt61pS/T1SNq++fmZa+xbVeU1tx6hsLejN1GfslsgM
+S50r5e5d+ozeRuVd1H5NlXLC9ZApoSsQ+V7VU0/I2eAn3isbPnd5aqfR5Y1
bBHoVeSSG8em4ZFTbJSZHr9N/byaWj60hvLL5d6ruuo7+Dz1udyt5n305xaf
+3foGb9S/g1dufKLSpZlHVk1nTCROaz5fF4PeULNtEYXpcepztPq6wPWaM1n
7IbQ86lpiR2Q+VV91nO+Pls2PfAFPLjG9ovyu2v+/yl774fO+bNsGgPa4u2a
6YitlU7PfU7uofpv1UxrbAHvX3E/nPXva062Vvoj57bmbKeKZXEPqe1OyCzU
du3c++I5yp+tawdoqLrljPBW09THGvq/e4v3xB80d4PUV0+lbzDfutbR//eo
n3XhqdXHZoX35/ORLTHn8NfKX6z38rj66aDxrKX8wyp/BZoduZD67KW0S+71
eK7qr5+775OU3yD33nweY9TYBsAraWz9dY2t+h6r6dpe/R+s/7onlivO1v9d
oM1Vfrh+D9DvCew1KntH6Vu6Niav8Ryu/95WeoHu0Vv1r9M8nNWwzPNK5Rco
fyu0k9Jh0HAqb6d0E41tW5VfqPL/6t53L1c6tuy9d2/WZ+77nK46p+jqpbK/
VWfz3PvuRfATyt+u/PvKL9R1m/LvNdzPvtCq6ncH5EjKL9LzLaOxDlH+P+W3
UV9XcZbx7aeWg37Omak6uyk/QfmNU7//z5RPC88P8tfvE58t05V+pvnYQ+tk
O93z37rnbGOli6t8t3Ae7V3xuYf8GhkoZ9ypqre88t0rlplullrW+4v6bKe2
21fCmZJa/vprYhnrYLW7DV4j83n+hcqPUr4fe5ryT1XNC8Pnrq787hXLc/dT
OljpBboWqt7JSn9ALqryS5nbxDwMvMxeynfTfS9W+YLEvB884Eill6vsdF3n
6/cfda+ddZX+pHvtVbHMF74L/muU0j5qP4Q9Qc96aMX85oWcc5zhnGusFV3n
6bpI9Xrovr15v/BcFfOS8KV9E4/hX/VzBPwxNIzqdG9aHvMt+gjV6YVMRnUe
U3475acoPzMx/XyO6scNjx9aa4bKz4EfV3nU8DPdovJd+Z5aLO+el3jOz1ed
09TXgbr3Dvr/Y9W/SHV+VPqz6pyHzKHmuWMOW5At678L4L0S02C8R2ij0fCt
+v0U55H6PLhiuq0H+0qL2zyo8gd0rarr9si0FuvjAT3vmUofVDpT/U/RPX/R
2pyutpeo/Ey1/azhOa6ozrP6RkbCW6lsasNz+YLK/kI2qrrPqv3XGssBFdOF
t0WmM1l7n0DLKf1J6Z2R67AmltP4f1CbZZWuxBirXmOzGl5LRcPjgcZjjk7L
TC9ti7y24fVwl+a5k9quWfW6/Bm9R8X01l2R55m+RqntzspvAu2jOt9WTacu
praVqnUJExqWEyGLe5N9kO9C+TP1nOvx/Sr/mOo+XvHvn+qWrc1U2jWxDmg6
52piedt3ytd031fRDSitq97GJdMew5uW733KGs/9nX2j/NaJZWzfqu3GiWV7
nyr/RGId38fkq5ZlMdYnNZYbyh4rOkRkdDOg59FDBnq4s/pfWXWO1TOtWrbO
C/n+mLL31c1bvOdt0WId28Vqu03F+qmJDZf/oj4nNSwv+VX5jRLLJj/ReJ6v
ev/kv7Vy0/hnqO7OTcuInoV/zH2fn9V2ReVvRlagOu9pXq5A96H0GWQpZbdZ
E7pO+eNU52WVv1j1Myyfe196S+W/1S3PYzzIVOmzp34/WbNOE9lUB63pufo9
Tun2TcvudlC6X+w9Djnsjk2nOyndSPdevmw9Je+tMzwg8pTM8/4fctO6n515
Xqrud8QaeCGM8QDkPxrfLN33e933jcxzFCldvu695T/d6zw992YV6wjPV37z
ivWOB8Z+XvL7x54X5FPH1UwLZOrnJ85g5TdCvl73evurbnoBvST1TlC70UFG
c1QtvHPWFHpA/TdT5V/DwyjdXOlDZeefQg6je9zLmaL+D4i9VpCddVc/37Am
VX5kzXOD/nRcoEcY00V6lgsj60rRpfIe+5Ws24RWgfebmJl+SKE9a97/x6uf
9TRfD6nvD5X2038IGu7T76TwWXq40p7QgGXTIkfGpiXQK6DD5r3XVecU9XmE
8rn6OKHmM/dt+An19ZXqzlHZhsp/rfxvyMYCfYJOoshMp5xUM1+7edlykqr6
Hac+eijdT3U+UfkM5I659bnDc/PQm5XNM18W+fzlezgmM899rNKWwrrcXZT+
k1v/e7PSbxqW+W3ZMN20ftl0wL/6L1Wd25Reqz53Dfzyf7l1ryOVLsqt8x2h
9KTMdODJSn+Lzbd+GWiPSUqPKEw7dC2bfthavz9Q3XlKh4IRqJgWvDoyXQGd
OrjhfX4YPLXmbZrK/kB3ozbvq89dlZa0phfTGEbxjUamGaDP+oUzYZ7GcnPk
8x3aa6DSw8p+5nPV5n5obN2nfWQ9AjqAMzPv5zuCI8h9ji+pOp83fObfBy4g
sbw3U7p/YplzXemhyMZVZ5WGzz90ndfov4PR7Sltk/j8uTLQDJyZQ8K52a5h
udkD6r9SM423CHkX5crfCw6hZnnLgxrjgIrPR8Y0MvJZDL24tOrfUPI479b/
Q1us6xqkvk5if1ZZjm5JZTWNZ02Vz9WY1tN1tP6/r2z99eFN66InKv1Kfd7c
Yl32EpnpiN/Vbn3O9yC3P0ZtR5ddbxX4Mu6lOfxMcwjI5S71kdb8LM+j54SH
qlheXdSsm041ngN03YmoCBoPupr76vcbyj9Ytuz7y4bTlZSek7uPldlPNKbZ
kc/MfRPr3COlZ7OOVSdG/8Z5XbY8+oim043Udh21XQi/ULXeHLn6ukq3y60f
Pk513yxbl4RsqJpbZt4Veh4ZhK5XdO9b9PtulW/A2d6wLH19pZ/mXnu3Nkqt
gsST9eyH6/dhGt+jKlpS6aUV63Pgu19S/VFKN1H9AYnl8Uso7aS53V5jHMd+
qPqjVP865lB9nlXxXF9dsV7rKZVvio4e+gc6XemxKr9T5SvWrBdYTH0uVrPO
/Sr0FA2vmZ+VzmCeyp67QxPrGRZHDpqHfpC7Kn+k8rcrv4rGsEfQry2m/Dm6
30C+ec3d0+pjB9V5XuVHlc1TrRt7Hpjf5yvWkSH3/Dj33Nym+qep/Oiy+cm3
c8sP+oBV0HMt4vn1XN0zyzN3RCdYeH2vzvdaeG2tqfw1hZ9z7Yb76apxPglN
VPfeCd/3Xu65fUrlA3Q9qLFOV3qarjHKv690HPSG6jSUv7zw9/+X8lcUXrsL
lD+7MB3/nfq8rPB+MR+9YtAzteReV3yPryu9pPB6/VN1zilMe31fNy/cQ3X2
a5r3RE54YNOy2brymym/rPKLs2c2Ldtpo/zmTcuKK8jrcssc/oVmU/kB8Pya
qyS3/LysOhugN1Z+tursllseHql8w6Zlyy+ofKPAs0PT9m2an91T+YOaljm/
rDqbNi1n2EHlfZR/qLDuqqKyBwrr7cq5aTZkp3upzq5qO6fs8bTJrVNBT17k
1oNfovwaujbQ/H+kdC34JuWnKG0gD1ed1cCzFMbTbJNbdo/MHln+mypfM7Gs
/GXleyj/e9Oyy7VKlmXW0SOon1VVfgKyVpWtrPxeqnNE2Vga1vkVyAzB3OWm
VdZT/rHCmJjTlV9J18oa24dKj4XHh75Sft+65V1gY24pjJmbBy0KPY/MM7d+
Ar0M+oqxqvMr8iqVvab878r/y/eVG4e0Ku8KeZD6fE59Po6MT/m5Kmuiy4Ae
UzqHta7883x/qtM5zMlKuXFvnZAJ5ebzt8yte0CehC5iDHLLMJ4OuTFzHZW+
ofGsnrjOprllCJvRX27M1tZKN8wtQ9iIPsFmqZ+9c8tufwryW2SM70aWM87I
rfP7RumOtVa1Q6mJLC23/ukHpc9nXsNt4Kdy6/C+5b7qY1HZsrAtI8vU0B2C
yUJu9pz2mB66zqtaJ7RtZJwMep2/1P5qlc9X+nnNuqRd0DVqvt5TP79qDrpG
xtDwH/if3/l2oLWCHmp7jataMRYH3Qw6OPQ4K0LDV6w7U1LqFRkfU9F/P6TW
0eyme22v8rRivcxusbE+i5TftdbKArRigZZNrT/aAZ4yMkaH9j/n1qHOYt6g
u4KuDl0UOqmV1G63yDgcZL4zVW8y9Keea1fVuaBqfc+GeqczVPdzpbtExvnw
EnbS/Qrel/7rGXvPQe/YK/Y+gy58Tm4d9i9K+8aWQaOzR4aOLB0Myn6RcTzo
4a6rWqeJvm//yPgf9G17RcZfUd5R94uV7gKvllqv11v9Da9a/8h/e+o+75fd
9vfUeq69VGd3tcmV3wPZkvrsXLE+7vaq9aroy/aKrd+l3oHIy0P5GuhJ2QPV
9hb9/2Foe2fV+ln+mxAbE3sH8qHUz7Qnsk31s3R49/ep/ucV6ziOiIxNIv9O
bFzQPejkkQ9XrP/4UeliStcrGX+0RNl8+8bh/7WV7xsZO8VcXJNad7G37ntn
ap0MeoRDI2OnmIvDImOlqJfBP5fM+7PfUH9z6PCmsUvbKO0I7Vg2zz8us15h
YdBXgMVaQ+UHVS1//kr5G1RnuP47ITV/DE4FmQJ86Gdl8+8/1YyHARfzR8OY
lx/gtzgb1H5B4T0KbAkYk/1V9mnZcuyv65Y3ICN5sur+dyt5X+yr9GmlA1T/
m7L57V9iy2ORbbJfHqn8MzXLCcBeICsAf0F+f/03v2Hevb3ucyGYRs4jdAWZ
+YR9U5/1YByOaZqOO7hsOuzamnGJ4Bl61U3/Q+NdEJu+BAMBFhL6FdqVcwT6
f+nCdF4rvceYdfVR/imlPevmKaA5wU5Coz5RMjYDuvFp5Y/lfILH0bgu0Dgf
0T0GQftUTbuCt/ivamwG9BM0OOfXc2p7fNN4zu3V9tumeUlkTT/o3lvo/8fB
NdStM0J3hC4CncTnJZ/F7yo9Rf/XU58v4B++b3EddBZgstDfoLvhTB+rdJrS
cmq6Amx5Z/BszE3uc+od9Xly3Tof2vIbnub7wNcgT50R6E8wGOCUUvT1gReD
J3uO80Dlf9VMw7yiPg5Tn+2R9an8b3ToqWnUi1S2btDpoNtZReP5je8j997N
Hs4ZDA6FvZ59HhwE5eCrfg9nAPhP8CrspdNq3oe+VvpUYTwGZ8eXStcPOqPx
oQ40CbQJ53Wk8nHoEXT9qf+/LIyFAR8ANqCPxvqx8tP13yVV6+yXVfkliXFH
4I/AEVBfj9eKVaEOOv0zoUH1rnfRc7WNrEeDDj9L5eeqfFeVD2uY54LfhE8F
kwOvOkv3PUn5m8GENI29nsy8ln2PsQ3fZ2gYzzWqv5PqvJGaBrlW1zoqP7zi
d8c7HBWZV0H2nTYDRlr9dMjMj8IXJ03/f33D+CTKR6ufSc2Ai4av1Tj3KRu/
dXZmfrVnalp9P/Y8eDRwiiXP20j1c73KVwvrm3V+d2pMJjpTcJCvqN/l4I/r
/g75Hlsy7xO3h73imbCftMm877D/VJQf3/AZd4najlefV5VbYVCtWC4wXVmg
n1hD0FOv6mqnsgtU6aOycbqwg+AuwAyr69b3OSS805cbnuPzVf8l5ZeBHqhb
/8A3cql+P6rn/TUyP/1dZj75E3U0IzPfdIPyJzeNme4O3dQ0lvrEpvlB6NIX
4bdVVo/M110V+MGm0p8y85UHpObFDwh72mqZ+bjhNfNH6GnPgO+IrOc9oexv
n3QA+Mqmcdc78e2D/43Mq14RW8d8ovKVyHhsvtUxqcuu1n1eyY1tO7hp3P7X
Wi+7k2bGVAzSGObH1nv8Bh8VW6ayNHgU5Qcpvz3Y56b1ONdqLqfpv9eV/5h1
nll+sTs6qyBb2Tm1bme3smU159WsZ3lM5V1177/ZdwvrehjDxfpvpsb+Y9W6
JHQ16F5p81dsXczcxLokdAWX6Pep8Kxl62C6qK9n0KMr3QoMb8U6dXQj6CTQ
RzSCfgQ9ya5V4y7ZZ/vnxmnep/JNNYc3qe1FZfMy4FIfVPlclb9Q8d63TNNz
e4/Kv8j9ju5GXqE611aMoz0o954xUuUdI2NfuceginX7YzTmjoXlIQ+rziaR
xwx+dFrY/3s0XJ/9BGzBR+rzTWSganeXyr9psZ4deQWYk0kl803IDx6Alyls
I9KzMBaye9n6sCP07F+2WHePDcin6M8Kf0/woeAv4UXJ861tovxLZX/jY9T/
q2q3M2PWPO9eNQ8C74bs5X74ssi8HpiETWPLNMj3U/tn1PcUZE4VY1fBGW4Y
+33AVz+WWY5zBHLf3O9otPr8JDLeG4wCcgbmELsGeE9kNY+ozgmJMQIrK71b
fUxvMcZggOq9rPLPVfexhst6Kj0x93t+WvnDqx4T2MfHM8vl3tEYttPYjmVv
QE5Ycfo+70LjGVoxtmeTwu/tKfrUvb/UvTon5q+R7T2q8q1jryvwHPDgnPdP
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
Z+QBxComZvGeSkfFlgsw//x/T8ivUzi+33mksfV/fMt/Zb4X8/ZH0NGgq8EO
hr6wu+Gd0idlxGzF7gSd9E5167AeVLpqw3WJBdcj6OM4u4mDSxxV6EBk7fjF
wyfeKiHPf6Ob9seFjz4w7djugg9/tu5zivPq/qZ97mIPC61CfPQrlTYb9iGF
nPyt2PE+Hkxs84U/LzBr+MbB5w62NfgUg6bGfw52N/gIQ4eG/OaLyP7GRmT2
f3Bn5ngA6CTXzUx74k+51X6rbvwafsDwL/1tZPst5D0rxrYfBnuJbTax6u8H
b8G3XLL9MnniuGEDtHZsO6DNC8e1uK6wvdU6oZy4d1er3ZzE+kTkPGCAweoS
xw687azEPkzh45C1Yw+MXAbbdGzU+Q+b73ax7b6xn4dnRKbNPEMHXNcMdvex
8RLP102r3dQ0PcizgCNFLoLt9KGBXlo+rPMFYczYmSH/xw8RNiX49P4usu0d
9CV0JrJWfEjMDHLa4Zl9aw/L7COCeDC3Nu3zAV8NX4b6yHXBv3wa2RYXugsb
WPJgK0n5D1oHHDj+a8CCgx9o9WlbMj4KOWrHkrH0/0T2rYFMBL8n2OwMTYxF
R6YB3gBfJ+DV8b+B3Pei3HLehZF9d0wN98J3CfYy+G/CBvHjyPbP0Ir4Qhpb
sjwD2fz0yP6i8GEHj4hOAV9Q+ITCvzY6RGIWELsAefwPkX04oSvBHxk4PPyO
oTPBHxV6c+Ts3zUt158aGbOFrhba9L2m7bjxNQZ28vrM2IdXUtuqYKOHrgTs
N2vrkab9/OD3BxwqenD001Ob5m3xx4f/9EPr1m/ilwxfzviAxj/+QXqef3SP
bQvHGEZ/i27rsbC/sc/hPx1bXHi37Rr2Y4cenxgZ8zWG6UrXaDgGA7HtiD1J
vJg2Nfv3B8MLv08cSuLRLK7ytVQ+osXx74inCM2/BDx7w7aV+HUHS4O+ATwP
tEXb2NgY9MVXxX5P6JGvjo1hXUb36IzetDD2CZ3KNLXdsGE5AfEPwTKBGfq0
6bgC/4sFAfaG/qFjZjd9/nH+4EeeNd9AxplYbn237vFwzb5rkVV+EmTXyLAX
171/Ur09C8fIvEr1Z+v3D8rvo/y/qnNmYh+396iPxVTvR85vpbvWHdviYaXn
JvbNPKrmGKzgq98Ksj70cuifRtccj+MdpQc1jA0EI4juplPI31uzr+el4NFr
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
HC12iuBqkVmhE8cWZH9orcQ61v8DwEhZQg==
            "]], Polygon3DBox[CompressedData["
1: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
2t1I+9OY433PF9r/Tn430mXQb/MbF6PN1f3z8BHKDmIt1/jcQ78iTwK9QCf3
62DGvt73kbJ37U861b2U9kvQdlfG+1L+hPanU/c69C1cy72pX5z6XaA/p/5Y
6n+hfiyvMb/1GOj/1fJMHU1+M+Y5kvUfRdqC/LikL1n7CozxG2PtS1qS/O60
/0Z+uZFn3z1hdNqe0szaLpdnJL8OaVfvN+MdQv3Z9PmglmtyOnWjcL2ag7nn
07PeGmv4kvEmpO01vbyPm7tXVHN+nuE7XgvPIO+wC31mlBfjGdiC9qPTfkN5
Oc8A8iN7v7k/61azp4xE2Trkz6F+w3qeaZ/tIxhvK3l15jhaXp3x3iY/svvf
YMZYg+s1FWV3k9+GMaZuRWZQdpiENCn9N2mGt92ftKl7EW0e4FosUMnz4vP6
ey1nyrnk6608S+sz5pfMWff8Ir96Ne/E7rR5kPmPpN0N/L5dPBdr4VnkXeSB
5YWb3lPoOxnjPvJfM8au9ZzhnuUPk1aE/ovr+/xAzoRTyL9H/ZnUzcp65qH+
Y37jbJ4f5PdmvmflF6Gfhb7N+yGfUM0ZNTdl07PGo2vhPx8ifwfpomp4siVZ
z0bMcQr5Z5mvS/4m9wh5cdJX5F9i/DUZfwnGup3xb6fsAuoOpOx3yu6Cvrya
M2Q5xjuQMT4l36D+JtZ6J/WXUX86dFP+jzafUD8D801L/89Z77nU38l6F4a+
0X0B+nXSZ+Q/becs2oD8Psy/JeOfRf9HKLuCtX1D/dzkN6Z+P/k9xjipFp5l
W/LHlHk+lyd/BfVN7tODzHUq827b5/dHYa6rKfuD/Pi+M9XwVNuQrzLfZ9Dj
tcKPH0SfFaE3ZvzFlcGa2bu9htuTP4X5VnVvcO+g/d/0f4mxtuX3ntGJvLk8
bUej7APG31+eQXmLNf4MfTf0FdDb0GaFZmQcZR15mpmof4TxT4K+Xt6F8d/y
zKHvOtB7el7xPD7L8ziuclMv9/cX2rcZ62noY5VZab8C9VdKt3JWPE46jvwt
7t/MNQnpO9qswPgb0P945ULaLw+9PvRxyt7Qp7Sy978mD02+Q/0S6hl8j6kf
Tf6AOpUQb7GW16FP5jddQP+bqL8c+gDaL0v7V6G7zP8Xbb/xmaPNo7RdbzA6
gKndL6j/l/r5KLudujGbebcWhb4PenHG2438S+TXVX5vhBd3zF4z/OWwWsZ0
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
BoPhmE7bL+td2b2QsS+k/UWUjUT75Sjbn7q1urGlzUv7man7ljFOpH66WvbX
Bz0j+Q2ry9M2gjdQFzQf7WfpxF7m/fyStu/0IiMoK2izVT93dz26cm0wWzTC
c8h7aFP3fT6OpAAhZkDsgPK7trPTob9XtmWNi6ibofxcxt/N/VPdBWWvU3YE
63lrMDafTVjLQqQdtN9Qf3YZG5m2sg0Hsh9fKc87FEyB8t2j0OuqF6tmP3iL
suG0XYyyO6B/7UZ/pB7pMOYfmTGPrMSWehD0i7TfZCA8wsKt7F/qas+kzVHy
4rx/+1G3gbwU7d/VZkP7V3xXoa/yjB8KJkB9f6UTfYCy9MHUX8EYP1N34EDs
mdoTvipic9T2qP3UvWAZxri7lTPGs2a5Ivp+9Xfyk3uxnnmbOW8P1D5ayXn6
MWX7DwTzdVIz9lPnWlaZm/rBVnTxYmjE0qiTUDfxLe3PI3869e/x+96pxB5z
FNfrXeiXmGMrfsuc/P4ttaU2ou9ZT5szbdei7anKN83IcldQdjJtnm/mXh1S
jQ3vFn7DyvQfvxqd/+j0n4D8htoOerHbar/VJqdtbgzqJyS/EflzetnT3duP
Ggj/8Vgjtv5tB6KfUV9jfmF1Gq3sUe5VXmPxJUfye97m97woP8/v+YmyM6nv
VKJzP4359pYf9IxlPo3Zx6hfcf+p5xn2WXYPVB6du4w+R73Oyb08Bz4PC9B/
gUZsjOoK1el4/qgjVlfsM/m27yPr2XYoeJl9GOuEroo1zhLow8V2dKP7mkAd
qdi9buQh5aIzeuEZ5R2V6bV/uT+LpVFmVnb+wfOGuVZkzJVdTzf8y5eN7Hfa
sLVlqxNy//+lG/vAFa3o631/3pdXqmS92gy0HWiznwt6avUXff2Ntl73Yffj
pYvYl5TxlPX8WeNRPxn9P2Wsl0k71KMf+a0Wm5C2Ie2j2hfPpPx57Re+07Vg
CJZTvlEvNBhMxvB69pvHarHxr0D9esy3t7JjEXu+55bn19S1nMdzs5DlBlM2
lrIj9ArQNeixO3mvfb8nqQZfdlM3WJlb1cdxf2ZtRVaTJ56jFb27+vdplA/c
i1jTR4PBoGxP/pR6sCInq5NtRB+3zEBs9truxRSKLXSP8x16lzF21SZSif1T
/a2ygjKBsoH2Bu/FJ9BnOH87573n/je9YGrE1kxCm8lp+14z2Dl5tGX657P2
wq0p/1r9Ju23o254EXzgu81gteSBlqb9lPIwtcggyiJv0GZH/u/q+0T9pq6R
urUq0e+vqn7Oa8Oap+V63k3b/1WCUdy3HruV9isxlfJ3u9JnLtquX8l5qeGl
0seQiiVVB6AuYKAS/fQklE1XDbbxgl705urPl5E/di8diuysDVB+W3zQP/T/
XH6qEwyZWLJDK7Gn7NeMbUCMllgtMXhi8Zao5by+n7KVfHdIqzDny41g7cQA
iQW6gDGnh/6a+pd7wbz5Lj/KOOdDD4deDPpB6PN6sZNrL1/e56kejK5Y3T0q
eZ/EeIn12rsW/k19wEZci6mq0Q+Kj1S223UwPIsYuhFYuiLy+ujMdyxj/dHI
eeO6XJ+Y0EXlxTrhX+VjX6J+QsrerQRjonz0dCO6+9nUD6k/b0VXN472DPIv
tGM7/06+gP6bQr9YCa9yWi94QPGN6gTVDapPk7d7ljZPkd+A+3EmdYvQZu5O
8C/KVm9SdpqyayO2J21Q4rHEG6jb+xn6IvK30GfYQGy+2n7FAIkF6pKubQbz
KfbzR9JMjdjEtY0/QXqjEZusttlRBoJXEj+kfVIZS1lLm6C2wdnliRrBdNr/
B9IM5OdU3qHuH9/BshixsakvUW/yivYP8a+D4YHGZK3rQ58BvRD0HJ3Y07w/
6lDVpT5GWk9bZhH7uPy/usW9q9Hnnd/M2Sym6Px6bJ7X14MX0BaqTfFl6hYq
Ymucj7pX1NdBj9qOjavZjH1L29cqZbAJ1VrkraUYY0/vFelr2m+iDYr+q3kM
kV+F+oOpu4Ky5cUGtoPNFKN5exkb3vtDsXFq29MG+IE63CK2wb06kdX3UScE
/TDr+3AoPMCv7djUtK29U+Q82K8dbLe2XvX/T/Wfx3cp29G9oxH7gDyUvJQ2
0rc9P4vYTk9SR6A+jPRhOza1J+rhj0fY2jp5tx/hnu1YBrMnds97+wht3+T/
hz6rlTwvU8mDau+i/bZlbIKfMd8aRWyF4o3F7okxnph5ri/Dj/zcl3/Xo6xK
Okl9Ne03pf+nQ7HJNsjPRpvlatEx71bGRvvWUGzs2m7Fa6oLubeIfm7vdu6d
ePo7ymBunqoH8y4WZy5lTOqfY727l7H/awu6qxK8mDbZO+vBw2irFcOq7kod
lvo0bQQf0G7PodgOVma+i4pgwMWCv1YGz3IEZR33Otqf7jslv9IOvl3b9J7U
z0d+hV4wUvsqT5FfsRdMxMHKl+SX7uUMUF6qyN/1gplSZ9nt5Xo9Wc9++Uf/
+Xy8nv3+d+3T8gjKxfJH0Mv0ZYrt6T9A/stO+GH54g8pX66Pcdmd+pHln3rx
IdjF39ML5vJoeaNKsJgrQ39RD37rIsZ/p4w99nTvD/nVtIHXg++4jPqx23kW
b+Z6fcP1+gF62SKYnafKPF/uRWLGJ6Lfe76zRTAgT1C/ei+YmpMpG11+shF7
vjbhT/vvvzLogt4zxv9KGwR1f1K3P3XjdSIrnEGf8Tu539riV6DsX9qvAv1V
PXi1i9vBy4pPf6sIv/JNGfyuON5DaPt6I7Zlr4fXRTzsbdBvF+G/PP/cex8n
7UTfsXs5u8esx59iCcquhx4DemvPR21iPF9N1nQW6xnei410GG1ubecZ8lka
Vgn+YKdeMHzaS+6FPozUrgQjI1bmZtKrlZxVH9H2fnXkA9EBbt0Nf66tXJv5
++T3Uaeo/Zv6YdBr02cU1nYV4y/D2I1O9nr3/O3awYmKFxUTVlFXWgafIMZe
rL17hnuHfZr0fbf/fIjh9fnZqh3bx8t9+XAjxhi5rzNa2v2JPmfKS7OeW8s8
wz7L6tzVvT/cjq5hWtI4vlvyHKRZ6f8odbuqM9DuT/3T0GUzNvhXoG9ivO8a
0dupv/tDW3MvegvHfKQdzM+o1J9fBAs0apnfugpt/nJvaWfsGUht8vuzhhdr
wXg9AP1SO1jsP8TEqOuH/rQIRl78+4mkv6jbgd+zoLolMamV6LDUZX3KfONA
T6WMpb8Ac15bD57D+d4rc+/EUExcBq8uv/FMEfyXGKkT+T9LkedBnyR9k8Sa
vqc8Shqi/iz1r55P7dgOn27G/rcxa7qKte3N8ziOWBzK6rQ/mzaLtvN+1/r7
92juTf3n53t+39jyH2WwBmIOxiD/VhnbvzJ/WQY/dgD5OyvB/4rRF6v/U18f
uGov58OJ/t4yeKsDqbu7Erztnp1gLXdijW+3sz/8RvsD5JnK7BnuHeqw3vfZ
6YT3kQfavh37ubbvr0kn0PZ10iXy5tA1r2cZ7PuczPE87edi7OeHwoN128Go
az/7phr806NlZJlRKbub+t0pu76We/yqtm/W11U31T/vZiH/JOPNDF1vB9Mo
tnGlPn8ihuw57a9FsGXzyp9Ug2n5oAw+QqzPdOp3xd7V8x76jLbK+FC5N7pH
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
rcx+q276qnpkIe0xD9XzjHs/3D/F091Uj65N3I97zSpF4lGI8/Hd9zw3PoR4
1S2K+Dzo+3BPPb4I8pxPtGKfk7dRJ6JuxPoNhuJDv1kf7ySWQxurtlbxwvrn
iBETK/ZiK/oT5Y2XW8HP6kugD4a+GPLYjvd4K7y3/sViPcT0iu013pJ7kc+o
9nXxsmsWwXyL/RavLBZFTLnYcmUasXzGZVLWMZ6JsTXEbIvd1t6yVjUYX7G+
6oTEg4gLUVf0UT1YUHUc2umk1UV5Znt2i+/Xn0wfBH0RxPiJ9RNT+b9m8Bva
osWUii31HfZd3pk1/sW9eakeXxd1YG+2QiubeOZ79quT0B9JvyR1FeJj9d3Q
J0nfJGUY27/eiuwkHkx8sj5m+pqJ/xcbrU7lI/KnNaJrOZj0OfREjeTvEKPR
Sjwhz/6Nijyv8/bCiykDeT/0xxMrow+Pvjzqz/RF18dKfc3RvfilWzYhv7XR
TSwaMcnNbmKUdfr6avEmxuQxNo+xN97oxV4z1LcHaB+6pxPfBW1Mc5bRUaur
NkbEfO5Hvdh21LmoeznNd6iIz+zp5Pcl3VrLmWB8MW1S8v7GZJunjE+R9n9j
ibzei35D25k2tbHIP9AJFnmpgfhfaGPT1uYe6Pu5RTe6Q/es2RUK29HHX1RE
/v6wjK+qOpVlyVeb8RnVPnFxGfvs+/W84/LDxiDTR097hLHJ5M+03f/S5wfl
geWFPYOV5+UB5QXlAX5uB2+9ZRGfGn1rFujl+VOm9vlYuhOsy0is90Lnhz64
Fh8XfacWhd4FugJ9DvT2ygDQU0BfJT/YCVZ2VDFXZfQpxnK6sRJ5UH2vtsuZ
BqJvXqUTWWkS2l9eJl6Evt/K8MZDO5Oy9aqJOWE8DGPgGQtPjOCP6kU70dWK
EVRfMBltzq7knb0P+vBe/FaVIcctYx/XnqJ942/1cWVkP32WjdezeC+Y5z+V
F8vgN8RPiKcQz7FH3/4jJs54IdpnxDuID9BeovwoNvU06KXIz9YrRmBPxMKJ
3xUPr68Gw4zw13qojC5LGftG+bNGZBNjyhzdir1GPMmCff3bUr3gSRYqYr95
rIwuSp3+/e3Ef9K/TJ9OfTt369uDtBEaH0L51bVpI9NWtiVp1GrOCPlx7fEf
16N/eLmMPf6Fenha+Q1x7toK5e9nqwcvcF89GGL5lVM74T1fIO0BfZ08qLZH
0lFl9NvaDj4hHV0Gj/BGPWem8uh4vfgmqaNQVyGeQHuV+se/utEfap9SX6a9
68xOdL36xO1Z5nlQd+Qe7V4tfuG1enhk+ZcrOtElvUc6tIz+Tx8i/Yum6wVv
LBZVHxR9UcSMih0Vg6w/ykWMVR9KTAPxfPJM8k6bF9EPqatsDQWjN1Uzunjj
Z4nxF98ufsDYU+q0jAnwDP8Hh2J/n74e/Im8l2fsrJ3E4DIWl9fQGFbGJdSW
og+E/qb+HnlDY4SpH5OnkbcR96wtx3h2Yt3VMV9K2dWt2D6UUQcbiT8h1k2b
jhhTbSbaSiZoxZaiD7e+3NqXtDMZ887Yd/IYVzbDm6vbUcejr5V4F3k795g5
1feX8V3Sp+q6duI3ik/Wp0TfEmOWGbtMH0/xaKc3YivRJ894MuKVxZ7r86Pv
z3PNYI/mhb4Jep5G8mKSxMoZU8zYYsZUEI9tvDZ9L/RZ03dNf+4Pivig6Iui
Dsx4mO/0nzfjJKrbM+bi+83EexJ7rc+Svkvq8PSX0W9G3Z4YRLGIxhA4uhn/
M33t1KHd2QrGV6yvPv5HNYPh9Tp7vbWlDW8GZyfebst2MItiBOVfZuxlT3Rv
HBGTqpP2+jnqA6cvnLZbZV/PAHFc6tDVpf/cv95Ty78Oxmd68k5ibhh7YzIx
qfR/ibJdq/Eh1JdQn9jHm/EfdL9/uRPfTn1ex+/Ghq8t3/hR4/TtH471HmOu
UMbGoq1FjJb2sLsoO7KaWKXifZbvJBanPmj6oi1VxndRH1D5e3XzYhvUR8xe
jw1AW4A+TPoyGV9P3x19VPRVEWO7XjP+62Jvtya9M5iYNVt0Eg9O7J4+J/qe
HNlOrB9lUmXT9aGfH8yZpj/nPWVimxmD1Ximxo/St0ofCH0hWr1gxcSciT0T
LyKWXgy7WPZ2L/oGbQDaAqq9nB2eIWLxxIMYt0WfFn1bil50x+ps1N2MzHgH
VePzo+9P2YutRxlNWc34dPtU41Ojb43PjM+OZ7T+rsaD3akan1x9c28sg+2e
xfepGxuMthh9oPSFMpibftj6YxtbRQybWDbfCf3H5AHkBfTRNp7M+p1ca2Oq
GFvl7U50q8ZsMXaL8aGMBWUMq1H69i/nFqO0Uzv2sVkHgzHcuZ0YKRu1Im8Y
O0X56JgiGACxABe2gwVQxlLWkqeQtzihlngu6gN2GQzGUKyhOiJ1RbsPRp+i
fsW8PkLiM8Xbi9W1j/qDbTqxbeqjq6+uPJW81RiDidewWie+vsbgMBbHf91g
t8RYirWU55H3ObcW/97hpMeK+JTqWyp+6fEiPuHDusGDPFHE59vYaNobfZfE
62/ejv3UubUxa2sWMyR2yGs2bTc8l7zXCgP/P16NvrI/DYR/bnfji3dgLf6d
T3Tiy2jMgJGom79MLF1jkBqLVJugtsGjaokvYjxRYxXoA9wl/2onsrgxcoyV
I8ZUrKk2tm/7/KF7hT7X+l4bc2HzZvYUYzEc3Q6W8Ni+fD839NmDibkrHnHD
bnzvZh4Iv7ZaO7KGMYy1j+rfv1U1Pv369h9H/Q5FfLD0xVqynjiF+ljpa2UM
WGMmT1YkNqzzq1tQ/lyN+rmgzxpMzGDxCfqA6wuuz5W+V8YD3boaH3R90Y15
N1szOnlj4U3bzljKoMqixlRasBV8svgP7fvbFsHci70X4yTWaY16/JuMN2ns
ImMmGDtB+/wDgzk/tZUcpc2llhiYf5J/th2stWXGoxPTLLZZfPlMvfhkXFpP
DDt9NY7rJPafPKq8qvF8tI2LkRIrpX+qvthzDCT+rHiv+6vhIeUlxWuoy1Km
UraS3zc2kj7v+r6rM1N3tlMt8SyN6TfQDMbJ51n/sM2qiSGxbTd4l6sHg+na
pBt5z2dVTIbYDG0S2iZssyn5k9v5bWK0xWqf0o5tXoy6WHVjDuq35J5rrOGT
u4llIqZHbE+tF1lHm4C2AfFt6p7lsU7t62PFUov5FctqfEZ9M4zpaWzPb3uJ
i+KYp3SD7xPnLd7bWJLbqoMcjMyzXSfxh/Rd1ydL3yx9OIzro8+lvh0ntoNl
VUenrs71GotSHvL0buJh7VGND4axxO4r42ulz5XxOQd7keXUuat7V17S990Y
DsZyuLdMfGBjUhvP+v4yvp/6DBpfU/yIcXr0WdJ3yfgT+pr7zBmvZp1udNHq
pNU3KP8ZO0wf9D2pO6EdXaJt1unT6iZO6+sX52gnlreYafnVdbuJFWrMpWpf
/3ZsEQyYWDDlQ2NxGeNgL9oeS/qX/JekB9vRJ6trEvMutni3dnxrjOGo/6Hx
P7+opc9x3WBURsTaqcV/TH8IY7sYA9N4god14kumD5e+XM7hXPqgGJ9WfsS9
0pgX+3YT/9Z4se4x+hMv0I2v7vaDibcqpkps1VyV4PPFmIk1u6QS+V6bkbYj
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
UvekT56+ecYwML6Q+MTj+jz6tGUwt2Jv56rF/1F/IWO8emaIjdE/0jpjPHj+
6QOrL6zPuPjmbl/euKzP/23UzreA/GbLYn37grpufZCNj+Ye/GIj+697s/iO
b+uRQcV/yDPIOxgT13hC+tvpIyNmaMYy+hwxc+p85+gFX6LdRfvLtZ3EbDRO
mzK0srT4Un3ttXku0wl+xbgRxo9YsJMYYMa9U+ei7kV8jt/AMX7/XOSH9SKb
GcvceOGf9Hlm+cdb2tHnazuZoh6svN+Y8TzyWzziXZUZ/OaO8RiUJeRx/SaU
/Lq8r/ox7T7af/Q1kF/QLqF9Qqyv/ujGXn7GPbqX6+dZ5veIPi4T/1RfRTEa
k3SCeVdX5B71bjv4beN+qXNs9/Vz+r6IaREEbTxIeSsxGO6v4q2NDSfGTPyZ
NvV7mpEHtbVr47+3GX5V27+YDLEZw2k/fy/6ajH0PgM+C8aL0fdUfZ/2YPcs
fSfXqWcv810SO3xcEXuXe47Y2bXr2YuMuWDsBeX9GXrB4/qNJ9cvNsd4s2LX
ti5iPzGerN8WMyas10P+2Wulzkbdjf4XxuIW4ztRLz4R2ipnqEce8ntefq9K
HxftS/oPaHOSHr8X/1C/++WZ5NmkP2utGRuGvvHG+DG2s3uue68xbY3F7Zpc
m5gUsSn6UD3ajY1KW5XxoH7tBDMudnyZIvg+Y4gZk0WefNZeYjIam1GM+n9l
7D0ztMI/6cspf7hAK/yY8ov2ImNg+r2TVzrxqTXmjhhosdDimZesJeaW+lO/
Mab+mOYjvsegvtiYnn5/ZKVO+GVj1ohx/18Z/tgYMPqg/VLGR9RYsWK8xXpr
PzDmi3jWlbv5pp32i8E+P6P+cJVaYqofXEafawwwYw5M34nO5aJWdIDqYsQI
K8OrQ1KX5PcPjLX4cBF7kt930zdHnsn4KWJuxN4Yb26MXvAQxvocz3eql/h9
nt31IvGalXfurUZHp65OG622Wr9H8WUZfwV9xfWh0JfCmPHaibUX6wuhvcvY
MmI0lupEnyPv7JjGvxATq85C/Ow13WBC1DmI4RUrMnUv8WvUUaqr1H/wj1Yw
uGJx9W/6shUbjr5a4kPVQcmPGZtCzLPYZ/F0C/aC3zNWmvF65+wF/20sGGWg
39r5Ppbf7vGbV1/07SMX1KJDVZd6dZnYDpYZf9MY7sZn8pswxgM9sxvbuD6a
+mpqM9J2ZAx4v5/hNfZaa3NRH6sMryw//kDwutp3tM0YQ2ubdvDKymLGiDT+
Rc/zuxYfS/ezCXrBf+mzo+/Oz934/hgDwlgQ+k/r+y3PKe+5QTuxAY3ZbLzI
DduJ9WtMYuMPi9lYsIiPt75UP3azH4hh0NdWTIjYEOMlGetNmVPZUx2B8f78
3qBnmd8s9NuF4i31JfAbYH4L7Isyz44xIIwFIQZTLOYuA/E3EH+vb4Ux/fWP
Fk8t1nh95nyRuX/qZn1iTIxd4hk04rsatXzLwhgbxtrQ51B/BX0Q9UVUB+v3
l/RZ8vrI2+vLpM+GvhvyoMZz0mdKfbuyhNhlv/dmbCdj4P3e55dmbySerP4Y
4rfFYigDPN/fnz5vxidE3xD9T/yWgDEkjCUhXsrvyhgD31j4U5axTYiJExsn
zyr+Sx8CeVn9o/yWgZgbsTd+f3O2gcQME++lD9i/ffuJvt7GL/Dbdfqwii9T
X+23zfwGlfrnh9rBpvgNQ+OBqW/+phZMzRbKB518m8VvohnvyBgBYm1sYzwx
ffb13fc7Lfpr6dPs5miMFmO1yDMrG6zb56X19zeWtt988dsvjm8sJfUBYn2m
6AX7ZGwIY2doL7quGR8EY+P82c14YuzE2ilzXF8EI31C/zy8ohl8h7GJ9P/c
splvdmifED9Xo24Uru8F3dhHtR1qQ9eWrn/h/tV808H4NsuU2dvFuIl1036s
7dYYWdrr9cfx3ttHf0R9svTNcg7xecaIMVbMyAPBG4sXH538WOrcu5F3xSpZ
Jn5c/MQ1zcTAMBaG8ePGHohPmb5l4vndG9Txixf2HfBdEFNufBrxzc4lBnfm
dr7HKq/sN0791qnyo7HlfCam7CWmi7FdjDkpnlnMnti99Qfy/ZKr25GVun39
tvZy64yZoD+SMRSNpbjiQORhv7Hjt3aMWWd8X+Vl6+YQf9KNjKPs0mlE9pm9
F2ylPs/idZRJlU2nHwie/Np235+xrw/XHuy30dyz3LuMuWPsHb9pqf+R/rZ+
68w9zL1M+6+2ZjE74rGX7OuLxHAqC4oP8ew3ftoW7diwtWX7DQHj+Ysnf6YV
/xR9BZW55MXF5CmLXdn/PfW+PvWKdvT3Q319v/5J+l4ZI9J4EH4PxVgkYqrU
B4jfF1stxtZ4BH5/RF2r3+DzW3ziS8SOi9EUq6kPwXXuRwOJZ6y/oHm/kXVW
md/gb/GbusYzV2bwrBMjriwh/lpbiN9Yfb5/PvktQHXY6rLFl+s7bwyYWp+f
FbvqNX26E/+GachPqv6mG/yaZ6ffLPLbRfoE6htoG/0fxHMbO/Tl/vuoP5Gx
ut7uv89ivMV6+81S44uKuRN7p4+58d7E4xn7zW9c+a0r+btfG/HZMha3Mqmy
6bcDwbuLfzdvzAxjZxhDxlgy8nD6o+nDpC+TPJXxwox3qiyjjUJbhZh4sfF+
E9D4pca4MNbFFwPxDxNzJ/bOd1J/BjGAYgH9JqT+ZfpD+OxqA9IWJJ5z5r79
2lgx+p/pS26M0Su68T+8rZmYGsbWEGMo1tCYidd34p/m3MYc9/cqb4jl9R14
spPvhxq73G+Eftw/P/T19puNfrtRvL+xWLWxaGvRf8RvOfpNYr9N7PdCPWv1
odSXUnyFtnUxxWKL/w8vFCaA
            "]], Polygon3DBox[CompressedData["
1:eJwl1nlwltUVx/EnbIkkBJRVbKiIKaJAZKcCgkVFRKRSQKjSpmgTgUrcxg5Y
0grUorIMbhEErLgUJBEcMdUKLbVKxBAcpQVpWaYiQrSgQgKy93Pm+eM37z3f
+zvnnue+91k6TioZPa1BkiTLqTGdzEmSb7KS5E1aauKU+L7sJKk0bnpekpxH
lzZPkrzcJLlIwnN8Vdg/myXJJ9i8JkmyGCtomiTtxcfkl8ndhf8PrxcfpVrj
idQzI0n2qp/Pe4V6y7CGsY5627En5D2PDVavu7ghfkb8GC2W21GtVjTPOMGO
ZyZJa/014Dslnk0LzLXhaSE/0xpPY+utsTlq4XXiSlquz7Pit2mu8R5sN+Wp
t1XuI3opE9fqpUacyF/B9xZ2jM7JK8C6Yl/y9rFGd3EGnTCfQbP0ksO3Rf4c
nmewDXzVPC9ibbFX1H8N62HdFtGLnNOu6yBdgA2wX9Msv0P8KTXHHsWGGW+j
CfznxEtplHg3PcA/UNyWt701n6JifY7BnqObee617lP253Z9ZPPVYCV8Pfjy
s9P8qLMH30steF7AbjE+lZn2Gf0ekP9Q9ICdUPOg+Gq+mXJrsS+ppdxrsNnY
UXEdtcJexsYaH8lM58JzUM056p3A/hX7L76Qt7Px4+q/r+ef8o3H6+VsxT+i
9jxNqVreFvqluUv5fss3Ur0SuffQD3l+pcc31GnHN97eD2mWeiPnemwzZfH9
mm+unGfVn+u/+khcRXux32Fz+DfFubXGDPP/xbfjF8m9gu5X+1nsc2s9qP5q
3ul6Oat+OV4u/gHfIL4HxGV8/fgq4szw9VCrkbmOPOuwHdggbAhvv9hTOm18
hsbppZ3czdTXuLs1XsQH8HSiTHWyaJ3/9x6eS7DG4ib0BlaCLaTh8q7C7rRW
hjVH0N+Nl1q3CL/FXnWWO9p4pvor9VzoOvpiHcSfUWncO/J2827j64d14ruY
r4s1fm98J3ZEzYvjfuPbyLcAqzL3EN9M2my8ENtkrlfz9H+P//8xLF9uOyyX
rwGWj+VgbbCpfHuwMuwuuV2wndaojnsUyzXXSt5Quj/OE3ZA7vf5duh9O5Xb
h26uu4/fQXyFfKPiPxKfFu+nenFhnAVzX4h/kpuOP5P/C3y0+Bq6F5sgftn6
3awxIu4ZbCL2p+gJ24Mdjv1Uf4n8veLtruNV8fN4BrYIG0uPyi3C/mouQ+5J
11beyK9aS7D18r7FvhCPjLNr7oi4DP+Ns1Gn1q64l9TqIH8/z3hxibqDsVK+
y9SpiXvO2Vjvv/xO/iJ1Dqn5FR0T9+J7Qs40uR/wZ6r1Gj5cTqnctXwV4ulq
/oPvQp6J2HBsHPY4NiXuGTxXbhX+jvk52J/NlcQ7hW4135hexSaJJ9Na44dj
7+kquVOw17FZ4jFqXIbNwN7D2sstxEaoX4eNiGeOPXhBnwdc20rsEvEquZV8
PeVOxyfHPR9niPpjS7BCOa3jveP6eosr7MGkuHZaam9vEnfBm5nPwpZhl4sv
jx7jv8Y/dK5WY2uoVL08vr74SHE+XzZff/E2vtexb/XXn+ff+rlevRxrvEsd
zC/D58czmeeO3HSPYq+y5XeO9wlfb/GHcnvFa1N8gu92LCfOFtaBrwirkFvq
WpvGvRCMLtDfB3KX874n9yRfkXEbWiP3x1hZvGt5VmAr4r0inhLvark1+Et4
Nd8RfGC8T7BRcs/Hivla8o2z5iJzldj37MEu8QzxIb4xPLPpR3wz8H34+Tw9
s9PnVIX9Kqcrm8fm+I+wVeKVVIDN4xuKHfXbjbrHb1ybWvPj20TdxfGtEver
2vv1N1aptnz12E1YfZP0XK9xhvphw+zVMNf6cfQjdyvvK3y3ilvzTcXy4lvH
uAh729xZed9QQWa6L7E/k/k28f0xM92D2Iu7sD76rtX/H+K/1ctt2NdyO4s3
yD3uesZhD1KxuEYvW2iQvKf5GmNbqIJ/p/rfYbfFuchMv//y5J3D/iIuzkr7
jH47xZ6avw6voibxnqD3jT9Wf6qaBTxdscX6W0FHG1ofO0wD9HWHel9RnTUa
8P1N7kb6eZy17PQ5Fs+zalqN78ASvg2Z6XMtnm9dsR456fmMc9oqvh/FG3PT
HrbxfUJXy3sXuxs7JT5JQ7DDvP+RcyPdYO4tnnfoZuMN8bzXd2++gpx0P2Jf
WvJeKR4Yz6J4psXznf9ubHC8G8Q76T5sVk56fuMcD4h7gc6o/xK2ADvLcyj2
L54v8b0S7w1snrlrxftobXzjYEOxz8WraELUwebHfxDP//hGiH2y7tfxnFFv
Nf4z44b0JN8N4key0/s77vOF+LroTe7D9nIftgk7HvWy02dSPJsaxbdKfMNh
12Kf8r0Z357iWroO24lVxneceHA8t+3bk/JWxrdInFNqE9/x2enzo9ia/wfT
MqOw
            "]], 
           Polygon3DBox[{{2961, 1866, 1994, 3849, 2868, 2869}, {3115, 2063, 
            1801, 1802, 2064, 3116}, {2862, 2861, 3843, 1985, 1986, 3844}, {
            3831, 1882, 1802, 1801, 2054, 3100}, {3045, 1970, 1750, 1751, 
            1971, 3046}, {2869, 2868, 3852, 1999, 2000, 3853}}]},
          Annotation[#, "Charting`Private`Tag$343399#1"]& ]],
        Lighting->{{"Ambient", 
           RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
          "Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{0, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
      {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl00lI1GEYx/FnTM1WpUsrmVlQQVFQRItS2kLMVGCHwIKgQ+CAJXSxc6Dd
6lRQhzpUEB2C0Ci1dYLqIrSXuY02mdUlWmjD+gyB+nu+3/d5nvnPO2PF/kN1
BxMR8djvuqKIfN05LiInCydFlMlvfLGDOlmO/8g5uMj5MnxiSsRPM1XqMi4l
P8tqPXvU56ZGTCuOqMctZpc4S/OzuSbuDLeWO8K14Cr1MXWNPCVv2r+iMOKi
esPkiMt62sy043a7V9vzgOvm7nM79fTjAfwUN5jtw+XjI57hNB7EWefP8Ubz
WTzP+QvcOiGiw/t5qa7gXuWfpSRiSM9r9bWJ2MwwHrJjvp4evpZ7yw1zldwb
LocXqHvVC2Wf7LZ/n2foV2+yd0RPzswAvm73ZntGuRFukNui5yN+j7O4yewH
3Ox+nuADuAf3Ok9zGW6lHRluL27Dq/TsUl9Qb5Mn5XT3dFxPq/qSe6w0cxSf
taeZO8/N4Bq509wacw38brxIXa+eJZPyqvsqVa/Pf5fkYj2NZpbi33ImXq5n
Lr7ivADv4EvxIz6BM17LS8ZDPCaTzu9xPv7YLsf03JUeOzJ67qititvStUXK
Pf3S43qji0jxP3CtPSX57zWX5L5zNVyX2kcSX3Gn2k90+OMobtl/Q+3a4rCm
UVntgI4v8p38W+B9yK2Wf0r8///5B4w4b4g=
        "]]}, 
      {GrayLevel[0.2], Line3DBox[CompressedData["
1:eJwV0MkyXGEYxvFXlSpSpqoYo1jY2McY7LgBMRM2LoClihjDPSRXwY4eDBdC
Fd2NIDHGtPQ7i3893zN8p/ucltn5obmiiFhAcVlEriKigDwGyyM+0s+VEa0l
ETv0hP+DU3zVn9FfVRHf3d3Vn/OXuMCQvuZDRJt8Men5G6T4W9rv3jCttm2X
/bBJ8XdI8/f6Jowkz7GpxZJNmm+WHyCT7PhR1Ok7+GWbDJ8rjbiSPTiPJc/V
zbmTdd6yGad5dMoL8hXZHn/tzj/8xQTfqPuNLrtVm/3kPXR3uMUkn9UXaLfN
ms2B873uMfl9DOinku+FLzbrNofOT7pnHOs78U1Wz/fY/LTJ0g75Ef7Lp/UN
tFe+kfxf+qB7kb3hFTM2n2ifbtNmG+9TKEzk
        "]], 
       Line3DBox[{1362, 792, 3166, 790, 4038, 2992, 971, 1171, 795, 1526, 974,
         1174, 2542, 938, 3443, 961, 3908, 3167, 1366, 3454, 962, 3909, 3168, 
        798, 3264, 4020, 720, 3169, 800, 2997, 3951, 979, 1179, 804, 2716, 
        1528, 981, 1182, 806, 4039, 3000, 985, 3170, 4028, 702, 3265, 1185, 
        3171, 4045, 940, 3444, 1187, 3910, 3172, 942, 3445, 967, 2549, 1189, 
        811, 1530, 2717, 987, 1192, 814, 3005, 3954, 991, 3173, 994, 1531}], 
       Line3DBox[CompressedData["
1:eJwV0DkvRGEYhuFXIWL/DXqFHjW1nyAS0Vga0dlnMGYIYifxE+yxxDIxQmKt
bQ06iahshUtx572f5zvv+XJORWNbQ2teRDQhvzjioyRi1cyaPaUR84URR3I3
78Ua7zT70I/RsogUjvVpM4MB/br8ZS7aH9MN8qzuh9eVy7yGP/MNnsCJOzfl
Ld7ME3bGPZM0c7qVoogJeZvfmZOYwRTe7J3pp/ksdvi9OYd5tDuvxrl+yPsW
dLu8xT3vvMNZju/pqgoianW/qNcndRcY/v8e3ZVuX/6WR/7/AVK41FU6u0Za
PpC7zAzGsGx3CTf6T8888ic84FB36v4XvOJW/gOgHEau
        "]], 
       Line3DBox[{2831, 3037, 3271, 3036, 3810, 3962, 3871, 3651, 3650, 3809, 
        3035, 3449, 3034, 3961, 3885, 3649, 3355, 3023, 3179, 3022, 3958, 
        2830, 1849, 2829, 3931, 3825, 2828, 3957, 3019, 3178, 3018, 2827, 
        3960, 3033, 3733, 3032, 2826, 3993, 3031, 3729, 3030, 3959, 2825, 
        3015, 3176, 3014, 3956, 2824, 2952, 3913, 2823, 1843, 2822, 3955, 
        3012, 3174, 3011, 3354, 3648, 3473, 4048, 3029, 3447, 3028, 3743, 
        3646, 3647, 3870, 4031, 3027, 3267, 3026, 3472}], 
       Line3DBox[{2832, 3038, 3272, 3039, 3315, 3994, 3653, 3652, 3040, 3474, 
        3041, 4049, 3475, 3656, 3655, 3042, 3654, 3932, 3837, 2833, 3826, 
        3933, 2834, 1853, 2835, 3963, 3043, 3044, 2836, 3964, 3045, 3046, 
        3995, 2837, 3047, 3048, 3996, 2838, 3049, 3050, 3965, 2839, 3827, 
        3934, 2840, 3905, 3935, 3819, 2841, 3820, 1975, 3657, 3051, 3800, 
        3658, 3659, 3886, 3966, 3052, 3450, 3053, 3660, 3661, 4069, 3316, 
        3054, 3273, 3055, 2842}], 
       Line3DBox[{2856, 3070, 3279, 3323, 3322, 4033, 2855, 3362, 3363, 3278, 
        3321, 2286, 2854, 3360, 3361, 3277, 4022, 3851, 2853, 3068, 3941, 
        3850, 2852, 3848, 3940, 3065, 2851, 3846, 3939, 3064, 2850, 4000, 
        3063, 3663, 3665, 3664, 2849, 4071, 3666, 3667, 3662, 3814, 3813, 
        4090, 2848, 3062, 1987, 2847, 3060, 3938, 3842, 2846, 3058, 3937, 
        3839, 2845, 3838, 3936, 3276, 3359, 3358, 2844, 3319, 4032, 3320, 
        3275, 3357, 3356, 2843, 4070, 3317, 3318, 3274, 3056, 3057}], 
       Line3DBox[CompressedData["
1:eJwV0EkrxHEcx/HvlHJgyENwoWQJyXLgKstFZAvl4MjVvl/s2yhKNMN4Cm4i
z2B4Es7cBuM1h3ef72f5/6amenZhaD4REXOoK4uoSUbUIlce8VQZsScrICXL
4xKLuno6XBGxr0vTK/4H11jSd/j2AaO6A5sRmuD7sKw/lDWihO/HiuyIf7Hr
5r/w6l6VN3hzzH2sD75Jl8Ov/AZrshY6btNbGpGht/wf7rCub6UT8k/fnXgn
IUvLCshgg+/UZTFld2ozSfN0U/coP3O3IekewJb8nH+2e8O3rAfb8nZvTssu
9Pe0Wf6BcGd1uzZddIZP2ezwVfpBvBd/r/hfyx/0/88iOWE=
        "]], Line3DBox[CompressedData["
1:eJwVzk1KglEchfF/hIhktYWCisxKLSsl3YQzpw5qUtp3OylQKvsYtQcJatKw
cBONkyaS0c/Bw7nnOfe9vPONVq05ERF1lKcidqcjKvhMR/xhhLfZiJKtxJdx
yW3LR34JO7aivoULW5V7wMuMe7YRzvl7Lo2inpL7OOOH+iaS+h5Ouafx+9jg
81wfXf3EVpB5FGxf/LpzDse2G/mcstvazh0c8XfuJZDjf9DibvVJrOkDNMff
64FVvef/v50rOLRlvbWCrG1ZvvMZeWBblAvI2Ob4V/zyH7jmr9D13j+fgCyF

        "]], Line3DBox[CompressedData["
1:eJwVzzdOQ2EQReGxJYQlwPYW2AIlSWyAWLhAVCwAb4GGHCtyauA9kzMVDcKw
AeyO2hI17pDgoziauefO+6XXOVkem8pExDi62yL6OiL68dEe0cB3PuK5EHFs
JnyKGb5iJvyGb050p/IZZnVNvspt6kpmXh7CnG6L60FBHsY8ty2/uBuQf/Bl
X+DPvbeja7FP8xfyJRblK7PprsYn5rV8gyXdrTnYGpGz39nvsWxP3e56b8J9
Vl75/w9uj+tF0T6CVX5ffnX3hneM8mv8g7cOdCnXxdXxyK3rMtyhLmt+8r9c
6Grmk3mkq+j+ACvvOK0=
        "]], Line3DBox[CompressedData["
1:eJwVzslNAlAUheGLEIkyCYiuLcSpADagFEABWoJRKqAEJ0gc9g59yLRxJ2rC
nrDhe4s/53/nvtzcg+5l6yITEU0cFiJKxYgvzPGLRSWiLN9KEVk5wh+u9P+y
gneznBynf/pbe3Z4jbdw532EOm/jnh/jmm/698Cr8sY7L5/KEc94wVJX073y
b2ylu+QP5liZ13XbOMtHnNhVSK5/5KfY5ecYJDdr8A4m/MPtn2jwni7Di3yK
rP059NNNZhtme3yGoV37cg3qUCem
        "]], 
       Line3DBox[{2882, 3096, 3292, 3308, 3972, 3867, 3218, 3589, 3097, 3451, 
        3590, 3973, 3591, 3219, 3784, 3098, 3682, 3830, 3974, 2883, 3927, 
        2984, 2884, 3928, 2985, 2885, 3975, 3099, 2986, 3220, 4011, 3100, 
        3831, 3976, 3221, 3101, 3832, 3977, 3222, 3102, 3833, 3978, 2886, 
        1885, 2887, 3929, 2987, 2888, 3979, 3103, 3686, 3785, 3786, 3223, 
        3894, 4079, 3758, 3104, 3759, 3592, 3593, 3224, 4012, 3331, 3105, 
        3294, 2988, 2889}], 
       Line3DBox[{2899, 3521, 3131, 3295, 3130, 3987, 3880, 3690, 3519, 3128, 
        3516, 3127, 3761, 3986, 3898, 3689, 3688, 3801, 3126, 3687, 3125, 
        3985, 3822, 2898, 3821, 2816, 2897, 3944, 3834, 2896, 3984, 3122, 
        3121, 2895, 4014, 3120, 3119, 2894, 4013, 3116, 3115, 3982, 2893, 
        3114, 3113, 3981, 2892, 2989, 3930, 2891, 1889, 2890, 3980, 3111, 
        3683, 3110, 3812, 3684, 3685, 3681, 3811, 3109, 3452, 3108, 3518, 
        3680, 3879, 4041, 3107, 3293, 3106, 3760, 3517}], 
       Line3DBox[CompressedData["
1:eJwVzrkuRAEYhuFfIiEzY4SCEUJ0GprRSDCMfYmE2ClEx4SpLM3EJWg0XASC
RieWyhqlitYF0HoUb77t/Oec1vXizHZZRKxhNRlRURUxmYr4wgSm5e/qiIN0
xDvfTMf1N/wYbZKP7FmU+Cl9I+2yJWmmMuKKvupXvH9UX/BsA5blDN3EiH5J
vuY7+RNkcen2ye2i7TQRcSEP63foEH2ju9jHudu9/29h0PZBB+gLfcavfcF7
avhadNiO0Y5D27wtz7f45zm+n9/Q12NWTrhJo07+wSPf5pkH/5fHlnxH75HT
l2gvTelv+QI9c5fje/Sf6Ea53Ef/AAdcLp0=
        "]], Line3DBox[CompressedData["
1:eJwVzlcuBVAUheFDQiJqoksEMyF6CyG8aVcXXO3FJWISvOjdBExBJ3ovEzAI
331Y+ffaa+2cUxaJtk0mhBBiNJYawnB6CCN0nBbCD5ZmhPCNH5khjMrbzMt2
7XikE8ESPpriTt7CL/GteCj/dfdkLrZ7xGGdO1zk7/Eg/o5OEf9AhTSkcyNb
MN/ihHxfryB+Q/k0qJMsa6ZEb+/Jv8x5sk8ckK+6azTH7JpwV6cHc/lu7Nf5
06k3z9s14I7OB+bw7/guj+jVmufs6nBbJwmz+eDtPnk1P8vX4Jb8zd2V+dru
Ent1pswzNE2bOq86F7Is/hx7dE4xyp/huHxDr9OcadeB3TqVOMlX4br8BdP5
Z+ySr7grj9/bVeBa/D/4Sid2/w6MQ4c=
        "]], Line3DBox[CompressedData["
1:eJwVzscyg2EYxfHXTojgEhLR685VYMaY0Wf0GVJF3erlTvRuYc0GO22LrZvw
+xZnznPO/7zJl5wq9OfLQgjrkSpDmK8K4TARwgK/j4dQ4l3ySiyENXxWPpDn
+B2+yG+qQ2ilVXxa3sdn+C3erb+mL11n9Ds2NdieuzZ6a/OLd8if1E7LNtXY
rjvuf69t2twf1EpLeAKfpBdv6+nKpgV7p2Yq2aT1TzRhV0WXNr3RN2MP+h73
BcWxJm9+dHVUxMd0O7pxfm5TyRvlbzxFBZsR3bZulJ/ZJKPvoAZdhS5vM8S3
5GF+avOIx9z1unKesxnkm/If1kIndkVdWlfgWZscf8Xy/BjP8jo8wzN4M/ZM
G7oB3ZFNyv1GSeqT/wG/gTsI
        "]]}, 
      {GrayLevel[0.2], 
       Line3DBox[{1721, 1909, 2211, 1910, 3906, 2267, 2122, 2525, 1911, 2424, 
        1912, 3908, 2442, 2130, 2544, 1932, 1949, 1933, 3911, 1737, 1843, 
        1747, 3933, 1852, 1759, 3937, 1978, 2151, 1979, 2152, 3997, 1981, 
        2662, 1982, 3914, 2165, 2005, 2666, 2006, 3918, 2171, 2023, 2044, 
        2024, 3922, 1788, 1880, 3927, 1798, 1889, 1809, 3945, 2074, 2196, 
        2075, 2600, 2197, 2492, 4055, 2077, 2435, 2078, 2617, 2205, 2307, 
        4036, 2095, 2243, 2096, 2439}], 
       Line3DBox[{1722, 1913, 2212, 1914, 2268, 4080, 2123, 2526, 1915, 2441, 
        1916, 3909, 2443, 2131, 2751, 1934, 2635, 4068, 1935, 1738, 1844, 
        3913, 1748, 1853, 1760, 3938, 1983, 1984, 2153, 3998, 1985, 1986, 
        3915, 2166, 2007, 2008, 3919, 2172, 2025, 2026, 3923, 1789, 1881, 
        3928, 1799, 1890, 3930, 1810, 2079, 2693, 2080, 2791, 2198, 2493, 
        4056, 2081, 2438, 2082, 2618, 2206, 4017, 2308, 2097, 2244, 2098, 
        1825}], Line3DBox[{1723, 1917, 2213, 2270, 2269, 4030, 2746, 2527, 
        2528, 2221, 2272, 4020, 2271, 2752, 2545, 2546, 2223, 4021, 1937, 
        2134, 1952, 3956, 1953, 1749, 1968, 3963, 1969, 1761, 1987, 1988, 
        2155, 3999, 1989, 2769, 2771, 2770, 4083, 2167, 2773, 2774, 2772, 
        2811, 2810, 4092, 2173, 2028, 3969, 2029, 1790, 2051, 3975, 2052, 
        1800, 2061, 3981, 2062, 2189, 2066, 3983, 2238, 2604, 2603, 2605, 
        2304, 2305, 2240, 2620, 2619, 2621, 4064, 2309, 2310, 2245, 2100, 
        2114}], Line3DBox[CompressedData["
1:eJwVzr0vQ3EUxvFj0NehIWl3Yw1duvsjTEzEKKGjpWnEYJLGy2BTXYReAyUm
swSdDBVjWYjBIEgkEp87fPM953nO/eVOLTVmV8ciYg7XmYhyPqKCo1zEM0Z4
se9iD9vZiB1ulMz8iQN0UnTdQsQhOujZ19zNe+PUPPR+n5uyBdmledHdF35l
37wsL3IBK+aedxM8uT3hYzy4ndT3zRd4153zuvyMW74r6yv4023IPzixj+s2
kcgynJeXuG3f4om0d/eKH9kb78umuYoa7tP/0Q24rrvjW8zoRvKsOYcb3SMP
caX7B1d2NrA=
        "]], 
       Line3DBox[{1727, 1920, 2218, 2256, 4027, 2257, 2631, 2630, 1921, 2427, 
        2429, 4045, 2430, 2641, 2640, 1941, 2638, 1840, 1742, 3931, 1848, 
        1754, 3934, 1857, 1765, 3940, 1993, 1862, 1773, 3943, 1994, 1866, 
        4006, 1777, 2013, 1871, 4009, 1784, 2034, 1877, 3924, 1794, 1885, 
        1805, 3944, 1894, 1814, 3946, 2085, 2698, 2700, 2701, 2702, 2496, 
        3949, 2086, 2494, 2707, 2708, 2709, 2316, 2105, 2250, 1905, 1829}], 
       Line3DBox[{1728, 2444, 1922, 2219, 1923, 3907, 2534, 2125, 2445, 1924, 
        2428, 1925, 3910, 2548, 2132, 2753, 1942, 2639, 1943, 3912, 1743, 
        1849, 1755, 3935, 2812, 2813, 1766, 3941, 1995, 1996, 2160, 4001, 
        1999, 2000, 3916, 2168, 2014, 2015, 3920, 2175, 2035, 2036, 3925, 
        1795, 1886, 3929, 1806, 2816, 2817, 1815, 3947, 2087, 2699, 2088, 
        2795, 2201, 2607, 4062, 2089, 2495, 2090, 2500, 2207, 2623, 4066, 
        2106, 2251, 2107, 2738, 2510}], Line3DBox[CompressedData["
1:eJwV0DsoxXEYxvEX5XKks7ltMjIxE2UXhcWkrE4ZlAWTS4qMWJBYlKJcxsNA
OecUi0vquEysOMqAzxmevt/3fd7f8P83jaT6x0oiYlTS5RGvlRGzFRF7OIdv
VRGPyYhe8xJ/l3n7aVzAL1yWAf0mFmTVfjsRkfNujf/YbciQmx3zhP0uDrv5
k2P+iyd46OZIn+UpnsMrXVLGzVu6DM/Kte4Db/Aeb+VTP+nujj/Is+4TX/AJ
+/R5nHHTgI1S0IX5Gwf1p7xKFnkCp9yUVUfU8hW7Ul5XdDnzXc36er6PDdiG
aft1foF5b9rtWszn5lbsNl8W/ws/0HeZO3hGOqVG14P/VPQ/kQ==
        "]], Line3DBox[CompressedData["
1:eJwV0LsrxlEcx/HzGNwKg42ox0ohZUKkmCjPoCSLP8AlUlKuk4mEUAb3LAyP
3MriNlgYZGCREoOYhKK8fsO79/fz/X7P6XTind2JrlgIYQinqSHkZYSQj+b0
EF75JDOEF37ICaFFr1id0CvhhbQQ5nhZnuUvlKJVLuMN82vnFtWr0T5GsY42
Oxs8aN7u3j/1md4vj2ETHfIWD9vptJMinyOGPfkdFeYf3Its/StkoV9ec67a
vF+u4Ufv2Y3ulnf41jxXXase4Dr+tHPA2/I+39kZd1dD9Fa9Ro7JP5gwO5S/
1cdoUg/ZaeZJ+cO8UH5CAY70R3gMo5gxn7ZXpH5GHMd2LjClvuRZO0t2yuW3
6F9RiW6zee7hKvMbTsrXvCInneuL/jz6C67Xe+B7HOr9A4GkSLY=
        "]], Line3DBox[CompressedData["
1:eJwVz0so5WEcxvF3IozNsHYkZWuKjixPKToWIpSSZkEsKROLwwY7K83UTC47
G02zGbmVS+lkqwwLlJXGlPuRy8n9cxbfvr/n97zv/1La2dfc+yGEMIRkTgiR
jyHE80Mo5qa8EM55Q059CuHMfIFytNh95uncEH5yv/4Hp1GBNn0lz+kvzWn9
FU9h1v6PZ5+gXf7PCX0Hp+QbTOPVuXm7U3yR/2W+wdyFbHkLWViUr7Gpj7qT
Mn9FoW4bBViSb5F0JubMXeadOPZ9DXbL5rR5hB9Q5M6R/b15BXF3Enb1PCY/
4Zc+YvdoXkWjblhu4nH5Bb+dKbF7Nq+hRTcqt/J33Te7N5Rl/pfX0a2bkE/1
PeYZuyr5AlFUY9f+UL/HMf1fXrDf4Roe4Eke5Fr9AS/L+1wnvwPAkk/d
        "]], Line3DBox[CompressedData["
1:eJwVzj8oxHEcxvGv8n9wmJTyZ1GKwWrS3XA4AxfnJCkpfwoji8lNjJI6dmVh
kQxSl4hJcSwW+V8YmGTgZXh6Ps/zfn5/GsfmkrMFIYQFqi8JYYb2ykPIl4XQ
URrCFF+XJ/l5JIRafJp2dRO6VpshvoaleQ02QU/4oLyKp/gOvqQbcEfwUbqX
b/AVOsOT2KKujxfiKbqTr/EMnuEJrIe66bs4hF6bbZsPPI9/yzFsXhflnzYJ
3SG+pbuyeZQf6APb18fdl/SFjdt88pz+GY/qT3RFNK5/p1H3E/7mvrVptwm6
X98b0b1SFh/WvbgvbNpscvKPTVp3hD/ytO6Bn9q02GzgWdp0N/B+vJ4f483/
/+K5OnnZXc278Cq+jzfpDuRKudM7IzwmV/C4/AdBO0TJ
        "]], 
       Line3DBox[{1505, 929, 2113, 927, 4044, 1820, 1105, 1107, 884, 3694, 
        1462, 883, 1082, 3524, 1080, 1521, 1269, 1700, 3811, 1449, 1519, 1264,
         3973, 2181, 871, 1786, 708, 3967, 2042, 861, 1779, 4007, 1049, 1051, 
        836, 1416, 3668, 835, 1029, 833, 4040, 1768, 1211, 2149, 733, 4032, 
        1757, 1204, 2142, 4049, 1023, 1745, 1021, 1961, 4048, 1019, 1514, 999,
         3459, 1001, 796, 1364, 795, 975, 793, 1720, 3991, 1140, 2121, 956, 
        1523}], Line3DBox[CompressedData["
1:eJwVzz8oxGEcx/Ev5e78KYrRcDdgM5iU1WRjUc6A8l+UU2LUkWKxc4PsVmKy
sJEM/pybpKQooXSL12949/58n8/z+z3Pk5tYGlqsiYhxZNMRD5mIe1ygG3P1
Ee/NEXsNEZtyLxd5A+36LvOC/sxclPPcySPcwU32/Opf5CxanDGGXWuNujp5
GFvmWnM1FXEiD1qr4hUV37XhW1fmH/0zP2EWd/bc8HxyFxzpZ/ga05jEuT1X
fIkv/Zt/peUMUphy9mlyN11F1ycfY9R8a+6RC3Ip+Y/5wPv+sI+S73esf8o5
DJjX+QNrWMWKvszb6E/ew604dO6y7pEL/A+2Xzg0
        "]], Line3DBox[CompressedData["
1:eJwV0b0rxHEcB/CPxcMtlMlgcJ5KGc/DYkEZbrqyCHGWK5wMyn9wLAYTMV2J
QhETGSXJKGVzC12eFmHB64Z378fv9/fr92vJLmTyVRGRg2RNRB4W6yKuaiPO
6iN6cLNsFo4TEbe6lGwSr/MvNhN0kz4HZdk4v2GzQh/pV3EBGvUzsKY7lDfg
BD8GK3yB/7b7gr/qiIz8g/7RHeBfftjdy/QQ/rRJy+70e7JT2Rvfj5f4Pvxu
MyLb4Xv5B7oHz/PPzqXoss2g/FpWB3PeI4tn4MlmGpdsBmymdFuyE/pelqq8
v2xTtk/fyLrxK190rkh3eMYo3Y4v9V2ybb6t8g3pVpzmk/hC31n5D87vurck
e4Rz/T+0djuh
        "]], Line3DBox[CompressedData["
1:eJwVzq1LQ2EYhvHH4j4UDA4mBkEWNhGMCipYLAaLJjHoxCLKJkv+CZoWBJNB
WDF41tbE5lxwySIYp0EsS4IY9HfCxf3c13Pe9z2zB/Wt2khE7KCUiaijkYvo
ZSPyMofHiYgZ/gTH+pJdVV7x+3KaP8KeuWTXzkckKHCHaKbOt5NyTN/FhX6u
ZxD6Nn65H+f+zFOyiO/RiE294+6hXJUr6cx/+n6DW9bfZCLv8MJ/2a9z4+6o
eeOG6+oDfk1WuWuuY37lFmUbZ1win7kF2XL+lGuZ59xdQdduXn/iy/pl+r+y
iAe7AV/h+t64xQf/jnt3/QPqhzBU
        "]], 
       Line3DBox[{1828, 1904, 2249, 2104, 2315, 4043, 2414, 2413, 2412, 2241, 
        2084, 2306, 2404, 2403, 2402, 2239, 4025, 2069, 1813, 1893, 3984, 
        2068, 1804, 1884, 3978, 2056, 1793, 1876, 2033, 1783, 4008, 1870, 
        2673, 2012, 2674, 2675, 4005, 2672, 2671, 2670, 1992, 3942, 1772, 
        1861, 1991, 3939, 1764, 1856, 3965, 1974, 1753, 1847, 3957, 1956, 
        1741, 1839, 3953, 2224, 1940, 2346, 2637, 2259, 4028, 2258, 2222, 
        1919, 2329, 2629, 3992, 2255, 2254, 2217, 1918, 2124}]}, {}, {}}},
    VertexNormals->CompressedData["
1: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
EE9QMt2UtunUbXZn9Iv9iCfw9jCTv3Y3av983PtNQ/onNmX5aevLX3PYy783
P1QMzGMO/5j9IHV+E/vxdEKlcUAFe2FsZPrGihwm1lKP3E9E2IHc/8ABC3Jf
L40Xb1pMGti8a4K2gwKqWf9pnhbT1mUzQwt0fJCPkbfKBef1zByxuOnYb1o7
ZM/etPYNc1FxV6pRSisTmj+rMt4phUmMm7kR9rItU5I5O8vW+XTCvoHuy9ro
fmog3U/J/x0HZjMdhzV0HGbX3ZjMjSeTWv9rE8azMOqLPMZTldrTqP01tX93
t0IchllilJSD8WmIGXsE49NF7WoL/9rrqf3F3f03xoW8Y2yd/E2QF9Zo4lqE
fLDSLfOEuffOrI6Y8gzvPT5//H28d40Dkydyz8VWecs8w3O5aSR/x3OJrAjM
Q97RFB1nTdUTVYxtSPdV5B2JRennYDxLNwrbc+PJ9F/YswrjaZ5+pYa7ngk7
pzUO18tr/jqA66XrmBrueqbf1o9LcX1VdZk6rn+xUD8G+VpPS079GrG2homu
8xuOfK03X0Z8wnhVmJnMwPgtlvb6g3E7XDTzFXc98/7RpWpcX32v51sDd73n
k0Ihu5p6ZqCTmgyuv2UvVIbrFw1QNEJ+2rBP384+aa1kBk5Y7Yr8tJzo84/w
/Tz4c7OU+34Yq7z1mfh+Dsc924U4l+S3zV8xrlMubfHGeDpQ+3Bqn0btM821
1nDtM5bBke5oX8ZZZBHaH9KolMG1z+wY75qG9tOY8aFof9XbxeR9vN9QeBPv
x+7IJvJelFcF5OM7L88PmsJ958zsO0aP8Z3vHFi8hrue0d3pfxjX34u3SyD5
sc36xdz1jOvwy22h3PXzLV4G4Xo55VWrcb35Xdlg5AFedJnyBNcvkptdhOu7
T1+YhN/Rg9t1Z3F9BpO0Gc9lZendjt/f4VG2u/BcMdRuSe0+1L6oycUKz1s1
Nnc/8v2+2AQb43lfTX/9Es8bHOeTgd/j4ONbQvC89vn26Xhfv71u1iAfb51p
cRvel62cIHlfmuMWjsPvtOJVUQneV5Lx2zp8P2L7+kgjz01r0n4PfD8BTqm1
+H5+3ipcjN/v+iwbTXw//Hvi3xv/vnj7lgf/187HM0sT/8Yzn9J4pj71x/ZR
/0qb+ldL5NXQP0Z28hDS38cxs0vRzzCvc78/c7/TSQNcXRE3q9Rf0we/02Bq
V6T2QmpXSJnmgffnfV1qLd7PVB838h6P3hRqruR+j9n7e9K53yPzZb+aD36P
VkOygvD+JG7YkPcZsmUeeY/DH9d+565nxwyf8xLX+//e5YXr3Wkc7wSN48nT
OJ7J3/6z0rT/ybT/49STfm3kfu/BBpvTML8tkt1Rjd+74IxEe+TF3XQ5n/Eq
vYWNbz34DXlxzfV3U79Yl7ODs4OrhD2b2UmHfjXN3PaMSdz3fsKC4iq2O6xe
ot2okb1StE7s29k0RvjqrZEvzjSyxoczJfRSK9kzD85uRJ6e5ax5bvOTW9i7
qusDsze9Zye4qwco9ctjbqvPEQyqKmQOCqm3ID+qSuyiPeKBFmvUdn1KK2Vu
/VRInDilmVWd9zY9oE8uIxlsJBQc94K583jP8qeLP7PxMlKvkY9nXb+jKVIr
k+kUbnqbUNPKblsnI2IZ/oIR2PNjB/IAt+xPX5W4oom9k1IpKNevkLFblb7y
mF41a/KrVivoZA3bZd0ZeGpNGfOD5psNoPlmMTTfrN39jDk4gN2NSoR7uerG
Y8K7zO1lX0vt6oZrznDjyVwQz2Uxni6LLjdgPHd3Nv3gxpPRa+rJx3ieW7y5
AuPZb/PdbplFrezw+bvKl2a9YAtnHa+uysljmjKs9JE/GdvsGdJo/JpZojOg
L/In/Xer7vy8pYU9Pq9RJHNeEXPmSotfWVgu4zYhdGKQehOz/MKjtLqoQsZI
TlPukFQJ4sMTkYefSPPwpWkePrc/VUFeViTNy/pB87L6Cngown6J2oXr/9qF
BFLMkLfZSvPwg2kePrefmon9lCDNLxpB84sO5FyrnJ5Rz3rf7Nix2SifzVC3
mjrdqppJT9i6Gnme9g8/OaddKmOWXxPUR55ndsv6ZUrXuP3j6MzCk1NqmRMH
X/Yozylj9tN8MGOaD6ZB88HaTLfoT11wj3mxYFM/cEr3VEqIgE8aRO3J1H6S
2l06P6hw3yfz3OLOd13u+3SsHKyJ79M0YZgn930y5zYP3IrvM/XuiG34PjWk
HuwAJ8L57aYFg8wamLS930zAiVhL7XuoPYHah5d9Qr4rI7Fz+Wa8L4ma0FpV
7n1tfn/Qk3tfzPV7cqUZ3PtSKq/dgvd1sNe6o0rnq+rx90uk8xuZkF9qF4at
qGSuHF3/feacHIwzg7zuZJqvbkLz1fsIpJD8BCean+BJ8xO49/sZdntqP/qP
nc8/7y8gsOk/+efc/3W4Poaeg4fQc3DHnKZFLcH1bH3c9HJT/QJGIZrdvn50
NeNzJkEU+equYo1Dti9h2ZV7dqsiXz3tz4L5uD5uUYjICv0CVt1cfQuu17c6
eA8c1jaDFysIlzVcRBc8VgVq/0TtQhF/7bme79+ZWn5ilG3+PFj8NJ/RnVuQ
Urkgj3ncYT4fPHGxt3cOuXW+Y59tcVIGTzyN2hWpPYnaY5br+SL/P7bDxEMu
/QM7NMerEfn/FhdcV+6Q4va3Dpsm+MuUsQ+P1AokPEBetIcWxnk/zZ+/RPPn
OftoxBWP0nNqTXpOfcbkL7eV57h+pfzWOGpfRO3N1O7LLgji+sOsspJeif7s
tA56jf6ke3+15frD6O351H6M64+lYMubeK4/H087DkT9xfhjK4XrKqpY1UHp
dqi/WHND122NbgObfyhtrVdENXtht73/pkXZjHrq3O5+7g3s0rdWp8JXVLMB
bzZU3QvNZg5TPspxyku5QTkpAdQeQO08P8Xq8VsZ7r6MufKHllruvhu3jtDD
fTVz1/hz92VKNlwyxH0NBU9uxn3fK7aR+pfY0U6of2E9czeR+peQ2uZ3V+rq
2Ytry46PlqphbX5XyRxty2LEqhvauesZdWn3KFz/TLokGtdrhEa2cNczQ/Sf
7sT10hvNf/ty1z/aqdWBuh6d8Ikap6ZVsgkin/VR11OU/PwF1omaHZOXcusG
+2LZoDysF3M3uhzAPJmserWY+92xoYeunMTvbpOf8HXUGZndm3IycuAD9p6j
jAnqjEocujsxD0dUvXNZlvWCMT7kX455OHVCmSLybI0M11vhXFjjZqEqzoW1
WndPx3wrvubVLm6+Zfct66f2d74VWIT5sJbGl67Q+JKwgIcH5s82Wl8mR/Pe
ufm2Fed6DvRcbzo911sQ6b8e8+FQj4Bkbj5ks38rjJnCzYe3SkTnoO4pImDK
pLULktkY89GLUPfkvvxLLubb6VOifnPzLSN0YewEzLdzNV5bY/4UlQgbAk5Q
vV7HYcyfutTeh9obqX3V1IES0HcbPLarDfygTa9WE12m3KlO/YY2NjKbXjvJ
YPz9+ltLY/yPz3r/nht/Zul6+TEYf+cgzYcY/8Vba22x7i+PG9rEzauMl5OR
N+ZVUV+LR6gTqz0n+Yn7y+S+OqyFerGBPZMGw6+4cMt1EudXMPe23vjWxvkV
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
ixsWMRe3xnS/q6hlVLd2BO6YW8Msn//w+w6jQvx+J/x33tprmrcWpar5LbKg
krm5ov9s6FHkGq+sgh5FVtOk/n3lKpjH1z3yRm5oYCZHnw3y7P+RESlYJs7Z
2QabzGzYzzR6noJ9EOXL76V8+bOUL69M7e7U7k/tdTNLZLj+sw5uoT/Q/zsl
PgOHcv1f6Sh0AfGrLWNXGkBPY+LVljeIX+3XmbMZ8auHI7qaj3HjkyoUlI/4
VZrD6ax+9Q3MZ2H9d9DLCsjTmAe9rPmU7yJN+em5lPPyPiZ+MsZN0GxrB3df
9tWZ5K8Yt4PzBFsxDsaimbrcOLDxb4U/YhzsJrUJYhxidMe9556XPaJ8/wSe
t0NzUhd0PMKnXdHG9Q57HN/i+vDB0oMwPlW/N2Pc2HbbK364/uWxn6PwvL9G
JgmWcff19+0QxPPGX9rbyL0vtvPD2Jvc+2Kld2b2ceXel9vFjnzEJ7ccu/Nq
8dN8tuG1GIv4pOPkM0WI354VqL0ybEUlGz9q5jfEb5f/Cx+8l5/M8n7yoaOy
d83ZeqZHZcf46Ytr2AkP5XqWJGYxaZPOb8E+Qq3ypRz8mVOuFurwZ2Qpv/sn
5Xe/ofzuKb243q+p/a3a8Vj8rjfM8j/I/a7ZS2anTPC7dnrtMLH4fANz/bJ/
DaNUzbYZphx+kprNtLXdulGmUMekakxcOepjNTtDZuejhsBCZk56fj/4IdIp
0/S4+Ydd825eMuafF415kzCvnpYvzOwadY9J27b7jxQ3XyVT/1Di0F//8DP1
D8dPLN+IfdAIUeNx0H9QNjlrgX3QT23/VdgHqZ0xf4E42OKTwROwD5pI+del
lH8dTvnXPBe7ldqvUvvrf+FiKym8HMRy87B7WWAA9J12RdduwDzM54Op9coH
W0H50ZaUH72e8qMPUPtGal9F7W8Fw39gft5Xd2E1xmfy8q58jM+QQntZzOfx
L1+XYXxCJ26XwHx+Y97d5ThHUHK+86XB+DX70v1MI84Rfqem+uMcQfTCh7uI
Zw5nzzsjnllQ95cHvZnyoFUoD3qfeGQ15vmKRMcZ0LnaG1PUBzpXuqcyh8I/
2aM1PZRbTxmtmM/NEdx6upCeh7pSv9eQ+r2REk994J+o5z94zPknzGbHSTrw
T1QoN3kj5SZfodxkTWpfTe03qN2R8pQLevGUJ0e0jIQf0rZS4yr0r7Ic7R7A
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
XSayiZzfwuR7t3+H38I9193/xck61yu+2kTjq+o0vvqdxlG/0DjqnPzIu/CL
Np9u90P7dbf6vUD706wMF8Jf7ZzdMo7zG5kZTtJj4Tc6V4nEQm8/eGAA0XF1
LPpJdFyjPlsdhJ/JHrs5DNdb2M+XxPVa/8Kxsmq66ozfy+32Oj3u+2dfJcza
gu8/kfKnVvbiT/WhurJ8vNGKxhtjQkYWQ1c2adVGov8vKWtB9P9NesX9VtO4
X2n/4uP43XnstVLGfQcP6WuG+07RflDGzVfMh1K7e/AzjZzGmmC+4rlR3pQb
dZRyo1xp3OwZjZs10rjZqZZt1Vh3JC+HXMfvVOhbPymsO/8Wp+q1rjH/sq4x
/Lr2up9EHNZZ2z3todz6yKzWWG+N9dEt+/05/K4ubVnTht+lTISuOL6ry+vC
1csUGpn3zt+1k7h1xTx8hk9q3kd8t7/i/ge/aQyNz+yj8ZkTND7z4PqHT4hL
/HEUuoY4ksfJM/0Ql2jPjvHDd/yhftUf3PenZN1E3PfO1Nny3H3Z4DrRlbjv
+evml3Df5d/2PsP6frU1xBn93y642BD933dSO3NsbjNz4HncvGnlaczQuQbv
veNKmTW1+9Nhf9SdepyzsyMXLngLu8eyPh84/4eRnOvwAH5UpVvldPg/JpTH
NI/ymOQpj4m32/Sy8zwObcrjiKA8DgXKadpBOU1zKKdJntpP9rKvsjTO5fxD
1nCPwzP4mfsuXLwM/3Dv4IIc2Kfmm9jDb/ziqxoKu/KA6BTuuVij47VWeF7j
U8868FwD1n1Jgj0j7Vs4nnf+xZdtsL+u2SgNnStjtZmC0NWxt57kB10d6+wx
p/HeRT+tw/izSnZVAzD+MVuiVfDer/zyXMWNP+udmXYQ4x9mY/Id8UD5oiEX
EV9qU/r0DfHAouxOT7zHxVtWD8L81F7oOxbtPNGeL4v3uNUl2AntPMiuC0I7
vfYjLL8f+be4U/vH54OxD5r0ra4bcZ7huotvYF+zXn1qOuLAOdvdnBAX2n5G
2QBxocm94ks5NI6Uo9azFfu1Z+uXv+X2WeyKNdtzsM8aMuBOPX6/0ydHbIW/
4ZJtYo7f75EW411Yv47OsXbAPJzlVfgB8/CL358EuedkNjnm+eK57/f9IkfX
L5H/xVFSpPGZBTQ+k0njM9toHGY9jcOspnGY3xkZbtgPyi3ZG4t+yusEx6Kf
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
h7+bt0J3Feo7Wq4mz8XfnZA4wRH//6FQ2ZWos5nkspuvx7GWfHYa645kmDlf
fxO8ZRZfd3Ow645U9EPsZYPHqDdZrePhj35ICQsftVI/gX2sukQN982aSjMX
4T6/kL+VojyV8F4ieVe2B71XD7elMTi/LPeT+YDzzJynhzRwjvnQL87wQ3Ih
YxpUkIr7xfd3vb2Oe8WF8sprIsRvs+MWHYnAfc4K5+/jcJ9zZ4Dey5zseDam
zFlmRs9a5k6jTxLudYyh/LAR5Yd1KD/8OmXKOWPZW+zHHuFpuId28aV4HM7p
Ev5wcRncp1pAnLHtNh9f4P5Qv1UfE3CfaFfHa/w9okbaT3UWE+P3U6NpPzU6
7vNw9E+EYck08GkTdbznoH/ujND8iHZKjJnaC/dPxn6sfIt2lu1/cQLvtT0/
LgQc5ldldQvxXhf+MdXFveo6pX1PcC8+cFHXdPRD3LLaC2j/sKOL0H5W6umV
eLRfmXRy95NOrjjp5Hb+zXkQy8c9Nym65/aHt+DI8xYm0T2x6+3k5WaTflx3
0o/rTfpxu0j3KlBE96qedKmKSJfqJ+lS/Seen4x4XtAtrfjNbdD6jnb6U/2C
19AtOtC/uTUycofhxXxWe/V7J+jgXI0aI/O9oZwNbXErlG4pZwpfdmgdcDmN
WdkOZ0aU63KK7POJu7KRuCtDiLsipfN1XcukOuZVl5N6F85cZjfZuHjrfMr+
zUvZK8JLuX81d+UFj2qm997T1+59LWIkvz5afFz3JWN34tRqzs7Kl0REwt4p
crIp7M1n1Ov2LqpgGse+ZhT2ljMFTiE7o5vTf/M3xIi/YUr8DUEHhbOnHjGZ
nSDoobTHwfAiLjnXz33nTZmdsJv45BeJU/GCOBUSxKnY92Hm8tPN7xn95ZsP
nBn1hi13t/VY6PSHFxEgwotoT69q48M1llrPKxmnLb0fy/iUss80fB3UdTKZ
0xr2HlYKVczXb5F2qZqlbPqp0ZGTf2YwluqzPDk7u9Y22xb2mxF7r8IuYbhu
C/ccVtuy3xM8Z/S5jQfwnK6GF5LdRpWyb7upKvfaVsme8UpUV8vIZrQuvz+f
YlvOjNk8SeexSQWbLbfk5TvpDOZi8eowg4/lzMrgrSfa6srZaotu1gO3pzNf
Rkfttdhbzlr3rQ/UWFTBNv50uXeJ6/+dD3qrPDCpYL7HRns/sy1nX2SlKdVy
z3mnflqJs7NTVj/w4ezMrUPfR8I+guIcJ4pzPlKcExuo5cA9n/nxtOwc93xm
6vFrt/D8uKmmEVx7WM8Abw+uPUz6jFortOe9YedRxZfL2dMXxQ23zqhgVg6p
MrUT49pjcCWHe19G1r1mMPe+jJz2mAl4350LlLehn90mznjA9Q/T7/WRg+if
4nL94+jn0WNjd3H9yVQoD7qG/vSnuMWL4pZ4iltiSvueQP/7RBbtxO9TGaso
/L5/zv+s0P96k2Y9xPN3TjVzxPM1v6rq3p1Uw56balyavq2AiRQ3cu9tmMNk
L++xmhs/bKziFEtu/DDe9129MH4c7Lp+5sY5++16riY3zln/gp38OC9ICl6H
+eLyKjGEmxdsSW2NGeZFWTv++mzYyg2YR/7TXwfj99nBy5fi98mkO/9l5C/d
+cekO7/UMN6cm79s6H2D2KAzlxlH+76emL9ea2t/gGNwSIRjULxeve/4pCpG
5tLn8G3Fd1j5pbeuvRhQxujTuidO654krXtJBsodiqwq2dXKy0/c5L7PsSDN
nubcd/Ez+ibHXq1jlC5Eim29E8q2dU5c+rnnS6bEdWauGzf/rXRrV9zl3nvO
ZH/bBK79A7+mTBTn+lcyXSmL4b6n1MD4lzu4fr7BnJ3M2dklJmsyYP+Un5IB
+9jb2Wncc9j6f3uvw3MaXTvtx3M2appFgxM0JLhpJub3lwi5M5indocmJGLe
Zj7qrwV7xhBpfv4OnzaB53qYaiu8wfo3vr7hA9axj03905f3qmIOblmYqltZ
yqjtuWJsIvucCcttOFnEjY/Z0cqzl3Lj65KU8VIjbpws8VZ9uVDpDZNunXOZ
4dYPHc0F3oO47+41f6sf93v27a2f+vj9hkKZxfi9VKLLnGDuewQvN9Z9zq2v
PS+0vljVkM3sovruqVTfrUn13VV0j/ct3eP1onu8UcThVCcO52nicF5aqT73
sk0Bc3eBmIcaN0513NwrZbnxGdtOvfBNiuskKK5zoLhO3cg3B+t+86r++lw7
2fqmmelop107+6/QzBV8/3RdeA/9w5YqPluC9zV7OFTxbxybC7d/FHH9xjoM
mRLG9Rv7NEvGi+83g9e+6Dd/U3cDPCes7uQiPIchPuQp4kMuIz6k24aMHIwr
m6RZq7jxwIrV2OzGePBIclTFuEqr2JfJjR9W8odqNsZPtvW3mxgns3evwzhh
za2tef6VlatsN248M25Ovi7ceGYnG8vLYjwP77FgCsahtOWtNDznY7wWPz6n
ks7aM9JZ60A6a4rt5EUPDJCRBPfEY/2Tp/DDB70OZ8H/Rl/8dX8mX+T+TGGQ
VX9uHrHfg/fN3XYnlLFIHLoX80jznuMgbp6yN3Z6PrUpvsOct9QIwDztGB+U
4cfNN3XLWFPViDpWXqpSdfuAl0ytyH2JDXRfgvOL/n/TWUunOv0iqtOfQ3X6
e2NXKf5Nj6zceF0JvmN9UWwoxn9q+sjj+I4CZ8yAOGMBxBnzyM1dBT+rNSyR
XydPjWvi10k1mTkzuXWV0d69vxrr6rfEzBNYV+vKJq7nxjM7ZbqzCzeeGfn6
8CqM54B2+GCfKe56S3FXM8VdLUHm0xxL7jDDbx6QiEivYnbGl2eVdSn7rZ/O
xV0j/6uf/pvfKnJ+LYxjzp6COEQYz2v66HU6UHKH3Vp2qT/3fLbmkUcanq+f
raMFf+GcPqSJey9We3yxK97rgfUuxBtsklmRA+KN0gFd+HjDSunkG9wf8hEr
v4Dv9u/AKZ9xj6jPt9QMrDMrIk2vYL5ozdA+gX7eQHX9k6muv4jq+rnve/Zv
OkcVMS+SsB62+jkiDmJnlGzwQ7/lUP1pNdWfPqT606FJ54xxfmoucn7a3v5L
leLwvRSHdxfi8HfKef7cOI563XcZNz6Zl++Ce2J8CrwGlvgNArch5LFVyztu
PnY7nOYD/+KXvEgK83HSiMFPEf/szzw8CvHA0aSbUxEPHCZ/xn3H2Yj3lMiv
6VuNfYX4wSHJfyjipfG9Ncfi927dX0nAfxUrDXfCfB+m0lkGz78R3pr1X12b
XRQ3KonwQ9bQPjc90eoL1tOKBeuT0f5d1x/tR/ubKa/VIeBXXsuA8lrn6Xwh
TOR8Yfb9F98Ql59eplOM+P2RdT8+Pk80+Du/okTxRgHGSUDzRH88L/DIGv6+
mbBffkP7ZQvaL+8mHsUM4lFcJx6FGPGjtIjLpEhcpg20L+5D++JLtC+e/+zJ
AKxLuxqbJsK/91/bZx/WpfmPJ8pjXbIqmOeP+GHWzcZArEu+QeI9MS/6FihJ
Yt6pWF/Nwbwwovf1/fW+rPC+krQvLqV9cTbti7eI1HvOp3rPiOcnz2LdE5d0
NcO4+uf5mV4YV3WPXNcj/snMtdSBH0u4s9AL8Y816TWEkV6DC+k1zKF6sUKR
erErrjmq2OeIPTvO75OGylz9iDjhmPL3IjzX7owU/CNzX12D94+CHh63PjzD
eaCgi7eV9tEDaB9tT/toPZH7vRl0v/fogvSEv50nlkldmIR17MD9pj5YZ6ZI
P0lFfwpctbHEVbMjrprdkzGIA5nWim1xiANV1HRPoB9SFrv0QryXMm1iDvyI
TZ9vEfheyornByN++2Q4Tg5+Z9H6F0vwfT9kaUid5f6dPUnPBP4lavinSejn
ENqnf6B9+nnap48gnskc4pmcI56JwFWbS1y1ROKqSeVsVID/G/L4xVt8h8AR
26ThB4fQvcoCuleZQPcqx1A+x4nyOaqUz6HxzArjWZ7Gs2w7ukvt6Y84EZem
B3FpLhOXJiqO4eftEOcj0WjXg9D8YZi/bW1tnwv+okeZ6K737G86icJ3FRNz
5L+z8H3dqa58GdWVW1Nd+RPKC5lQXiiW8kLcuJH6m65ZwsAeH/+muzFBRF8+
lfTll7VzLiya3xPWvXq6h19H9/Bj6R6+kA85L5IPGdjyQrIPw+erL88+Oz9h
jKSl59CmXGZp1KwlXPvgT4+rdlySYNSQJHeWa+daOn/sTuePY+j8MYvyn+8p
/3md8p8P6bxvo8h530U6V7KmcyUbOlfqKqJr3IH8e+iUfFWvhAJm0JDRm6zH
1DCd1e6Kt3bMYb5K2jCcnV36U2IjZ2dfWM0Rg914Z1O+Dfe7sUEZhSncf3fQ
VauI5Oz/B/L8elI=
     "]], {}},
  Axes->True,
  AxesLabel->{None, None, None},
  AxesOrigin->{Automatic, Automatic, Automatic},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGrids->None,
  FaceGridsStyle->Automatic,
  ImageSize->{367.0538528219989, 172.6913466284996},
  ImageSizeRaw->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "RotationControl" -> 
    "Globe"},
  PlotRange->{Full, Full, All},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{1.1218547116447952`, 3.149632179981606, -0.5208254379201999},
  ViewVertical->{-0.05164515869021755, -0.14499493745716996`, \
-0.9880836228253425}]], "Output",
 CellChangeTimes->{
  3.815762029396121*^9, 3.8157621587199183`*^9, 3.8157622902658377`*^9, 
   3.8157623559541435`*^9, 3.8157630492001395`*^9, 3.8157630834533415`*^9, 
   3.8157680519336195`*^9, {3.815768089900024*^9, 3.8157681082303457`*^9}, 
   3.816301656406595*^9},
 CellLabel->
  "Out[800]=",ExpressionUUID->"f3451430-e37b-4146-93bc-cc89305e1df2"]
}, Open  ]],

Cell[TextData[{
 "We can check to make sure this actually get\[CloseCurlyQuote]s the values \
we expect based of the data ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["y", "1"], " ", "and", " ", 
    SubscriptBox["y", "2"]}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "b97daae3-041d-41aa-a00d-9a4d2d971b05"],
 " values (we\[CloseCurlyQuote]ll let x=",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "1"], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "e81d3711-4f7a-4370-a313-d32853875bf7"],
 " and y=",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "2"], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "ad7dd9be-ba68-429f-9433-5c2139e5a2e2"],
 ")"
}], "Text",
 CellChangeTimes->{{3.8163024511096835`*^9, 
  3.816302505566985*^9}},ExpressionUUID->"0e6b828b-6fd5-4609-a570-\
516ef831c523"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "[", 
   RowBox[{"x_", ",", "y_"}], "]"}], "=", 
  RowBox[{
   RowBox[{"-", "1"}], "+", 
   FractionBox[
    RowBox[{"31", " ", 
     SuperscriptBox["x", "2"]}], "12"], "-", 
   FractionBox[
    RowBox[{"7", " ", 
     SuperscriptBox["x", "4"]}], "12"], "+", 
   FractionBox[
    RowBox[{"31", " ", 
     SuperscriptBox["y", "2"]}], "12"], "-", 
   FractionBox[
    RowBox[{"7", " ", 
     SuperscriptBox["y", "4"]}], "12"]}]}]], "Input",
 CellChangeTimes->{{3.816302460843615*^9, 3.8163024652408886`*^9}, {
  3.8163025075048423`*^9, 3.8163025435959044`*^9}, {3.8163026071477127`*^9, 
  3.81630260727932*^9}},
 CellLabel->
  "In[803]:=",ExpressionUUID->"3b35712b-2d21-4d2c-aa86-bb6eb68ec39a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "1"}], "+", 
  FractionBox[
   RowBox[{"31", " ", 
    SuperscriptBox["x", "2"]}], "12"], "-", 
  FractionBox[
   RowBox[{"7", " ", 
    SuperscriptBox["x", "4"]}], "12"], "+", 
  FractionBox[
   RowBox[{"31", " ", 
    SuperscriptBox["y", "2"]}], "12"], "-", 
  FractionBox[
   RowBox[{"7", " ", 
    SuperscriptBox["y", "4"]}], "12"]}]], "Output",
 CellChangeTimes->{3.816302548995463*^9, 3.8163026081270533`*^9},
 CellLabel->
  "Out[803]=",ExpressionUUID->"f6e38ef2-beb4-4f72-ab76-7112d59b414b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"g", "[", 
  RowBox[{"0", ",", "0"}], "]"}]], "Input",
 CellChangeTimes->{{3.81630255773085*^9, 3.816302617477049*^9}},
 CellLabel->
  "In[804]:=",ExpressionUUID->"b392f48f-0c12-4bb9-b50a-c2e81c6123c6"],

Cell[BoxData[
 RowBox[{"-", "1"}]], "Output",
 CellChangeTimes->{{3.8163025957790794`*^9, 3.816302618129301*^9}},
 CellLabel->
  "Out[804]=",ExpressionUUID->"d04638b3-2e42-4630-910b-d26ccc2ec9b5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"g", "[", 
  RowBox[{"1", ",", "0"}], "]"}]], "Input",
 CellChangeTimes->{{3.816302621038518*^9, 3.816302623456071*^9}},
 CellLabel->
  "In[805]:=",ExpressionUUID->"3d40a59a-bf38-4c92-8018-716c48f93f03"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.816302625843666*^9},
 CellLabel->
  "Out[805]=",ExpressionUUID->"69dea568-7783-4415-a303-75e27e2cdc5c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"g", "[", 
  RowBox[{"0", ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.816302629188724*^9, 3.8163026307615485`*^9}},
 CellLabel->
  "In[806]:=",ExpressionUUID->"d4247c9e-7b8f-4564-81af-f705a6cb8089"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.816302631345952*^9},
 CellLabel->
  "Out[806]=",ExpressionUUID->"affc3d5b-3726-4c9c-9521-09c6b84d8d06"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"g", "[", 
  RowBox[{
   RowBox[{"-", "1"}], ",", "0"}], "]"}]], "Input",
 CellChangeTimes->{{3.8163026319283915`*^9, 3.816302636593966*^9}},
 CellLabel->
  "In[807]:=",ExpressionUUID->"5801cf21-91dd-48f1-a058-6cc034cd7604"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.8163026371334734`*^9},
 CellLabel->
  "Out[807]=",ExpressionUUID->"c3d295b8-85b5-4e5f-94d7-070968e1eaf3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"g", "[", 
  RowBox[{"0", ",", 
   RowBox[{"-", "1"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8163026405652905`*^9, 3.8163026457175155`*^9}},
 CellLabel->
  "In[808]:=",ExpressionUUID->"d964f0ac-1878-477d-8888-2360fbb08f24"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.816302647597484*^9},
 CellLabel->
  "Out[808]=",ExpressionUUID->"a6ea0352-0362-49da-8740-a658a9b32ff6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"g", "[", 
  RowBox[{"2", ",", "0"}], "]"}]], "Input",
 CellChangeTimes->{{3.816302648371451*^9, 3.8163026511260567`*^9}},
 CellLabel->
  "In[809]:=",ExpressionUUID->"3fb51cea-d41b-452b-989e-3e8fcaae138e"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.8163026554935613`*^9},
 CellLabel->
  "Out[809]=",ExpressionUUID->"629056d6-4fd3-4611-aed8-b3e02491323d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"g", "[", 
  RowBox[{
   RowBox[{"-", "2"}], ",", "0"}], "]"}]], "Input",
 CellChangeTimes->{{3.8163026560191565`*^9, 3.816302665295342*^9}},
 CellLabel->
  "In[810]:=",ExpressionUUID->"1425a66f-656f-4141-8bb3-b733e1eac714"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.816302666051321*^9},
 CellLabel->
  "Out[810]=",ExpressionUUID->"cf56c2c5-59f0-43db-84bf-09d2f4c6db40"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"g", "[", 
  RowBox[{"0", ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.816302674694813*^9, 3.8163026766801023`*^9}},
 CellLabel->
  "In[811]:=",ExpressionUUID->"5f9d5d1a-8593-4f79-a4dc-32fdff0ce56e"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.8163026779188004`*^9},
 CellLabel->
  "Out[811]=",ExpressionUUID->"4834afb3-d1a9-4221-94d6-5038f2941059"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"g", "[", 
  RowBox[{"0", ",", 
   RowBox[{"-", "2"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8163026820906305`*^9, 3.8163026857010126`*^9}},
 CellLabel->
  "In[812]:=",ExpressionUUID->"d1470b63-3f60-4f03-b7f1-1dadb54962af"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.8163026864240413`*^9},
 CellLabel->
  "Out[812]=",ExpressionUUID->"f8754891-d5d1-47a4-ba22-bea2d822e4ac"]
}, Open  ]],

Cell[TextData[{
 "\n\n\n\n\n\nSo we can see this function works for all data points we listed \
and it\[CloseCurlyQuote]s pretty neat looking too.\n\n\n\n I think it\
\[CloseCurlyQuote]s important to note the more data points we try \
interpolating, it will take significantly longer for the algorithm to run \
since it takes a long time to calculate determinants of 50 x 50 matrices or \
higher. I read that the computing time for n x n matrices ",
 Cell[BoxData[
  FormBox[
   RowBox[{"is", " ", "around", " ", 
    RowBox[{"O", "(", 
     SuperscriptBox["n", "3"], ")"}]}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "2b50878f-cb1e-4b74-b361-96ab65fa6456"],
 ", which means the computation time grows at a rate of ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["n", "3"], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "f1b4f397-4488-4d7a-9975-13a9d3c7498e"],
 " where n is the number dimensions ( I think that\[CloseCurlyQuote]s what \
that means. It\[CloseCurlyQuote]s big o notation that\[CloseCurlyQuote]s all \
I read). I initially said I was gonna find some applications of this, but all \
I found was how multivariate interpolation is used to model Earth\
\[CloseCurlyQuote]s surface but couldn\[CloseCurlyQuote]t find a paper on it. \
So overall this interpolation is pretty cool and useful for geostatistics, \
but it\[CloseCurlyQuote]s computationally expensive and must be used \
cautiously. "
}], "Text",
 CellChangeTimes->{{3.816299288350982*^9, 3.816299316603419*^9}, {
  3.8162998999574757`*^9, 3.8162999460890465`*^9}, {3.81630000184596*^9, 
  3.8163000944193544`*^9}, {3.8163002024745197`*^9, 3.816300242165316*^9}, {
  3.8163002732036796`*^9, 3.816300652358827*^9}, {3.816300700742378*^9, 
  3.8163007294710464`*^9}, {3.8163007860208035`*^9, 3.816300898386402*^9}, {
  3.8163023764703107`*^9, 3.816302459258844*^9}, {3.816302689266446*^9, 
  3.8163027796776543`*^9}, {3.8163028210270596`*^9, 
  3.816302944322459*^9}},ExpressionUUID->"bf63315d-0230-424f-9681-\
c6f5137cd550"]
}, Open  ]]
},
WindowSize->{958, 1028},
WindowMargins->{{-7, Automatic}, {Automatic, 0}},
SpellingDictionaries->{"CorrectWords"->{
 "coeffmatrix", "ith", "indeterminates"}},
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 2400, 32, 67, "Chapter",ExpressionUUID->"5f297e8b-a49f-4318-8d2c-63a253487d35"],
Cell[CellGroupData[{
Cell[2983, 56, 228, 11, 286, "Chapter",ExpressionUUID->"c3747d0f-6e8b-4b9a-a202-a155b224e3c2"],
Cell[3214, 69, 14508, 399, 1357, "Text",ExpressionUUID->"abb8dbb8-f476-48e9-b0c6-51e4a8e87a19"],
Cell[17725, 470, 1000, 14, 34, "Text",ExpressionUUID->"88ee86db-d7f6-428d-a11c-d37b6bec96f1"],
Cell[CellGroupData[{
Cell[18750, 488, 11437, 224, 504, "Input",ExpressionUUID->"cd7ebf9e-09e1-441f-93b6-fa82c71c8653"],
Cell[30190, 714, 411, 11, 32, "Output",ExpressionUUID->"1eb75b2c-a57b-43f1-943a-ed188ea2326b"]
}, Open  ]],
Cell[30616, 728, 16577, 341, 897, "Input",ExpressionUUID->"a1950135-6d50-492e-92a2-7e0fb6bccb48"],
Cell[CellGroupData[{
Cell[47218, 1073, 5442, 139, 257, "Input",ExpressionUUID->"173123d9-2f98-416a-b930-453c8fcdac50"],
Cell[52663, 1214, 257, 5, 22, "Print",ExpressionUUID->"b27ff624-b434-4ee6-bfa7-7b9c5194cb3d"],
Cell[52923, 1221, 59491, 1241, 201, "Output",ExpressionUUID->"09d5d4b4-b4f7-45dc-9fea-d8a8bc563e6e"]
}, Open  ]],
Cell[112429, 2465, 524, 11, 34, "Text",ExpressionUUID->"ecd2cd06-2c14-457a-b01c-aed52e30732a"],
Cell[CellGroupData[{
Cell[112978, 2480, 686, 20, 48, "Input",ExpressionUUID->"07b9380f-6e9f-4b47-ab89-da194da51e08"],
Cell[113667, 2502, 253, 6, 32, "Output",ExpressionUUID->"bd2c747b-ffeb-4307-ad39-22e6c05ffc72"]
}, Open  ]],
Cell[CellGroupData[{
Cell[113957, 2513, 406, 13, 28, "Input",ExpressionUUID->"206f88f8-d31e-4f04-88fe-b6f552545283"],
Cell[114366, 2528, 37957, 626, 157, "Output",ExpressionUUID->"5bfdac37-288d-4132-a62c-9e222ce234ed"]
}, Open  ]],
Cell[152338, 3157, 303, 14, 188, "Text",ExpressionUUID->"dd170192-1a7d-4e26-a151-4cffc3bc38d1"],
Cell[152644, 3173, 236, 5, 28, "Input",ExpressionUUID->"de123dc1-efc5-48ab-9cb2-0c92e635166f"],
Cell[152883, 3180, 1991, 68, 48, InheritFromParent,ExpressionUUID->"7468fefd-2458-4310-a896-f07db7b0e822"],
Cell[CellGroupData[{
Cell[154899, 3252, 240, 5, 28, "Input",ExpressionUUID->"5dc19150-6a13-4f21-b97b-01b7ae5d37ce"],
Cell[155142, 3259, 521, 13, 36, "Output",ExpressionUUID->"a423aff5-5e15-44a1-8552-116cce006b92"]
}, Open  ]],
Cell[CellGroupData[{
Cell[155700, 3277, 240, 5, 28, "Input",ExpressionUUID->"c173a99d-f43b-490b-b729-b922d5665638"],
Cell[155943, 3284, 217, 4, 32, "Output",ExpressionUUID->"ce419746-c13d-4f05-ba70-ce25d004080b"]
}, Open  ]],
Cell[156175, 3291, 630, 11, 56, "Text",ExpressionUUID->"00d95b4a-a391-4418-828c-57c2f6723250"],
Cell[156808, 3304, 879, 14, 56, "Text",ExpressionUUID->"950e6d6b-4e9a-49ea-98b8-d7712274f42d"],
Cell[CellGroupData[{
Cell[157712, 3322, 1432, 35, 28, "Input",ExpressionUUID->"87708c92-73bc-4305-9030-e7870d081955"],
Cell[159147, 3359, 952, 29, 32, "Output",ExpressionUUID->"e003b6d2-4793-4d9c-a14b-67a91b4eb61f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[160136, 3393, 929, 28, 28, "Input",ExpressionUUID->"a4bd55b7-28ce-4bd4-8540-69e5695bb510"],
Cell[161068, 3423, 906, 28, 32, "Output",ExpressionUUID->"2ef573f5-b9a8-4ccb-bade-85fe963716bc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[162011, 3456, 984, 15, 28, "Input",ExpressionUUID->"e5a59d2e-8ac0-4c45-be68-a70139b64869"],
Cell[162998, 3473, 533, 13, 36, "Output",ExpressionUUID->"fa7cbbaf-0deb-4eb1-979b-7683f44262fe"]
}, Open  ]],
Cell[163546, 3489, 223, 3, 34, "Text",ExpressionUUID->"bacdb59b-b8a5-426c-bf99-382a13713e20"],
Cell[CellGroupData[{
Cell[163794, 3496, 467, 9, 28, "Input",ExpressionUUID->"0115d577-766e-4846-8127-cafa7a611dee"],
Cell[164264, 3507, 880, 21, 52, "Output",ExpressionUUID->"39251e61-16b6-4bf6-ac48-883b4414284c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[165181, 3533, 704, 17, 28, "Input",ExpressionUUID->"0cb4d3bf-cb0f-4c8b-940f-9a2415af23f7"],
Cell[165888, 3552, 199648, 3293, 190, "Output",ExpressionUUID->"f3451430-e37b-4146-93bc-cc89305e1df2"]
}, Open  ]],
Cell[365551, 6848, 877, 26, 34, "Text",ExpressionUUID->"0e6b828b-6fd5-4609-a570-516ef831c523"],
Cell[CellGroupData[{
Cell[366453, 6878, 731, 22, 48, "Input",ExpressionUUID->"3b35712b-2d21-4d2c-aa86-bb6eb68ec39a"],
Cell[367187, 6902, 537, 17, 52, "Output",ExpressionUUID->"f6e38ef2-beb4-4f72-ab76-7112d59b414b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[367761, 6924, 225, 5, 28, "Input",ExpressionUUID->"b392f48f-0c12-4bb9-b50a-c2e81c6123c6"],
Cell[367989, 6931, 196, 4, 32, "Output",ExpressionUUID->"d04638b3-2e42-4630-910b-d26ccc2ec9b5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[368222, 6940, 226, 5, 28, "Input",ExpressionUUID->"3d40a59a-bf38-4c92-8018-716c48f93f03"],
Cell[368451, 6947, 153, 3, 32, "Output",ExpressionUUID->"69dea568-7783-4415-a303-75e27e2cdc5c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[368641, 6955, 228, 5, 28, "Input",ExpressionUUID->"d4247c9e-7b8f-4564-81af-f705a6cb8089"],
Cell[368872, 6962, 153, 3, 32, "Output",ExpressionUUID->"affc3d5b-3726-4c9c-9521-09c6b84d8d06"]
}, Open  ]],
Cell[CellGroupData[{
Cell[369062, 6970, 247, 6, 28, "Input",ExpressionUUID->"5801cf21-91dd-48f1-a058-6cc034cd7604"],
Cell[369312, 6978, 155, 3, 32, "Output",ExpressionUUID->"c3d295b8-85b5-4e5f-94d7-070968e1eaf3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[369504, 6986, 249, 6, 28, "Input",ExpressionUUID->"d964f0ac-1878-477d-8888-2360fbb08f24"],
Cell[369756, 6994, 153, 3, 32, "Output",ExpressionUUID->"a6ea0352-0362-49da-8740-a658a9b32ff6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[369946, 7002, 228, 5, 28, "Input",ExpressionUUID->"3fb51cea-d41b-452b-989e-3e8fcaae138e"],
Cell[370177, 7009, 155, 3, 32, "Output",ExpressionUUID->"629056d6-4fd3-4611-aed8-b3e02491323d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[370369, 7017, 247, 6, 28, "Input",ExpressionUUID->"1425a66f-656f-4141-8bb3-b733e1eac714"],
Cell[370619, 7025, 153, 3, 32, "Output",ExpressionUUID->"cf56c2c5-59f0-43db-84bf-09d2f4c6db40"]
}, Open  ]],
Cell[CellGroupData[{
Cell[370809, 7033, 228, 5, 28, "Input",ExpressionUUID->"5f9d5d1a-8593-4f79-a4dc-32fdff0ce56e"],
Cell[371040, 7040, 155, 3, 32, "Output",ExpressionUUID->"4834afb3-d1a9-4221-94d6-5038f2941059"]
}, Open  ]],
Cell[CellGroupData[{
Cell[371232, 7048, 249, 6, 28, "Input",ExpressionUUID->"d1470b63-3f60-4f03-b7f1-1dadb54962af"],
Cell[371484, 7056, 155, 3, 32, "Output",ExpressionUUID->"f8754891-d5d1-47a4-ba22-bea2d822e4ac"]
}, Open  ]],
Cell[371654, 7062, 2046, 37, 368, "Text",ExpressionUUID->"bf63315d-0230-424f-9681-c6f5137cd550"]
}, Open  ]]
}
]
*)

